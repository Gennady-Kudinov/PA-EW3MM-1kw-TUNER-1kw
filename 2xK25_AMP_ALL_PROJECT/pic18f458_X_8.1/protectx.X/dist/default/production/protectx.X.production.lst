

Microchip Technology PIC18 PRO Macro Assembler V2.00 build -1524193055 
                                                                                               Wed Jan 11 19:48:43 2023

Microchip Technology Omniscient Code Generator v2.00 (PRO mode) build 20180527130849
     1                           	processor	18F458
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	pm
     5                           	psect	eeprom_data,global,class=EEDATA,delta=1,noexec
     6                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     7                           	psect	nvCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     8                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
     9                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
    10                           	psect	cinit,global,reloc=2,class=CODE,delta=1
    11                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    12                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    13                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    14                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    15                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    16                           	psect	text0,global,reloc=2,class=CODE,delta=1
    17                           	psect	text1,global,reloc=2,class=CODE,delta=1
    18                           	psect	text2,global,reloc=2,class=CODE,delta=1
    19                           	psect	text3,global,reloc=2,class=CODE,delta=1
    20                           	psect	text4,global,reloc=2,class=CODE,delta=1
    21                           	psect	text5,global,reloc=2,class=CODE,delta=1
    22                           	psect	text6,global,reloc=2,class=CODE,delta=1
    23                           	psect	text7,global,reloc=2,class=CODE,delta=1
    24                           	psect	text8,global,reloc=2,class=CODE,delta=1
    25                           	psect	text9,global,reloc=2,class=CODE,delta=1
    26                           	psect	text10,global,reloc=2,class=CODE,delta=1,group=1
    27                           	psect	text11,global,reloc=2,class=CODE,delta=1,group=1
    28                           	psect	text12,global,reloc=2,class=CODE,delta=1
    29                           	psect	text13,global,reloc=2,class=CODE,delta=1
    30                           	psect	text14,global,reloc=2,class=CODE,delta=1
    31                           	psect	text15,global,reloc=2,class=CODE,delta=1
    32                           	psect	text16,global,reloc=2,class=CODE,delta=1
    33                           	psect	text17,global,reloc=2,class=CODE,delta=1,group=1
    34                           	psect	text18,global,reloc=2,class=CODE,delta=1,group=1
    35                           	psect	text19,global,reloc=2,class=CODE,delta=1,group=1
    36                           	psect	text20,global,reloc=2,class=CODE,delta=1,group=1
    37                           	psect	text21,global,reloc=2,class=CODE,delta=1
    38                           	psect	text22,global,reloc=2,class=CODE,delta=1,group=1
    39                           	psect	text23,global,reloc=2,class=CODE,delta=1,group=1
    40                           	psect	text24,global,reloc=2,class=CODE,delta=1
    41                           	psect	text25,global,reloc=2,class=CODE,delta=1
    42                           	psect	text26,global,reloc=2,class=CODE,delta=1
    43                           	psect	text27,global,reloc=2,class=CODE,delta=1
    44                           	psect	text28,global,reloc=2,class=CODE,delta=1
    45                           	psect	text29,global,reloc=2,class=CODE,delta=1
    46                           	psect	text30,global,reloc=2,class=CODE,delta=1
    47                           	psect	text31,global,reloc=2,class=CODE,delta=1
    48                           	psect	text32,global,reloc=2,class=CODE,delta=1,group=2
    49                           	psect	text33,global,reloc=2,class=CODE,delta=1,group=1
    50                           	psect	text34,global,reloc=2,class=CODE,delta=1,group=1
    51                           	psect	text35,global,reloc=2,class=CODE,delta=1,group=1
    52                           	psect	text36,global,reloc=2,class=CODE,delta=1,group=1
    53                           	psect	text37,global,reloc=2,class=CODE,delta=1
    54                           	psect	text38,global,reloc=2,class=CODE,delta=1
    55                           	psect	text39,global,reloc=2,class=CODE,delta=1
    56                           	psect	text40,global,reloc=2,class=CODE,delta=1
    57                           	psect	text41,global,reloc=2,class=CODE,delta=1
    58                           	psect	text42,global,reloc=2,class=CODE,delta=1
    59                           	psect	text43,global,reloc=2,class=CODE,delta=1
    60                           	psect	text44,global,reloc=2,class=CODE,delta=1
    61                           	psect	text45,global,reloc=2,class=CODE,delta=1
    62                           	psect	text46,global,reloc=2,class=CODE,delta=1
    63                           	psect	text47,global,reloc=2,class=CODE,delta=1
    64                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    65                           	psect	text49,global,reloc=2,class=CODE,delta=1
    66                           	psect	text50,global,reloc=2,class=CODE,delta=1
    67                           	psect	text51,global,reloc=2,class=CODE,delta=1
    68                           	psect	text52,global,reloc=2,class=CODE,delta=1
    69                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    70                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    71                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    72  0000                     
    73                           ; Version 2.00
    74                           ; Generated 27/05/2018 GMT
    75                           ; 
    76                           ; Copyright Â© 2018, Microchip Technology Inc. and its subsidiaries ("Microchip")
    77                           ; All rights reserved.
    78                           ; 
    79                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    80                           ; 
    81                           ; Redistribution and use in source and binary forms, with or without modification, are
    82                           ; permitted provided that the following conditions are met:
    83                           ; 
    84                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    85                           ;        conditions and the following disclaimer.
    86                           ; 
    87                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    88                           ;        of conditions and the following disclaimer in the documentation and/or other
    89                           ;        materials provided with the distribution.
    90                           ; 
    91                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    92                           ;        software without specific prior written permission.
    93                           ; 
    94                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    95                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    96                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    97                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    98                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    99                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   100                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   101                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   102                           ; 
   103                           ; 
   104                           ; Code-generator required, PIC18F458 Definitions
   105                           ; 
   106                           ; SFR Addresses
   107  0000                     
   108                           	psect	eeprom_data
   109  F00000  7E 04 82 00 72 01 F4 01 	db	126,4,130,0,114,1,244,1	;# 
   110  F00008  41 00 2D 00 C8 00 64 00 	db	65,0,45,0,200,0,100,0	;# 
   111  F00010  32 00 0A 05 05 0A 0A 00 	db	50,0,10,5,5,10,10,0	;# 
   112  F00018  01 01 00 01 00 00 00 00 	db	1,1,0,1,0,0,0,0	;# 
   113                           
   114                           	psect	idataBANK0
   115  0022FC                     __pidataBANK0:
   116                           	opt stack 0
   117                           
   118                           ;initializer for _err_old
   119  0022FC  FF                 	db	255
   120                           
   121                           	psect	nvCOMRAM
   122  000057                     __pnvCOMRAM:
   123                           	opt stack 0
   124  000057                     _band:
   125                           	opt stack 0
   126  000057                     	ds	1
   127  000058                     _bypass:
   128                           	opt stack 0
   129  000058                     	ds	1
   130                           
   131                           	psect	nvBANK0
   132  0000D9                     __pnvBANK0:
   133                           	opt stack 0
   134  0000D9                     _lpferrR:
   135                           	opt stack 0
   136  0000D9                     	ds	2
   137  0000DB                     _lpferrC:
   138                           	opt stack 0
   139  0000DB                     	ds	2
   140  0000DD                     _lpferrP:
   141                           	opt stack 0
   142  0000DD                     	ds	2
   143  0000DF                     _max_tFAN:
   144                           	opt stack 0
   145  0000DF                     	ds	2
   146  0000E1                     _max_temp:
   147                           	opt stack 0
   148  0000E1                     	ds	2
   149  0000E3                     _max_curr:
   150                           	opt stack 0
   151  0000E3                     	ds	2
   152  0000E5                     _max_volt:
   153                           	opt stack 0
   154  0000E5                     	ds	2
   155  0000E7                     _max_ref:
   156                           	opt stack 0
   157  0000E7                     	ds	2
   158  0000E9                     _max_pwr:
   159                           	opt stack 0
   160  0000E9                     	ds	2
   161  0000EB                     _ptt_hold:
   162                           	opt stack 0
   163  0000EB                     	ds	1
   164  0000EC                     _sensor:
   165                           	opt stack 0
   166  0000EC                     	ds	1
   167  0000ED                     _logo:
   168                           	opt stack 0
   169  0000ED                     	ds	1
   170  0000EE                     _beeper:
   171                           	opt stack 0
   172  0000EE                     	ds	1
   173  0000EF                     _hystF:
   174                           	opt stack 0
   175  0000EF                     	ds	1
   176  0000F0                     _hystT:
   177                           	opt stack 0
   178  0000F0                     	ds	1
   179  0000F1                     _aband:
   180                           	opt stack 0
   181  0000F1                     	ds	1
   182  0000F2                     _fanptt:
   183                           	opt stack 0
   184  0000F2                     	ds	1
   185  0000F3                     _biasdel:
   186                           	opt stack 0
   187  0000F3                     	ds	1
   188  0000F4                     _reldel:
   189                           	opt stack 0
   190  0000F4                     	ds	1
   191  0000                     _TMR0	set	4054
   192  0000                     _TMR1	set	4046
   193  0000                     _INTCON2bits	set	4081
   194  0000                     _WDTCON	set	4049
   195  0000                     _T3CON	set	4017
   196  0000                     _T1CON	set	4045
   197  0000                     _SPBRG	set	4015
   198  0000                     _TXSTA	set	4012
   199  0000                     _RCSTA	set	4011
   200  0000                     _LATE	set	3981
   201  0000                     _LATD	set	3980
   202  0000                     _LATC	set	3979
   203  0000                     _LATB	set	3978
   204  0000                     _LATA	set	3977
   205  0000                     _PORTE	set	3972
   206  0000                     _PORTD	set	3971
   207  0000                     _PORTC	set	3970
   208  0000                     _PORTB	set	3969
   209  0000                     _PORTA	set	3968
   210  0000                     _TRISE	set	3990
   211  0000                     _TRISD	set	3989
   212  0000                     _TRISC	set	3988
   213  0000                     _TRISB	set	3987
   214  0000                     _TRISA	set	3986
   215  0000                     _ADCON1	set	4033
   216  0000                     _CCP1CON	set	4029
   217  0000                     _CMCON	set	4020
   218  0000                     _STKPTR	set	4092
   219  0000                     _T0CON	set	4053
   220  0000                     _TMR3L	set	4018
   221  0000                     _TMR3H	set	4019
   222  0000                     _PIR2bits	set	4001
   223  0000                     _ADRESL	set	4035
   224  0000                     _ADRESH	set	4036
   225  0000                     _ADCON0bits	set	4034
   226  0000                     _ADCON0	set	4034
   227  0000                     _LATDbits	set	3980
   228  0000                     _LATBbits	set	3978
   229  0000                     _LATEbits	set	3981
   230  0000                     _LATCbits	set	3979
   231  0000                     _PORTAbits	set	3968
   232  0000                     _TMR1L	set	4046
   233  0000                     _TMR1H	set	4047
   234  0000                     _INTCONbits	set	4082
   235  0000                     _PORTCbits	set	3970
   236  0000                     _TXREG	set	4013
   237  0000                     _RCREG	set	4014
   238  0000                     _RCSTAbits	set	4011
   239  0000                     _PIE1bits	set	3997
   240  0000                     _PIR1bits	set	3998
   241  0000                     _T2CON	set	4042
   242  0000                     _TMR2	set	4044
   243  0000                     _EECON2	set	4007
   244  0000                     _INTCON	set	4082
   245  0000                     _EEDATA	set	4008
   246  0000                     _EECON1bits	set	4006
   247  0000                     _EEADR	set	4009
   248  0000                     _EECON1	set	4006
   249                           
   250                           	psect	smallconst
   251  000600                     __psmallconst:
   252                           	opt stack 0
   253  000600  00                 	db	0
   254  000601                     STR_23:
   255  000601  70                 	db	112	;'p'
   256  000602  61                 	db	97	;'a'
   257  000603  67                 	db	103	;'g'
   258  000604  65                 	db	101	;'e'
   259  000605  20                 	db	32
   260  000606  6D                 	db	109	;'m'
   261  000607  61                 	db	97	;'a'
   262  000608  69                 	db	105	;'i'
   263  000609  6E                 	db	110	;'n'
   264  00060A  00                 	db	0
   265  00060B                     STR_24:
   266  00060B  70                 	db	112	;'p'
   267  00060C  61                 	db	97	;'a'
   268  00060D  67                 	db	103	;'g'
   269  00060E  65                 	db	101	;'e'
   270  00060F  20                 	db	32
   271  000610  6C                 	db	108	;'l'
   272  000611  6F                 	db	111	;'o'
   273  000612  67                 	db	103	;'g'
   274  000613  6F                 	db	111	;'o'
   275  000614  00                 	db	0
   276  000615                     STR_25:
   277  000615  70                 	db	112	;'p'
   278  000616  61                 	db	97	;'a'
   279  000617  67                 	db	103	;'g'
   280  000618  65                 	db	101	;'e'
   281  000619  20                 	db	32
   282  00061A  70                 	db	112	;'p'
   283  00061B  61                 	db	97	;'a'
   284  00061C  73                 	db	115	;'s'
   285  00061D  73                 	db	115	;'s'
   286  00061E  00                 	db	0
   287  00061F                     STR_26:
   288  00061F  76                 	db	118	;'v'
   289  000620  65                 	db	101	;'e'
   290  000621  72                 	db	114	;'r'
   291  000622  73                 	db	115	;'s'
   292  000623  69                 	db	105	;'i'
   293  000624  6F                 	db	111	;'o'
   294  000625  6E                 	db	110	;'n'
   295  000626  00                 	db	0
   296  000627                     STR_6:
   297  000627  6D                 	db	109	;'m'
   298  000628  72                 	db	114	;'r'
   299  000629  65                 	db	101	;'e'
   300  00062A  66                 	db	102	;'f'
   301  00062B  00                 	db	0
   302  00062C                     STR_16:
   303  00062C  6D                 	db	109	;'m'
   304  00062D  74                 	db	116	;'t'
   305  00062E  66                 	db	102	;'f'
   306  00062F  68                 	db	104	;'h'
   307  000630  00                 	db	0
   308  000631                     STR_15:
   309  000631  6D                 	db	109	;'m'
   310  000632  74                 	db	116	;'t'
   311  000633  70                 	db	112	;'p'
   312  000634  68                 	db	104	;'h'
   313  000635  00                 	db	0
   314  000636                     STR_8:
   315  000636  6D                 	db	109	;'m'
   316  000637  76                 	db	118	;'v'
   317  000638  6F                 	db	111	;'o'
   318  000639  6C                 	db	108	;'l'
   319  00063A  00                 	db	0
   320  00063B                     STR_7:
   321  00063B  6D                 	db	109	;'m'
   322  00063C  63                 	db	99	;'c'
   323  00063D  75                 	db	117	;'u'
   324  00063E  72                 	db	114	;'r'
   325  00063F  00                 	db	0
   326  000640                     STR_19:
   327  000640  6D                 	db	109	;'m'
   328  000641  70                 	db	112	;'p'
   329  000642  74                 	db	116	;'t'
   330  000643  74                 	db	116	;'t'
   331  000644  00                 	db	0
   332  000645                     STR_5:
   333  000645  6D                 	db	109	;'m'
   334  000646  66                 	db	102	;'f'
   335  000647  72                 	db	114	;'r'
   336  000648  77                 	db	119	;'w'
   337  000649  00                 	db	0
   338  00064A                     STR_1:
   339  00064A  66                 	db	102	;'f'
   340  00064B  72                 	db	114	;'r'
   341  00064C  56                 	db	86	;'V'
   342  00064D  00                 	db	0
   343  00064E                     STR_2:
   344  00064E  63                 	db	99	;'c'
   345  00064F  76                 	db	118	;'v'
   346  000650  56                 	db	86	;'V'
   347  000651  00                 	db	0
   348  000652                     STR_10:
   349  000652  6D                 	db	109	;'m'
   350  000653  6C                 	db	108	;'l'
   351  000654  63                 	db	99	;'c'
   352  000655  00                 	db	0
   353  000656                     STR_18:
   354  000656  6D                 	db	109	;'m'
   355  000657  62                 	db	98	;'b'
   356  000658  64                 	db	100	;'d'
   357  000659  00                 	db	0
   358  00065A                     STR_17:
   359  00065A  6D                 	db	109	;'m'
   360  00065B  72                 	db	114	;'r'
   361  00065C  64                 	db	100	;'d'
   362  00065D  00                 	db	0
   363  00065E                     STR_12:
   364  00065E  6D                 	db	109	;'m'
   365  00065F  68                 	db	104	;'h'
   366  000660  65                 	db	101	;'e'
   367  000661  00                 	db	0
   368  000662                     STR_14:
   369  000662  6D                 	db	109	;'m'
   370  000663  74                 	db	116	;'t'
   371  000664  66                 	db	102	;'f'
   372  000665  00                 	db	0
   373  000666                     STR_22:
   374  000666  6D                 	db	109	;'m'
   375  000667  6C                 	db	108	;'l'
   376  000668  67                 	db	103	;'g'
   377  000669  00                 	db	0
   378  00066A                     STR_20:
   379  00066A  6D                 	db	109	;'m'
   380  00066B  62                 	db	98	;'b'
   381  00066C  70                 	db	112	;'p'
   382  00066D  00                 	db	0
   383  00066E                     STR_9:
   384  00066E  6D                 	db	109	;'m'
   385  00066F  6C                 	db	108	;'l'
   386  000670  70                 	db	112	;'p'
   387  000671  00                 	db	0
   388  000672                     STR_13:
   389  000672  6D                 	db	109	;'m'
   390  000673  74                 	db	116	;'t'
   391  000674  70                 	db	112	;'p'
   392  000675  00                 	db	0
   393  000676                     STR_4:
   394  000676  65                 	db	101	;'e'
   395  000677  72                 	db	114	;'r'
   396  000678  72                 	db	114	;'r'
   397  000679  00                 	db	0
   398  00067A                     STR_3:
   399  00067A  74                 	db	116	;'t'
   400  00067B  62                 	db	98	;'b'
   401  00067C  73                 	db	115	;'s'
   402  00067D  00                 	db	0
   403  00067E                     STR_21:
   404  00067E  6D                 	db	109	;'m'
   405  00067F  74                 	db	116	;'t'
   406  000680  73                 	db	115	;'s'
   407  000681  00                 	db	0
   408  000682                     STR_11:
   409  000682  6D                 	db	109	;'m'
   410  000683  72                 	db	114	;'r'
   411  000684  74                 	db	116	;'t'
   412  000685  00                 	db	0
   413                           
   414                           ; #config settings
   415  000686  00                 	db	0	; dummy byte at the end
   416  0000                     
   417                           	psect	cinit
   418  001EC4                     __pcinit:
   419                           	opt stack 0
   420  001EC4                     start_initialization:
   421                           	opt stack 0
   422  001EC4                     __initialization:
   423                           	opt stack 0
   424                           
   425                           ; Initialize objects allocated to BANK0 (1 bytes)
   426                           ; load TBLPTR registers with __pidataBANK0
   427  001EC4  0EFC               	movlw	low __pidataBANK0
   428  001EC6  6EF6               	movwf	tblptrl,c
   429  001EC8  0E22               	movlw	high __pidataBANK0
   430  001ECA  6EF7               	movwf	tblptrh,c
   431  001ECC  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   432  001ECE  6EF8               	movwf	tblptru,c
   433  001ED0  0009               	tblrd		*+	;fetch initializer
   434  001ED2  CFF5 F0FB          	movff	tablat,__pdataBANK0
   435                           
   436                           ; Clear objects allocated to BANK0 (121 bytes)
   437  001ED6  EE00  F060         	lfsr	0,__pbssBANK0
   438  001EDA  0E79               	movlw	121
   439  001EDC                     clear_0:
   440  001EDC  6AEE               	clrf	postinc0,c
   441  001EDE  06E8               	decf	wreg,f,c
   442  001EE0  E1FD               	bnz	clear_0
   443                           
   444                           ; Clear objects allocated to COMRAM (17 bytes)
   445  001EE2  EE00  F046         	lfsr	0,__pbssCOMRAM
   446  001EE6  0E11               	movlw	17
   447  001EE8                     clear_1:
   448  001EE8  6AEE               	clrf	postinc0,c
   449  001EEA  06E8               	decf	wreg,f,c
   450  001EEC  E1FD               	bnz	clear_1
   451  001EEE                     end_of_initialization:
   452                           	opt stack 0
   453  001EEE                     __end_of__initialization:
   454                           	opt stack 0
   455  001EEE  9059               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   456  001EF0  9259               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   457  001EF2  0E00               	movlw	low (__Lsmallconst shr (0+16))
   458  001EF4  6EF8               	movwf	tblptru,c
   459  001EF6  0E06               	movlw	high __Lsmallconst
   460  001EF8  6EF7               	movwf	tblptrh,c
   461  001EFA  0100               	movlb	0
   462  001EFC  EF2A  F00C         	goto	_main	;jump to C main() function
   463                           tblptru	equ	0xFF8
   464                           tblptrh	equ	0xFF7
   465                           tblptrl	equ	0xFF6
   466                           tablat	equ	0xFF5
   467                           postinc0	equ	0xFEE
   468                           wreg	equ	0xFE8
   469                           
   470                           	psect	bssCOMRAM
   471  000046                     __pbssCOMRAM:
   472                           	opt stack 0
   473  000046                     _fpeak:
   474                           	opt stack 0
   475  000046                     	ds	2
   476  000048                     _freq:
   477                           	opt stack 0
   478  000048                     	ds	2
   479  00004A                     _temp:
   480                           	opt stack 0
   481  00004A                     	ds	2
   482  00004C                     _curr:
   483                           	opt stack 0
   484  00004C                     	ds	2
   485  00004E                     _refl:
   486                           	opt stack 0
   487  00004E                     	ds	2
   488  000050                     _frwd:
   489                           	opt stack 0
   490  000050                     	ds	2
   491  000052                     _tx_len:
   492                           	opt stack 0
   493  000052                     	ds	1
   494  000053                     _rxb:
   495                           	opt stack 0
   496  000053                     	ds	1
   497  000054                     _err:
   498                           	opt stack 0
   499  000054                     	ds	1
   500  000055                     _lcd:
   501                           	opt stack 0
   502  000055                     	ds	1
   503  000056                     _ptt:
   504                           	opt stack 0
   505  000056                     	ds	1
   506                           tblptru	equ	0xFF8
   507                           tblptrh	equ	0xFF7
   508                           tblptrl	equ	0xFF6
   509                           tablat	equ	0xFF5
   510                           postinc0	equ	0xFEE
   511                           wreg	equ	0xFE8
   512                           
   513                           	psect	bssBANK0
   514  000060                     __pbssBANK0:
   515                           	opt stack 0
   516  000060                     _tmp:
   517                           	opt stack 0
   518  000060                     	ds	4
   519  000064                     ProtectCheck@beepPer:
   520                           	opt stack 0
   521  000064                     	ds	2
   522  000066                     ProtectCheck@bpt:
   523                           	opt stack 0
   524  000066                     	ds	2
   525  000068                     _cvtout:
   526                           	opt stack 0
   527  000068                     	ds	2
   528  00006A                     _frtout:
   529                           	opt stack 0
   530  00006A                     	ds	2
   531  00006C                     _elpf:
   532                           	opt stack 0
   533  00006C                     	ds	2
   534  00006E                     _voltM:
   535                           	opt stack 0
   536  00006E                     	ds	2
   537  000070                     _tempM:
   538                           	opt stack 0
   539  000070                     	ds	2
   540  000072                     _cpeak_old:
   541                           	opt stack 0
   542  000072                     	ds	2
   543  000074                     _rpeak_old:
   544                           	opt stack 0
   545  000074                     	ds	2
   546  000076                     _fpeak_old:
   547                           	opt stack 0
   548  000076                     	ds	2
   549  000078                     _cpeak:
   550                           	opt stack 0
   551  000078                     	ds	2
   552  00007A                     _rpeak:
   553                           	opt stack 0
   554  00007A                     	ds	2
   555  00007C                     _temp_old:
   556                           	opt stack 0
   557  00007C                     	ds	2
   558  00007E                     _volt_old:
   559                           	opt stack 0
   560  00007E                     	ds	2
   561  000080                     _volt_view:
   562                           	opt stack 0
   563  000080                     	ds	2
   564  000082                     _volt:
   565                           	opt stack 0
   566  000082                     	ds	2
   567  000084                     ProtectCheck@bp:
   568                           	opt stack 0
   569  000084                     	ds	1
   570  000085                     PttHoldControl@t:
   571                           	opt stack 0
   572  000085                     	ds	1
   573  000086                     _rx_end:
   574                           	opt stack 0
   575  000086                     	ds	1
   576  000087                     _txb:
   577                           	opt stack 0
   578  000087                     	ds	1
   579  000088                     _ptt_htimer:
   580                           	opt stack 0
   581  000088                     	ds	1
   582  000089                     _bstate_old:
   583                           	opt stack 0
   584  000089                     	ds	1
   585  00008A                     _bstate:
   586                           	opt stack 0
   587  00008A                     	ds	1
   588  00008B                     _band_old:
   589                           	opt stack 0
   590  00008B                     	ds	1
   591  00008C                     _med:
   592                           	opt stack 0
   593  00008C                     	ds	1
   594  00008D                     _fan:
   595                           	opt stack 0
   596  00008D                     	ds	1
   597  00008E                     _maxf:
   598                           	opt stack 0
   599  00008E                     	ds	1
   600  00008F                     _buffTX:
   601                           	opt stack 0
   602  00008F                     	ds	64
   603  0000CF                     _buffRX:
   604                           	opt stack 0
   605  0000CF                     	ds	10
   606                           tblptru	equ	0xFF8
   607                           tblptrh	equ	0xFF7
   608                           tblptrl	equ	0xFF6
   609                           tablat	equ	0xFF5
   610                           postinc0	equ	0xFEE
   611                           wreg	equ	0xFE8
   612                           
   613                           	psect	dataBANK0
   614  0000FB                     __pdataBANK0:
   615                           	opt stack 0
   616  0000FB                     _err_old:
   617                           	opt stack 0
   618  0000FB                     	ds	1
   619                           tblptru	equ	0xFF8
   620                           tblptrh	equ	0xFF7
   621                           tblptrl	equ	0xFF6
   622                           tablat	equ	0xFF5
   623                           postinc0	equ	0xFEE
   624                           wreg	equ	0xFE8
   625                           
   626                           	psect	cstackBANK0
   627  0000F5                     __pcstackBANK0:
   628                           	opt stack 0
   629  0000F5                     EEsetupRead@pW:
   630                           	opt stack 0
   631                           
   632                           ; 2 bytes @ 0x0
   633  0000F5                     	ds	2
   634  0000F7                     EEsetupRead@rW:
   635                           	opt stack 0
   636                           
   637                           ; 2 bytes @ 0x2
   638  0000F7                     	ds	2
   639  0000F9                     EEsetupRead@lW:
   640                           	opt stack 0
   641                           
   642                           ; 2 bytes @ 0x4
   643  0000F9                     	ds	2
   644                           tblptru	equ	0xFF8
   645                           tblptrh	equ	0xFF7
   646                           tblptrl	equ	0xFF6
   647                           tablat	equ	0xFF5
   648                           postinc0	equ	0xFEE
   649                           wreg	equ	0xFE8
   650                           
   651                           	psect	cstackCOMRAM
   652  000001                     __pcstackCOMRAM:
   653                           	opt stack 0
   654  000001                     ??_isr:
   655  000001                     
   656                           ; 1 bytes @ 0x0
   657  000001                     	ds	3
   658  000004                     isr@rx:
   659                           	opt stack 0
   660                           
   661                           ; 1 bytes @ 0x3
   662  000004                     	ds	1
   663  000005                     ??_DelayS:
   664  000005                     ??_DelayMs:
   665  000005                     ??_FanControl:
   666  000005                     ?_ADC:
   667                           	opt stack 0
   668  000005                     ?___lwdiv:
   669                           	opt stack 0
   670  000005                     ?___ftpack:
   671                           	opt stack 0
   672  000005                     ?___ftneg:
   673                           	opt stack 0
   674  000005                     ?___lldiv:
   675                           	opt stack 0
   676  000005                     readEEPROM@addr:
   677                           	opt stack 0
   678  000005                     writeEEPROM@data:
   679                           	opt stack 0
   680  000005                     waitAckFromLCD@ack:
   681                           	opt stack 0
   682  000005                     ___lwdiv@dividend:
   683                           	opt stack 0
   684  000005                     ___ftpack@arg:
   685                           	opt stack 0
   686  000005                     ___ftneg@f1:
   687                           	opt stack 0
   688  000005                     ConvertNumber@number:
   689                           	opt stack 0
   690  000005                     ___lldiv@dividend:
   691                           	opt stack 0
   692                           
   693                           ; 4 bytes @ 0x4
   694  000005                     	ds	1
   695  000006                     ?_readEEPROM16:
   696                           	opt stack 0
   697  000006                     writeEEPROM@address:
   698                           	opt stack 0
   699  000006                     DelayMs@ms:
   700                           	opt stack 0
   701                           
   702                           ; 1 bytes @ 0x5
   703  000006                     	ds	1
   704  000007                     ??_ADC:
   705  000007                     writeEEPROM@INTCON_SAVE:
   706                           	opt stack 0
   707  000007                     DelayS@sec:
   708                           	opt stack 0
   709  000007                     ___lwdiv@divisor:
   710                           	opt stack 0
   711                           
   712                           ; 2 bytes @ 0x6
   713  000007                     	ds	1
   714  000008                     ??_readEEPROM16:
   715  000008                     ___ftpack@exp:
   716                           	opt stack 0
   717  000008                     writeEEPROM16@addr:
   718                           	opt stack 0
   719                           
   720                           ; 2 bytes @ 0x7
   721  000008                     	ds	1
   722  000009                     ADC@ch:
   723                           	opt stack 0
   724  000009                     ConvertNumber@conv:
   725                           	opt stack 0
   726  000009                     ___ftpack@sign:
   727                           	opt stack 0
   728  000009                     ___lwdiv@quotient:
   729                           	opt stack 0
   730  000009                     ___lldiv@divisor:
   731                           	opt stack 0
   732                           
   733                           ; 4 bytes @ 0x8
   734  000009                     	ds	1
   735  00000A                     ??___ftpack:
   736  00000A                     ??_SlowControl:
   737  00000A                     writeEEPROM16@data:
   738                           	opt stack 0
   739                           
   740                           ; 1 bytes @ 0x9
   741  00000A                     	ds	1
   742  00000B                     ___lwdiv@counter:
   743                           	opt stack 0
   744  00000B                     readEEPROM16@ee:
   745                           	opt stack 0
   746                           
   747                           ; 2 bytes @ 0xA
   748  00000B                     	ds	1
   749  00000C                     CreateBuffTX@str:
   750                           	opt stack 0
   751                           
   752                           ; 1 bytes @ 0xB
   753  00000C                     	ds	1
   754  00000D                     ?___ftadd:
   755                           	opt stack 0
   756  00000D                     ?___ftmul:
   757                           	opt stack 0
   758  00000D                     ?___lltoft:
   759                           	opt stack 0
   760  00000D                     ?___lwtoft:
   761                           	opt stack 0
   762  00000D                     readEEPROM16@addr:
   763                           	opt stack 0
   764  00000D                     ___lwtoft@c:
   765                           	opt stack 0
   766  00000D                     ___ftadd@f1:
   767                           	opt stack 0
   768  00000D                     ___ftmul@f1:
   769                           	opt stack 0
   770  00000D                     CreateBuffTX@data:
   771                           	opt stack 0
   772  00000D                     ___lldiv@quotient:
   773                           	opt stack 0
   774  00000D                     ___lltoft@c:
   775                           	opt stack 0
   776                           
   777                           ; 4 bytes @ 0xC
   778  00000D                     	ds	3
   779  000010                     ?_fabs:
   780                           	opt stack 0
   781  000010                     ___ftadd@f2:
   782                           	opt stack 0
   783  000010                     ___ftmul@f2:
   784                           	opt stack 0
   785  000010                     fabs@d:
   786                           	opt stack 0
   787                           
   788                           ; 3 bytes @ 0xF
   789  000010                     	ds	1
   790  000011                     ??_CreateBuffTX:
   791  000011                     ??___lltoft:
   792  000011                     ___lldiv@counter:
   793                           	opt stack 0
   794                           
   795                           ; 1 bytes @ 0x10
   796  000011                     	ds	1
   797  000012                     ??_SendStatusToLCD:
   798  000012                     LCDpageSelect@tt:
   799                           	opt stack 0
   800  000012                     LCDversionSend@rep:
   801                           	opt stack 0
   802                           
   803                           ; 1 bytes @ 0x11
   804  000012                     	ds	1
   805  000013                     ??___ftadd:
   806  000013                     ??___ftmul:
   807  000013                     LCDpageSelect@page:
   808                           	opt stack 0
   809  000013                     ___ftge@ff1:
   810                           	opt stack 0
   811                           
   812                           ; 3 bytes @ 0x12
   813  000013                     	ds	1
   814  000014                     ??_SetupMode:
   815                           
   816                           ; 1 bytes @ 0x13
   817  000014                     	ds	1
   818  000015                     ___lltoft@exp:
   819                           	opt stack 0
   820                           
   821                           ; 1 bytes @ 0x14
   822  000015                     	ds	1
   823  000016                     ___ftadd@sign:
   824                           	opt stack 0
   825  000016                     ___ftmul@exp:
   826                           	opt stack 0
   827  000016                     ___ftge@ff2:
   828                           	opt stack 0
   829                           
   830                           ; 3 bytes @ 0x15
   831  000016                     	ds	1
   832  000017                     ___ftadd@exp2:
   833                           	opt stack 0
   834  000017                     ___ftmul@sign:
   835                           	opt stack 0
   836                           
   837                           ; 1 bytes @ 0x16
   838  000017                     	ds	1
   839  000018                     ___ftadd@exp1:
   840                           	opt stack 0
   841  000018                     ___ftmul@f3_as_product:
   842                           	opt stack 0
   843                           
   844                           ; 3 bytes @ 0x17
   845  000018                     	ds	1
   846  000019                     ??___ftge:
   847  000019                     ?___ftsub:
   848                           	opt stack 0
   849  000019                     ___ftsub@f1:
   850                           	opt stack 0
   851                           
   852                           ; 3 bytes @ 0x18
   853  000019                     	ds	3
   854  00001C                     FreqMeasure@jj:
   855                           	opt stack 0
   856  00001C                     ___ftsub@f2:
   857                           	opt stack 0
   858                           
   859                           ; 3 bytes @ 0x1B
   860  00001C                     	ds	1
   861  00001D                     FreqMeasure@err:
   862                           	opt stack 0
   863                           
   864                           ; 1 bytes @ 0x1C
   865  00001D                     	ds	1
   866  00001E                     FreqMeasure@tmr:
   867                           	opt stack 0
   868  00001E                     SetupMode@pW:
   869                           	opt stack 0
   870                           
   871                           ; 2 bytes @ 0x1D
   872  00001E                     	ds	1
   873  00001F                     ?_sqrt:
   874                           	opt stack 0
   875  00001F                     sqrt@a:
   876                           	opt stack 0
   877                           
   878                           ; 3 bytes @ 0x1E
   879  00001F                     	ds	1
   880  000020                     SetupMode@rW:
   881                           	opt stack 0
   882                           
   883                           ; 2 bytes @ 0x1F
   884  000020                     	ds	2
   885  000022                     ??_sqrt:
   886  000022                     SetupMode@lW:
   887                           	opt stack 0
   888                           
   889                           ; 2 bytes @ 0x21
   890  000022                     	ds	2
   891  000024                     SetupMode@eadr:
   892                           	opt stack 0
   893                           
   894                           ; 1 bytes @ 0x23
   895  000024                     	ds	1
   896  000025                     sqrt@z:
   897                           	opt stack 0
   898                           
   899                           ; 3 bytes @ 0x24
   900  000025                     	ds	3
   901  000028                     sqrt@i:
   902                           	opt stack 0
   903                           
   904                           ; 1 bytes @ 0x27
   905  000028                     	ds	1
   906  000029                     sqrt@q:
   907                           	opt stack 0
   908                           
   909                           ; 3 bytes @ 0x28
   910  000029                     	ds	3
   911  00002C                     sqrt@x:
   912                           	opt stack 0
   913                           
   914                           ; 3 bytes @ 0x2B
   915  00002C                     	ds	3
   916  00002F                     ?___fttol:
   917                           	opt stack 0
   918  00002F                     ___fttol@f1:
   919                           	opt stack 0
   920                           
   921                           ; 3 bytes @ 0x2E
   922  00002F                     	ds	4
   923  000033                     ??___fttol:
   924                           
   925                           ; 1 bytes @ 0x32
   926  000033                     	ds	5
   927  000038                     ___fttol@sign1:
   928                           	opt stack 0
   929                           
   930                           ; 1 bytes @ 0x37
   931  000038                     	ds	1
   932  000039                     ___fttol@lval:
   933                           	opt stack 0
   934                           
   935                           ; 4 bytes @ 0x38
   936  000039                     	ds	4
   937  00003D                     ___fttol@exp1:
   938                           	opt stack 0
   939                           
   940                           ; 1 bytes @ 0x3C
   941  00003D                     	ds	1
   942  00003E                     ??_EEsetupRead:
   943                           
   944                           ; 1 bytes @ 0x3D
   945  00003E                     	ds	8
   946  000046                     tblptru	equ	0xFF8
   947                           tblptrh	equ	0xFF7
   948                           tblptrl	equ	0xFF6
   949                           tablat	equ	0xFF5
   950                           postinc0	equ	0xFEE
   951                           wreg	equ	0xFE8
   952                           
   953                           ; 1 bytes @ 0x45
   954 ;;
   955 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   956 ;;
   957 ;; *************** function _main *****************
   958 ;; Defined at:
   959 ;;		line 71 in file "../main.c"
   960 ;; Parameters:    Size  Location     Type
   961 ;;		None
   962 ;; Auto vars:     Size  Location     Type
   963 ;;		None
   964 ;; Return value:  Size  Location     Type
   965 ;;                  1    wreg      void 
   966 ;; Registers used:
   967 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   968 ;; Tracked objects:
   969 ;;		On entry : 0/0
   970 ;;		On exit  : 3F/0
   971 ;;		Unchanged: 0/0
   972 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   973 ;;      Params:         0       0       0       0       0       0       0
   974 ;;      Locals:         0       0       0       0       0       0       0
   975 ;;      Temps:          0       0       0       0       0       0       0
   976 ;;      Totals:         0       0       0       0       0       0       0
   977 ;;Total ram usage:        0 bytes
   978 ;; Hardware stack levels required when called:    9
   979 ;; This function calls:
   980 ;;		_ADCmeasure
   981 ;;		_Beep
   982 ;;		_DelayS
   983 ;;		_EEmbandRead
   984 ;;		_EEsetupRead
   985 ;;		_LCDpageSelect
   986 ;;		_LCDversionSend
   987 ;;		_ProtectCheck
   988 ;;		_ReadStatusFromLCD
   989 ;;		_SendStatusToLCD
   990 ;;		_SetBand
   991 ;;		_SlowControl
   992 ;; This function is called by:
   993 ;;		Startup code after reset
   994 ;; This function uses a non-reentrant model
   995 ;;
   996                           
   997                           	psect	text0
   998  001854                     __ptext0:
   999                           	opt stack 0
  1000  001854                     _main:
  1001                           	opt stack 0
  1002  001854  FFFF               	dw	65535	; assembler added errata NOP
  1003                           
  1004                           ;main.c: 73: (INTCONbits.GIE = 0);
  1005                           
  1006                           ;incstack = 0
  1007  001856  9EF2               	bcf	intcon,7,c	;volatile
  1008                           
  1009                           ;main.c: 74: STKPTR = 0x00;
  1010  001858  6AFC               	clrf	stkptr,c	;volatile
  1011                           
  1012                           ;main.c: 76: CMCON = 0x07;
  1013  00185A  0E07               	movlw	7
  1014  00185C  6EB4               	movwf	4020,c	;volatile
  1015                           
  1016                           ;main.c: 77: CCP1CON = 0x00;
  1017  00185E  6ABD               	clrf	4029,c	;volatile
  1018                           
  1019                           ;main.c: 79: ADCON0 = 0b10000000;
  1020  001860  0E80               	movlw	128
  1021  001862  6EC2               	movwf	4034,c	;volatile
  1022                           
  1023                           ;main.c: 80: ADCON1 = 0b11001001;
  1024  001864  0EC9               	movlw	201
  1025  001866  6EC1               	movwf	4033,c	;volatile
  1026                           
  1027                           ;main.c: 82: TRISA = 0b00111111;
  1028  001868  0E3F               	movlw	63
  1029  00186A  6E92               	movwf	3986,c	;volatile
  1030                           
  1031                           ;main.c: 83: TRISB = 0b11000000;
  1032  00186C  0EC0               	movlw	192
  1033  00186E  6E93               	movwf	3987,c	;volatile
  1034                           
  1035                           ;main.c: 84: TRISC = 0b10000001;
  1036  001870  0E81               	movlw	129
  1037  001872  6E94               	movwf	3988,c	;volatile
  1038                           
  1039                           ;main.c: 85: TRISD = 0b00000000;
  1040  001874  6A95               	clrf	3989,c	;volatile
  1041                           
  1042                           ;main.c: 86: TRISE = 0b00000001;
  1043  001876  0E01               	movlw	1
  1044  001878  6E96               	movwf	3990,c	;volatile
  1045                           
  1046                           ;main.c: 88: PORTA = 0x00; PORTB = 0x00; PORTC = 0x00; PORTD = 0x00; PORTE = 0x00;
  1047  00187A  6A80               	clrf	3968,c	;volatile
  1048  00187C  6A81               	clrf	3969,c	;volatile
  1049  00187E  6A82               	clrf	3970,c	;volatile
  1050  001880  6A83               	clrf	3971,c	;volatile
  1051  001882  6A84               	clrf	3972,c	;volatile
  1052                           
  1053                           ;main.c: 89: LATA = 0x00; LATB = 0x00; LATC = 0x00; LATD = 0x00; LATE = 0x00;
  1054  001884  6A89               	clrf	3977,c	;volatile
  1055  001886  6A8A               	clrf	3978,c	;volatile
  1056  001888  6A8B               	clrf	3979,c	;volatile
  1057  00188A  6A8C               	clrf	3980,c	;volatile
  1058  00188C  6A8D               	clrf	3981,c	;volatile
  1059                           
  1060                           ;main.c: 91: RCSTA = 0b10010000;
  1061  00188E  0E90               	movlw	144
  1062  001890  6EAB               	movwf	4011,c	;volatile
  1063                           
  1064                           ;main.c: 92: TXSTA = 0b00100100;
  1065  001892  0E24               	movlw	36
  1066  001894  6EAC               	movwf	4012,c	;volatile
  1067                           
  1068                           ;main.c: 93: SPBRG = 21;
  1069  001896  0E15               	movlw	21
  1070  001898  6EAF               	movwf	4015,c	;volatile
  1071                           
  1072                           ;main.c: 95: T0CON = 0b10000000;
  1073  00189A  0E80               	movlw	128
  1074  00189C  6ED5               	movwf	4053,c	;volatile
  1075                           
  1076                           ;main.c: 97: T1CON = 0b10000111;
  1077  00189E  0E87               	movlw	135
  1078  0018A0  6ECD               	movwf	4045,c	;volatile
  1079                           
  1080                           ;main.c: 99: T3CON = 0b10110001;
  1081  0018A2  0EB1               	movlw	177
  1082  0018A4  6EB1               	movwf	4017,c	;volatile
  1083                           
  1084                           ;main.c: 101: WDTCON = 0x1;
  1085  0018A6  0E01               	movlw	1
  1086  0018A8  6ED1               	movwf	4049,c	;volatile
  1087                           
  1088                           ;main.c: 103: INTCON2bits.RBPU = 1;
  1089  0018AA  8EF1               	bsf	intcon2,7,c	;volatile
  1090                           
  1091                           ;main.c: 105: PIE1bits.RCIE = 1;
  1092  0018AC  8A9D               	bsf	3997,5,c	;volatile
  1093                           
  1094                           ;main.c: 106: INTCONbits.PEIE = 1;
  1095  0018AE  8CF2               	bsf	intcon,6,c	;volatile
  1096                           
  1097                           ;main.c: 107: INTCONbits.GIE = 1;
  1098  0018B0  8EF2               	bsf	intcon,7,c	;volatile
  1099                           
  1100                           ;main.c: 109: EEsetupRead();
  1101  0018B2  EC37  F005         	call	_EEsetupRead	;wreg free
  1102                           
  1103                           ; BSR set to: 0
  1104                           ;main.c: 110: EEmbandRead();
  1105  0018B6  ECCE  F010         	call	_EEmbandRead	;wreg free
  1106                           
  1107                           ;main.c: 112: if (logo)
  1108  0018BA  0100               	movlb	0	; () banked
  1109  0018BC  51ED               	movf	_logo& (0+255),w,b	;volatile
  1110  0018BE  E00A               	bz	l4508
  1111                           
  1112                           ; BSR set to: 0
  1113                           ;main.c: 113: {;main.c: 114: if (!LCDpageSelect(0xA1)) {asm("reset");}
  1114  0018C0  0EA1               	movlw	161
  1115  0018C2  EC4B  F00E         	call	_LCDpageSelect
  1116  0018C6  0900               	iorlw	0
  1117  0018C8  E101               	bnz	l4506
  1118  0018CA  00FF               	reset		;# 
  1119  0018CC                     l4506:
  1120                           
  1121                           ;main.c: 115: DelayS(3);
  1122  0018CC  0E03               	movlw	3
  1123  0018CE  ECF2  F00F         	call	_DelayS
  1124                           
  1125                           ;main.c: 116: }
  1126  0018D2  D003               	goto	l4510
  1127  0018D4                     l4508:
  1128                           
  1129                           ; BSR set to: 0
  1130                           ;main.c: 117: else DelayS(1);
  1131  0018D4  0E01               	movlw	1
  1132  0018D6  ECF2  F00F         	call	_DelayS
  1133  0018DA                     l4510:
  1134  0018DA  FFFF               	dw	65535	; assembler added errata NOP
  1135                           
  1136                           ;main.c: 119: if (!LCDpageSelect(0xA0)) {asm("reset");}
  1137  0018DC  0EA0               	movlw	160
  1138  0018DE  EC4B  F00E         	call	_LCDpageSelect
  1139  0018E2  0900               	iorlw	0
  1140  0018E4  E101               	bnz	l4514
  1141  0018E6  00FF               	reset		;# 
  1142  0018E8                     l4514:
  1143                           
  1144                           ;main.c: 121: LCDversionSend();
  1145  0018E8  EC69  F010         	call	_LCDversionSend	;wreg free
  1146                           
  1147                           ;main.c: 123: SetBand();
  1148  0018EC  EC80  F00F         	call	_SetBand	;wreg free
  1149                           
  1150                           ;main.c: 124: Beep();
  1151  0018F0  EC14  F011         	call	_Beep	;wreg free
  1152  0018F4                     l4520:
  1153  0018F4  FFFF               	dw	65535	; assembler added errata NOP
  1154                           
  1155                           ;main.c: 127: {;main.c: 128: ADCmeasure();
  1156  0018F6  ECDF  F00C         	call	_ADCmeasure	;wreg free
  1157                           
  1158                           ; BSR set to: 0
  1159                           ;main.c: 129: ProtectCheck();
  1160  0018FA  EC1D  F00A         	call	_ProtectCheck	;wreg free
  1161                           
  1162                           ; BSR set to: 0
  1163                           ;main.c: 131: SlowControl();
  1164  0018FE  ECFD  F00A         	call	_SlowControl	;wreg free
  1165                           
  1166                           ; BSR set to: 0
  1167                           ;main.c: 133: SendStatusToLCD();
  1168  001902  ECD6  F006         	call	_SendStatusToLCD	;wreg free
  1169                           
  1170                           ; BSR set to: 0
  1171                           ;main.c: 134: ReadStatusFromLCD();
  1172  001906  ECCB  F00B         	call	_ReadStatusFromLCD	;wreg free
  1173  00190A  D7F4               	goto	l4520
  1174  00190C                     __end_of_main:
  1175                           	opt stack 0
  1176                           stkptr	equ	0xFFC
  1177                           tblptru	equ	0xFF8
  1178                           tblptrh	equ	0xFF7
  1179                           tblptrl	equ	0xFF6
  1180                           tablat	equ	0xFF5
  1181                           intcon	equ	0xFF2
  1182                           intcon2	equ	0xFF1
  1183                           postinc0	equ	0xFEE
  1184                           wreg	equ	0xFE8
  1185                           
  1186 ;; *************** function _SlowControl *****************
  1187 ;; Defined at:
  1188 ;;		line 32 in file "../adc.h"
  1189 ;; Parameters:    Size  Location     Type
  1190 ;;		None
  1191 ;; Auto vars:     Size  Location     Type
  1192 ;;		None
  1193 ;; Return value:  Size  Location     Type
  1194 ;;                  1    wreg      void 
  1195 ;; Registers used:
  1196 ;;		wreg, status,2, status,0, cstack
  1197 ;; Tracked objects:
  1198 ;;		On entry : 3F/0
  1199 ;;		On exit  : 3F/0
  1200 ;;		Unchanged: 0/0
  1201 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1202 ;;      Params:         0       0       0       0       0       0       0
  1203 ;;      Locals:         0       0       0       0       0       0       0
  1204 ;;      Temps:          6       0       0       0       0       0       0
  1205 ;;      Totals:         6       0       0       0       0       0       0
  1206 ;;Total ram usage:        6 bytes
  1207 ;; Hardware stack levels used:    1
  1208 ;; Hardware stack levels required when called:    4
  1209 ;; This function calls:
  1210 ;;		_ADC
  1211 ;;		_FanControl
  1212 ;;		_PttHoldControl
  1213 ;; This function is called by:
  1214 ;;		_main
  1215 ;; This function uses a non-reentrant model
  1216 ;;
  1217                           
  1218                           	psect	text1
  1219  0015FA                     __ptext1:
  1220                           	opt stack 0
  1221  0015FA                     _SlowControl:
  1222                           	opt stack 0
  1223  0015FA  FFFF               	dw	65535	; assembler added errata NOP
  1224                           
  1225                           ; BSR set to: 0
  1226                           ;adc.h: 34: if (!PIR2bits.TMR3IF) return;
  1227                           
  1228                           ; BSR set to: 0
  1229                           ;incstack = 0
  1230  0015FC  A2A1               	btfss	4001,1,c	;volatile
  1231  0015FE  D062               	goto	l439
  1232                           
  1233                           ; BSR set to: 0
  1234                           ;adc.h: 35: ((void)(TMR3H=((0x0BFF)>>8),TMR3L=((0x0BFF)&0xFF)));
  1235  001600  0E0B               	movlw	11
  1236  001602  6EB3               	movwf	4019,c	;volatile
  1237                           
  1238                           ; BSR set to: 0
  1239  001604  68B2               	setf	4018,c	;volatile
  1240                           
  1241                           ; BSR set to: 0
  1242                           ;adc.h: 36: PIR2bits.TMR3IF = 0;
  1243  001606  92A1               	bcf	4001,1,c	;volatile
  1244                           
  1245                           ; BSR set to: 0
  1246                           ;adc.h: 38: PttHoldControl();
  1247  001608  EC0D  F010         	call	_PttHoldControl	;wreg free
  1248                           
  1249                           ; BSR set to: 0
  1250                           ;adc.h: 39: FanControl();
  1251  00160C  EC0D  F00E         	call	_FanControl	;wreg free
  1252                           
  1253                           ; BSR set to: 0
  1254                           ;adc.h: 41: voltM += volt;
  1255  001610  5182               	movf	_volt& (0+255),w,b	;volatile
  1256  001612  276E               	addwf	_voltM& (0+255),f,b	;volatile
  1257  001614  5183               	movf	(_volt+1)& (0+255),w,b	;volatile
  1258  001616  236F               	addwfc	(_voltM+1)& (0+255),f,b	;volatile
  1259                           
  1260                           ; BSR set to: 0
  1261                           ;adc.h: 42: tempM += ADC(3);
  1262  001618  0E03               	movlw	3
  1263  00161A  EC25  F010         	call	_ADC
  1264  00161E  5005               	movf	?_ADC,w,c
  1265  001620  0100               	movlb	0	; () banked
  1266  001622  2770               	addwf	_tempM& (0+255),f,b	;volatile
  1267  001624  5006               	movf	?_ADC+1,w,c
  1268  001626  2371               	addwfc	(_tempM+1)& (0+255),f,b	;volatile
  1269                           
  1270                           ; BSR set to: 0
  1271                           ;adc.h: 44: if (++med & 0x10)
  1272  001628  2B8C               	incf	_med& (0+255),f,b	;volatile
  1273  00162A  A98C               	btfss	_med& (0+255),4,b	;volatile
  1274  00162C  D04B               	goto	l439
  1275                           
  1276                           ; BSR set to: 0
  1277                           ;adc.h: 45: {;adc.h: 47: temp = tempM >> 4;
  1278  00162E  C070  F00A         	movff	_tempM,??_SlowControl	;volatile
  1279  001632  C071  F00B         	movff	_tempM+1,??_SlowControl+1	;volatile
  1280  001636  0E04               	movlw	4
  1281  001638  6E0C               	movwf	(??_SlowControl+2)& (0+255),c
  1282  00163A                     u3665:
  1283  00163A  FFFF               	dw	65535	; assembler added errata NOP
  1284  00163C  90D8               	bcf	status,0,c
  1285  00163E  320B               	rrcf	??_SlowControl+1,f,c
  1286  001640  320A               	rrcf	??_SlowControl,f,c
  1287  001642  2E0C               	decfsz	(??_SlowControl+2)& (0+255),f,c
  1288  001644  D7FA               	goto	u3665
  1289  001646  C00A  F04A         	movff	??_SlowControl,_temp	;volatile
  1290  00164A  C00B  F04B         	movff	??_SlowControl+1,_temp+1	;volatile
  1291                           
  1292                           ;adc.h: 48: if (temp >= (560 - sensor)) temp = (temp - (560 - sensor)) >> 1;
  1293  00164E  0E30               	movlw	48
  1294  001650  6E0A               	movwf	??_SlowControl& (0+255),c
  1295  001652  0E02               	movlw	2
  1296  001654  6E0B               	movwf	(??_SlowControl+1)& (0+255),c
  1297  001656  51EC               	movf	_sensor& (0+255),w,b	;volatile
  1298  001658  5E0A               	subwf	??_SlowControl,f,c
  1299  00165A  0E00               	movlw	0
  1300  00165C  5A0B               	subwfb	??_SlowControl+1,f,c
  1301  00165E  500A               	movf	??_SlowControl,w,c
  1302  001660  5C4A               	subwf	_temp,w,c	;volatile
  1303  001662  500B               	movf	??_SlowControl+1,w,c
  1304  001664  584B               	subwfb	_temp+1,w,c	;volatile
  1305  001666  E316               	bnc	l441
  1306                           
  1307                           ; BSR set to: 0
  1308  001668  0ED0               	movlw	208
  1309  00166A  6E0A               	movwf	??_SlowControl& (0+255),c
  1310  00166C  0EFD               	movlw	253
  1311  00166E  6E0B               	movwf	(??_SlowControl+1)& (0+255),c
  1312  001670  51EC               	movf	_sensor& (0+255),w,b	;volatile
  1313  001672  244A               	addwf	_temp,w,c	;volatile
  1314  001674  6E0C               	movwf	(??_SlowControl+2)& (0+255),c
  1315  001676  0E00               	movlw	0
  1316  001678  204B               	addwfc	_temp+1,w,c	;volatile
  1317  00167A  6E0D               	movwf	(??_SlowControl+3)& (0+255),c
  1318  00167C  500A               	movf	??_SlowControl,w,c
  1319  00167E  260C               	addwf	??_SlowControl+2,f,c
  1320  001680  500B               	movf	??_SlowControl+1,w,c
  1321  001682  220D               	addwfc	??_SlowControl+3,f,c
  1322  001684  90D8               	bcf	status,0,c
  1323  001686  300D               	rrcf	??_SlowControl+3,w,c
  1324  001688  6E0E               	movwf	(??_SlowControl+4)& (0+255),c
  1325  00168A  300C               	rrcf	??_SlowControl+2,w,c
  1326  00168C  6E4A               	movwf	_temp,c	;volatile
  1327  00168E  C00E  F04B         	movff	??_SlowControl+4,_temp+1	;volatile
  1328  001692  D002               	goto	l3632
  1329  001694                     l441:
  1330                           
  1331                           ; BSR set to: 0
  1332                           ;adc.h: 49: else temp = 0;
  1333  001694  6A4A               	clrf	_temp,c	;volatile
  1334  001696  6A4B               	clrf	_temp+1,c	;volatile
  1335  001698                     l3632:
  1336  001698  FFFF               	dw	65535	; assembler added errata NOP
  1337                           
  1338                           ; BSR set to: 0
  1339                           ;adc.h: 51: volt_view = voltM >> 4;
  1340  00169A  C06E  F00A         	movff	_voltM,??_SlowControl	;volatile
  1341  00169E  C06F  F00B         	movff	_voltM+1,??_SlowControl+1	;volatile
  1342  0016A2  0E04               	movlw	4
  1343  0016A4  6E0C               	movwf	(??_SlowControl+2)& (0+255),c
  1344  0016A6                     u3685:
  1345  0016A6  FFFF               	dw	65535	; assembler added errata NOP
  1346  0016A8  90D8               	bcf	status,0,c
  1347  0016AA  320B               	rrcf	??_SlowControl+1,f,c
  1348  0016AC  320A               	rrcf	??_SlowControl,f,c
  1349  0016AE  2E0C               	decfsz	(??_SlowControl+2)& (0+255),f,c
  1350  0016B0  D7FA               	goto	u3685
  1351  0016B2  C00A  F080         	movff	??_SlowControl,_volt_view	;volatile
  1352  0016B6  C00B  F081         	movff	??_SlowControl+1,_volt_view+1	;volatile
  1353                           
  1354                           ; BSR set to: 0
  1355                           ;adc.h: 53: med = 0; tempM = 0; voltM = 0;
  1356  0016BA  6B8C               	clrf	_med& (0+255),b	;volatile
  1357                           
  1358                           ; BSR set to: 0
  1359  0016BC  6B70               	clrf	_tempM& (0+255),b	;volatile
  1360  0016BE  6B71               	clrf	(_tempM+1)& (0+255),b	;volatile
  1361                           
  1362                           ; BSR set to: 0
  1363  0016C0  6B6E               	clrf	_voltM& (0+255),b	;volatile
  1364  0016C2  6B6F               	clrf	(_voltM+1)& (0+255),b	;volatile
  1365  0016C4                     l439:
  1366  0016C4  FFFF               	dw	65535	; assembler added errata NOP
  1367                           
  1368                           ; BSR set to: 0
  1369  0016C6  0012               	return		;funcret
  1370  0016C8  FFFF               	dw	65535	; errata NOP
  1371  0016CA                     __end_of_SlowControl:
  1372                           	opt stack 0
  1373                           stkptr	equ	0xFFC
  1374                           tblptru	equ	0xFF8
  1375                           tblptrh	equ	0xFF7
  1376                           tblptrl	equ	0xFF6
  1377                           tablat	equ	0xFF5
  1378                           intcon	equ	0xFF2
  1379                           intcon2	equ	0xFF1
  1380                           postinc0	equ	0xFEE
  1381                           wreg	equ	0xFE8
  1382                           status	equ	0xFD8
  1383                           
  1384 ;; *************** function _PttHoldControl *****************
  1385 ;; Defined at:
  1386 ;;		line 179 in file "../digital.h"
  1387 ;; Parameters:    Size  Location     Type
  1388 ;;		None
  1389 ;; Auto vars:     Size  Location     Type
  1390 ;;		None
  1391 ;; Return value:  Size  Location     Type
  1392 ;;                  1    wreg      void 
  1393 ;; Registers used:
  1394 ;;		wreg, status,2, status,0
  1395 ;; Tracked objects:
  1396 ;;		On entry : 3F/0
  1397 ;;		On exit  : 3F/0
  1398 ;;		Unchanged: 0/0
  1399 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1400 ;;      Params:         0       0       0       0       0       0       0
  1401 ;;      Locals:         0       0       0       0       0       0       0
  1402 ;;      Temps:          0       0       0       0       0       0       0
  1403 ;;      Totals:         0       0       0       0       0       0       0
  1404 ;;Total ram usage:        0 bytes
  1405 ;; Hardware stack levels used:    1
  1406 ;; Hardware stack levels required when called:    3
  1407 ;; This function calls:
  1408 ;;		Nothing
  1409 ;; This function is called by:
  1410 ;;		_SlowControl
  1411 ;; This function uses a non-reentrant model
  1412 ;;
  1413                           
  1414                           	psect	text2
  1415  00201A                     __ptext2:
  1416                           	opt stack 0
  1417  00201A                     _PttHoldControl:
  1418                           	opt stack 0
  1419  00201A  FFFF               	dw	65535	; assembler added errata NOP
  1420                           
  1421                           ; BSR set to: 0
  1422                           ;digital.h: 181: static unsigned char t = 0;;digital.h: 183: if (ptt_hold == 0) return;
  1423                           
  1424                           ; BSR set to: 0
  1425                           ;incstack = 0
  1426  00201C  51EB               	movf	_ptt_hold& (0+255),w,b	;volatile
  1427  00201E  E012               	bz	l387
  1428                           
  1429                           ; BSR set to: 0
  1430                           ;digital.h: 184: if ((ptt == 0) || (fpeak < 520))
  1431  002020  5056               	movf	_ptt,w,c	;volatile
  1432  002022  E005               	bz	u3270
  1433                           
  1434                           ; BSR set to: 0
  1435  002024  0E08               	movlw	8
  1436  002026  5C46               	subwf	_fpeak,w,c	;volatile
  1437  002028  0E02               	movlw	2
  1438  00202A  5847               	subwfb	_fpeak+1,w,c	;volatile
  1439  00202C  E203               	bc	l3356
  1440  00202E                     u3270:
  1441                           
  1442                           ; BSR set to: 0
  1443                           ;digital.h: 185: {;digital.h: 186: ptt_htimer = 0; t = 0;
  1444  00202E  6B88               	clrf	_ptt_htimer& (0+255),b	;volatile
  1445  002030  6B85               	clrf	PttHoldControl@t& (0+255),b
  1446                           
  1447                           ;digital.h: 187: return;
  1448  002032  D008               	goto	l387
  1449  002034                     l3356:
  1450                           
  1451                           ; BSR set to: 0
  1452                           ;digital.h: 188: };digital.h: 190: if (++t < 20) return;
  1453  002034  2B85               	incf	PttHoldControl@t& (0+255),f,b
  1454  002036  0E14               	movlw	20
  1455  002038  6185               	cpfslt	PttHoldControl@t& (0+255),b
  1456  00203A  D001               	goto	l391
  1457  00203C  D003               	goto	l387
  1458  00203E                     l391:
  1459  00203E  FFFF               	dw	65535	; assembler added errata NOP
  1460                           
  1461                           ; BSR set to: 0
  1462                           ;digital.h: 191: t = 0;
  1463  002040  6B85               	clrf	PttHoldControl@t& (0+255),b
  1464                           
  1465                           ; BSR set to: 0
  1466                           ;digital.h: 192: ptt_htimer++;
  1467  002042  2B88               	incf	_ptt_htimer& (0+255),f,b	;volatile
  1468  002044                     l387:
  1469  002044  FFFF               	dw	65535	; assembler added errata NOP
  1470                           
  1471                           ; BSR set to: 0
  1472  002046  0012               	return		;funcret
  1473  002048  FFFF               	dw	65535	; errata NOP
  1474  00204A                     __end_of_PttHoldControl:
  1475                           	opt stack 0
  1476                           stkptr	equ	0xFFC
  1477                           tblptru	equ	0xFF8
  1478                           tblptrh	equ	0xFF7
  1479                           tblptrl	equ	0xFF6
  1480                           tablat	equ	0xFF5
  1481                           intcon	equ	0xFF2
  1482                           intcon2	equ	0xFF1
  1483                           postinc0	equ	0xFEE
  1484                           wreg	equ	0xFE8
  1485                           status	equ	0xFD8
  1486                           
  1487 ;; *************** function _FanControl *****************
  1488 ;; Defined at:
  1489 ;;		line 145 in file "../digital.h"
  1490 ;; Parameters:    Size  Location     Type
  1491 ;;		None
  1492 ;; Auto vars:     Size  Location     Type
  1493 ;;		None
  1494 ;; Return value:  Size  Location     Type
  1495 ;;                  1    wreg      void 
  1496 ;; Registers used:
  1497 ;;		wreg, status,2, status,0
  1498 ;; Tracked objects:
  1499 ;;		On entry : 3F/0
  1500 ;;		On exit  : 3F/0
  1501 ;;		Unchanged: 0/0
  1502 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1503 ;;      Params:         0       0       0       0       0       0       0
  1504 ;;      Locals:         0       0       0       0       0       0       0
  1505 ;;      Temps:          2       0       0       0       0       0       0
  1506 ;;      Totals:         2       0       0       0       0       0       0
  1507 ;;Total ram usage:        2 bytes
  1508 ;; Hardware stack levels used:    1
  1509 ;; Hardware stack levels required when called:    3
  1510 ;; This function calls:
  1511 ;;		Nothing
  1512 ;; This function is called by:
  1513 ;;		_SlowControl
  1514 ;; This function uses a non-reentrant model
  1515 ;;
  1516                           
  1517                           	psect	text3
  1518  001C1A                     __ptext3:
  1519                           	opt stack 0
  1520  001C1A                     _FanControl:
  1521                           	opt stack 0
  1522  001C1A  FFFF               	dw	65535	; assembler added errata NOP
  1523                           
  1524                           ; BSR set to: 0
  1525                           
  1526                           ; BSR set to: 0
  1527                           ;incstack = 0
  1528  001C1C  0004               	clrwdt		;# 
  1529                           
  1530                           ;digital.h: 149: if (err & 0x20)
  1531  001C1E  AA54               	btfss	_err,5,c	;volatile
  1532  001C20  D011               	goto	l3324
  1533                           
  1534                           ;digital.h: 150: {;digital.h: 151: LATCbits.LC1 = 1; fan = 1;
  1535  001C22  828B               	bsf	3979,1,c	;volatile
  1536  001C24  0E01               	movlw	1
  1537  001C26  0100               	movlb	0	; () banked
  1538  001C28  6F8D               	movwf	_fan& (0+255),b	;volatile
  1539                           
  1540                           ; BSR set to: 0
  1541                           ;digital.h: 152: if (temp <= (max_temp - hystT)) err &=~ 0x20;
  1542  001C2A  51F0               	movf	_hystT& (0+255),w,b	;volatile
  1543  001C2C  5DE1               	subwf	_max_temp& (0+255),w,b	;volatile
  1544  001C2E  6E05               	movwf	??_FanControl& (0+255),c
  1545  001C30  0E00               	movlw	0
  1546  001C32  59E2               	subwfb	(_max_temp+1)& (0+255),w,b	;volatile
  1547  001C34  6E06               	movwf	(??_FanControl+1)& (0+255),c
  1548  001C36  504A               	movf	_temp,w,c	;volatile
  1549  001C38  5C05               	subwf	??_FanControl,w,c
  1550  001C3A  504B               	movf	_temp+1,w,c	;volatile
  1551  001C3C  5806               	subwfb	??_FanControl+1,w,c
  1552  001C3E  E328               	bnc	l375
  1553                           
  1554                           ; BSR set to: 0
  1555  001C40  9A54               	bcf	_err,5,c	;volatile
  1556  001C42  D026               	goto	l375
  1557  001C44                     l3324:
  1558  001C44  FFFF               	dw	65535	; assembler added errata NOP
  1559                           
  1560                           ;digital.h: 154: };digital.h: 156: if (temp >= max_tFAN)
  1561  001C46  0100               	movlb	0	; () banked
  1562  001C48  51DF               	movf	_max_tFAN& (0+255),w,b	;volatile
  1563  001C4A  5C4A               	subwf	_temp,w,c	;volatile
  1564  001C4C  51E0               	movf	(_max_tFAN+1)& (0+255),w,b	;volatile
  1565  001C4E  584B               	subwfb	_temp+1,w,c	;volatile
  1566  001C50  E305               	bnc	l3334
  1567                           
  1568                           ; BSR set to: 0
  1569                           ;digital.h: 157: {;digital.h: 158: LATCbits.LC1 = 1; fan = 1;
  1570  001C52  828B               	bsf	3979,1,c	;volatile
  1571                           
  1572                           ; BSR set to: 0
  1573  001C54  0E01               	movlw	1
  1574  001C56  6F8D               	movwf	_fan& (0+255),b	;volatile
  1575                           
  1576                           ;digital.h: 159: maxf = 1;
  1577  001C58  6F8E               	movwf	_maxf& (0+255),b	;volatile
  1578  001C5A  D01A               	goto	l375
  1579  001C5C                     l3334:
  1580                           
  1581                           ; BSR set to: 0
  1582                           ;digital.h: 162: else;digital.h: 163: {;digital.h: 165: if (temp <= (max_tFAN - hystF))
  1583  001C5C  51EF               	movf	_hystF& (0+255),w,b	;volatile
  1584  001C5E  5DDF               	subwf	_max_tFAN& (0+255),w,b	;volatile
  1585  001C60  6E05               	movwf	??_FanControl& (0+255),c
  1586  001C62  0E00               	movlw	0
  1587  001C64  59E0               	subwfb	(_max_tFAN+1)& (0+255),w,b	;volatile
  1588  001C66  6E06               	movwf	(??_FanControl+1)& (0+255),c
  1589  001C68  504A               	movf	_temp,w,c	;volatile
  1590  001C6A  5C05               	subwf	??_FanControl,w,c
  1591  001C6C  504B               	movf	_temp+1,w,c	;volatile
  1592  001C6E  5806               	subwfb	??_FanControl+1,w,c
  1593  001C70  E303               	bnc	l3338
  1594                           
  1595                           ; BSR set to: 0
  1596                           ;digital.h: 166: {;digital.h: 167: LATCbits.LC1 = 0; fan = 0;
  1597  001C72  928B               	bcf	3979,1,c	;volatile
  1598  001C74  6B8D               	clrf	_fan& (0+255),b	;volatile
  1599                           
  1600                           ;digital.h: 168: maxf = 0;
  1601  001C76  6B8E               	clrf	_maxf& (0+255),b	;volatile
  1602  001C78                     l3338:
  1603                           
  1604                           ; BSR set to: 0
  1605                           ;digital.h: 169: };digital.h: 170: };digital.h: 172: if (fanptt && (maxf == 0))
  1606  001C78  51F2               	movf	_fanptt& (0+255),w,b	;volatile
  1607  001C7A  E00A               	bz	l375
  1608                           
  1609                           ; BSR set to: 0
  1610  001C7C  518E               	movf	_maxf& (0+255),w,b	;volatile
  1611  001C7E  E108               	bnz	l375
  1612                           
  1613                           ; BSR set to: 0
  1614                           ;digital.h: 173: {;digital.h: 174: if (ptt) {LATCbits.LC1 = 1; fan = 1;}
  1615  001C80  5056               	movf	_ptt,w,c	;volatile
  1616  001C82  E004               	bz	l380
  1617                           
  1618                           ; BSR set to: 0
  1619  001C84  828B               	bsf	3979,1,c	;volatile
  1620                           
  1621                           ; BSR set to: 0
  1622  001C86  0E01               	movlw	1
  1623  001C88  6F8D               	movwf	_fan& (0+255),b	;volatile
  1624  001C8A  D002               	goto	l375
  1625  001C8C                     l380:
  1626                           
  1627                           ; BSR set to: 0
  1628                           ;digital.h: 175: else {LATCbits.LC1 = 0; fan = 0;}
  1629  001C8C  928B               	bcf	3979,1,c	;volatile
  1630  001C8E  6B8D               	clrf	_fan& (0+255),b	;volatile
  1631  001C90                     l375:
  1632  001C90  FFFF               	dw	65535	; assembler added errata NOP
  1633                           
  1634                           ; BSR set to: 0
  1635  001C92  0012               	return		;funcret
  1636  001C94  FFFF               	dw	65535	; errata NOP
  1637  001C96                     __end_of_FanControl:
  1638                           	opt stack 0
  1639                           stkptr	equ	0xFFC
  1640                           tblptru	equ	0xFF8
  1641                           tblptrh	equ	0xFF7
  1642                           tblptrl	equ	0xFF6
  1643                           tablat	equ	0xFF5
  1644                           intcon	equ	0xFF2
  1645                           intcon2	equ	0xFF1
  1646                           postinc0	equ	0xFEE
  1647                           wreg	equ	0xFE8
  1648                           status	equ	0xFD8
  1649                           
  1650 ;; *************** function _SendStatusToLCD *****************
  1651 ;; Defined at:
  1652 ;;		line 50 in file "../nextion.h"
  1653 ;; Parameters:    Size  Location     Type
  1654 ;;		None
  1655 ;; Auto vars:     Size  Location     Type
  1656 ;;		None
  1657 ;; Return value:  Size  Location     Type
  1658 ;;                  1    wreg      void 
  1659 ;; Registers used:
  1660 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1661 ;; Tracked objects:
  1662 ;;		On entry : 3F/0
  1663 ;;		On exit  : 3F/0
  1664 ;;		Unchanged: 0/0
  1665 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1666 ;;      Params:         0       0       0       0       0       0       0
  1667 ;;      Locals:         0       0       0       0       0       0       0
  1668 ;;      Temps:         12       0       0       0       0       0       0
  1669 ;;      Totals:        12       0       0       0       0       0       0
  1670 ;;Total ram usage:       12 bytes
  1671 ;; Hardware stack levels used:    1
  1672 ;; Hardware stack levels required when called:    5
  1673 ;; This function calls:
  1674 ;;		_CreateBuffTX
  1675 ;;		_Tramsmitt
  1676 ;; This function is called by:
  1677 ;;		_main
  1678 ;; This function uses a non-reentrant model
  1679 ;;
  1680                           
  1681                           	psect	text4
  1682  000DAC                     __ptext4:
  1683                           	opt stack 0
  1684  000DAC                     _SendStatusToLCD:
  1685                           	opt stack 0
  1686  000DAC  FFFF               	dw	65535	; assembler added errata NOP
  1687                           
  1688                           ; BSR set to: 0
  1689                           
  1690                           ; BSR set to: 0
  1691                           ;incstack = 0
  1692  000DAE  0004               	clrwdt		;# 
  1693                           
  1694                           ;nextion.h: 54: if (lcd < 3) lcd++;
  1695  000DB0  0E03               	movlw	3
  1696  000DB2  6055               	cpfslt	_lcd,c	;volatile
  1697  000DB4  D002               	goto	l473
  1698  000DB6  2A55               	incf	_lcd,f,c	;volatile
  1699  000DB8  D002               	goto	l3646
  1700  000DBA                     l473:
  1701  000DBA  FFFF               	dw	65535	; assembler added errata NOP
  1702                           
  1703                           ;nextion.h: 55: else lcd = 0;
  1704  000DBC  6A55               	clrf	_lcd,c	;volatile
  1705  000DBE                     l3646:
  1706  000DBE  FFFF               	dw	65535	; assembler added errata NOP
  1707                           
  1708                           ;nextion.h: 57: if (frtout) frtout--;
  1709  000DC0  0100               	movlb	0	; () banked
  1710  000DC2  516A               	movf	_frtout& (0+255),w,b	;volatile
  1711  000DC4  116B               	iorwf	(_frtout+1)& (0+255),w,b	;volatile
  1712  000DC6  E003               	bz	l3650
  1713                           
  1714                           ; BSR set to: 0
  1715  000DC8  076A               	decf	_frtout& (0+255),f,b	;volatile
  1716  000DCA  A0D8               	btfss	status,0,c
  1717  000DCC  076B               	decf	(_frtout+1)& (0+255),f,b	;volatile
  1718  000DCE                     l3650:
  1719                           
  1720                           ; BSR set to: 0
  1721                           ;nextion.h: 58: if (cvtout) cvtout--;
  1722  000DCE  5168               	movf	_cvtout& (0+255),w,b	;volatile
  1723  000DD0  1169               	iorwf	(_cvtout+1)& (0+255),w,b	;volatile
  1724  000DD2  E003               	bz	l3654
  1725                           
  1726                           ; BSR set to: 0
  1727  000DD4  0768               	decf	_cvtout& (0+255),f,b	;volatile
  1728  000DD6  A0D8               	btfss	status,0,c
  1729  000DD8  0769               	decf	(_cvtout+1)& (0+255),f,b	;volatile
  1730  000DDA                     l3654:
  1731                           
  1732                           ; BSR set to: 0
  1733                           ;nextion.h: 60: if ((PIE1bits.TXIE) || (!INTCONbits.TMR0IF)) return;
  1734  000DDA  A89D               	btfss	3997,4,c	;volatile
  1735                           
  1736                           ; BSR set to: 0
  1737  000DDC  A4F2               	btfss	intcon,2,c	;volatile
  1738  000DDE  D124               	goto	l480
  1739                           
  1740                           ; BSR set to: 0
  1741                           ;nextion.h: 63: if (lcd == 0)
  1742  000DE0  5055               	movf	_lcd,w,c	;volatile
  1743  000DE2  E159               	bnz	l482
  1744                           
  1745                           ; BSR set to: 0
  1746                           ;nextion.h: 64: {;nextion.h: 65: if (frtout == 0)
  1747  000DE4  516A               	movf	_frtout& (0+255),w,b	;volatile
  1748  000DE6  116B               	iorwf	(_frtout+1)& (0+255),w,b	;volatile
  1749  000DE8  E156               	bnz	l482
  1750                           
  1751                           ; BSR set to: 0
  1752                           ;nextion.h: 66: {;nextion.h: 68: if ((fpeak != fpeak_old) || (rpeak != rpeak_old))
  1753  000DEA  5176               	movf	_fpeak_old& (0+255),w,b	;volatile
  1754  000DEC  1846               	xorwf	_fpeak,w,c	;volatile
  1755  000DEE  E109               	bnz	l3666
  1756  000DF0  5177               	movf	(_fpeak_old+1)& (0+255),w,b	;volatile
  1757  000DF2  1847               	xorwf	_fpeak+1,w,c	;volatile
  1758  000DF4  E106               	bnz	u3770
  1759                           
  1760                           ; BSR set to: 0
  1761  000DF6  5174               	movf	_rpeak_old& (0+255),w,b	;volatile
  1762  000DF8  197A               	xorwf	_rpeak& (0+255),w,b	;volatile
  1763  000DFA  E103               	bnz	u3770
  1764  000DFC  5175               	movf	(_rpeak_old+1)& (0+255),w,b	;volatile
  1765  000DFE  197B               	xorwf	(_rpeak+1)& (0+255),w,b	;volatile
  1766  000E00  E038               	bz	l3682
  1767  000E02                     u3770:
  1768  000E02                     l3666:
  1769                           
  1770                           ; BSR set to: 0
  1771                           ;nextion.h: 69: {;nextion.h: 70: tmp = ((unsigned long)fpeak) | (((unsigned long)rpeak) 
      +                          << 10);
  1772  000E02  517A               	movf	_rpeak& (0+255),w,b	;volatile
  1773  000E04  6E12               	movwf	??_SendStatusToLCD& (0+255),c
  1774  000E06  517B               	movf	(_rpeak+1)& (0+255),w,b	;volatile
  1775  000E08  6E13               	movwf	(??_SendStatusToLCD+1)& (0+255),c
  1776  000E0A  6A14               	clrf	(??_SendStatusToLCD+2)& (0+255),c
  1777  000E0C  6A15               	clrf	(??_SendStatusToLCD+3)& (0+255),c
  1778  000E0E  0E0A               	movlw	10
  1779  000E10                     u3785:
  1780  000E10  FFFF               	dw	65535	; assembler added errata NOP
  1781  000E12  90D8               	bcf	status,0,c
  1782  000E14  3612               	rlcf	??_SendStatusToLCD,f,c
  1783  000E16  3613               	rlcf	??_SendStatusToLCD+1,f,c
  1784  000E18  3614               	rlcf	??_SendStatusToLCD+2,f,c
  1785  000E1A  3615               	rlcf	??_SendStatusToLCD+3,f,c
  1786  000E1C  2EE8               	decfsz	wreg,f,c
  1787  000E1E  D7F8               	goto	u3785
  1788  000E20  5046               	movf	_fpeak,w,c	;volatile
  1789  000E22  1012               	iorwf	??_SendStatusToLCD,w,c
  1790  000E24  6F60               	movwf	_tmp& (0+255),b	;volatile
  1791  000E26  5047               	movf	_fpeak+1,w,c	;volatile
  1792  000E28  1013               	iorwf	??_SendStatusToLCD+1,w,c
  1793  000E2A  6F61               	movwf	(_tmp+1)& (0+255),b	;volatile
  1794  000E2C  0E00               	movlw	0
  1795  000E2E  1014               	iorwf	??_SendStatusToLCD+2,w,c
  1796  000E30  6F62               	movwf	(_tmp+2)& (0+255),b	;volatile
  1797  000E32  0E00               	movlw	0
  1798  000E34  1015               	iorwf	??_SendStatusToLCD+3,w,c
  1799  000E36  6F63               	movwf	(_tmp+3)& (0+255),b	;volatile
  1800                           
  1801                           ; BSR set to: 0
  1802                           ;nextion.h: 71: CreateBuffTX("frV", tmp);
  1803  000E38  0E4A               	movlw	low STR_1
  1804  000E3A  6E0C               	movwf	CreateBuffTX@str,c
  1805  000E3C  C060  F00D         	movff	_tmp,CreateBuffTX@data	;volatile
  1806  000E40  C061  F00E         	movff	_tmp+1,CreateBuffTX@data+1	;volatile
  1807  000E44  C062  F00F         	movff	_tmp+2,CreateBuffTX@data+2	;volatile
  1808  000E48  C063  F010         	movff	_tmp+3,CreateBuffTX@data+3	;volatile
  1809  000E4C  EC82  F00D         	call	_CreateBuffTX	;wreg free
  1810                           
  1811                           ;nextion.h: 72: fpeak_old = fpeak;
  1812  000E50  C046  F076         	movff	_fpeak,_fpeak_old	;volatile
  1813  000E54  C047  F077         	movff	_fpeak+1,_fpeak_old+1	;volatile
  1814                           
  1815                           ;nextion.h: 73: rpeak_old = rpeak;
  1816  000E58  C07A  F074         	movff	_rpeak,_rpeak_old	;volatile
  1817  000E5C  C07B  F075         	movff	_rpeak+1,_rpeak_old+1	;volatile
  1818                           
  1819                           ;nextion.h: 74: frtout = 1000;
  1820  000E60  0E03               	movlw	3
  1821  000E62  0100               	movlb	0	; () banked
  1822  000E64  6F6B               	movwf	(_frtout+1)& (0+255),b	;volatile
  1823  000E66  0EE8               	movlw	232
  1824  000E68  6F6A               	movwf	_frtout& (0+255),b	;volatile
  1825  000E6A                     l3676:
  1826  000E6A  FFFF               	dw	65535	; assembler added errata NOP
  1827                           
  1828                           ;nextion.h: 75: Tramsmitt(); return;
  1829  000E6C  EC58  F011         	call	_Tramsmitt	;wreg free
  1830  000E70  D0DB               	goto	l480
  1831  000E72                     l3682:
  1832                           
  1833                           ; BSR set to: 0
  1834                           ;nextion.h: 77: else;nextion.h: 78: {;nextion.h: 79: if (frwd < fpeak) fpeak = frwd;
  1835  000E72  5046               	movf	_fpeak,w,c	;volatile
  1836  000E74  5C50               	subwf	_frwd,w,c	;volatile
  1837  000E76  5047               	movf	_fpeak+1,w,c	;volatile
  1838  000E78  5851               	subwfb	_frwd+1,w,c	;volatile
  1839  000E7A  E204               	bc	l3686
  1840                           
  1841                           ; BSR set to: 0
  1842  000E7C  C050  F046         	movff	_frwd,_fpeak	;volatile
  1843  000E80  C051  F047         	movff	_frwd+1,_fpeak+1	;volatile
  1844  000E84                     l3686:
  1845                           
  1846                           ; BSR set to: 0
  1847                           ;nextion.h: 80: if (refl < rpeak) rpeak = refl;
  1848  000E84  517A               	movf	_rpeak& (0+255),w,b	;volatile
  1849  000E86  5C4E               	subwf	_refl,w,c	;volatile
  1850  000E88  517B               	movf	(_rpeak+1)& (0+255),w,b	;volatile
  1851  000E8A  584F               	subwfb	_refl+1,w,c	;volatile
  1852  000E8C  E204               	bc	l482
  1853                           
  1854                           ; BSR set to: 0
  1855  000E8E  C04E  F07A         	movff	_refl,_rpeak	;volatile
  1856  000E92  C04F  F07B         	movff	_refl+1,_rpeak+1	;volatile
  1857  000E96                     l482:
  1858                           
  1859                           ; BSR set to: 0
  1860                           ;nextion.h: 81: };nextion.h: 82: };nextion.h: 83: };nextion.h: 85: if (lcd == 1)
  1861                           
  1862                           ; BSR set to: 0
  1863  000E96  0455               	decf	_lcd,w,c	;volatile
  1864  000E98  E14D               	bnz	l490
  1865                           
  1866                           ; BSR set to: 0
  1867                           ;nextion.h: 86: {;nextion.h: 87: if (cvtout == 0)
  1868  000E9A  5168               	movf	_cvtout& (0+255),w,b	;volatile
  1869  000E9C  1169               	iorwf	(_cvtout+1)& (0+255),w,b	;volatile
  1870  000E9E  E14A               	bnz	l490
  1871                           
  1872                           ; BSR set to: 0
  1873                           ;nextion.h: 88: {;nextion.h: 90: if ((cpeak != cpeak_old) || (volt_view != volt_old))
  1874  000EA0  5172               	movf	_cpeak_old& (0+255),w,b	;volatile
  1875  000EA2  1978               	xorwf	_cpeak& (0+255),w,b	;volatile
  1876  000EA4  E109               	bnz	l3698
  1877  000EA6  5173               	movf	(_cpeak_old+1)& (0+255),w,b	;volatile
  1878  000EA8  1979               	xorwf	(_cpeak+1)& (0+255),w,b	;volatile
  1879  000EAA  E106               	bnz	u3840
  1880                           
  1881                           ; BSR set to: 0
  1882  000EAC  517E               	movf	_volt_old& (0+255),w,b	;volatile
  1883  000EAE  1980               	xorwf	_volt_view& (0+255),w,b	;volatile
  1884  000EB0  E103               	bnz	u3840
  1885  000EB2  517F               	movf	(_volt_old+1)& (0+255),w,b	;volatile
  1886  000EB4  1981               	xorwf	(_volt_view+1)& (0+255),w,b	;volatile
  1887  000EB6  E035               	bz	l3714
  1888  000EB8                     u3840:
  1889  000EB8                     l3698:
  1890                           
  1891                           ; BSR set to: 0
  1892                           ;nextion.h: 91: {;nextion.h: 92: tmp = ((unsigned long)volt_view) | (((unsigned long)cpe
      +                          ak) << 10);
  1893  000EB8  5178               	movf	_cpeak& (0+255),w,b	;volatile
  1894  000EBA  6E12               	movwf	??_SendStatusToLCD& (0+255),c
  1895  000EBC  5179               	movf	(_cpeak+1)& (0+255),w,b	;volatile
  1896  000EBE  6E13               	movwf	(??_SendStatusToLCD+1)& (0+255),c
  1897  000EC0  6A14               	clrf	(??_SendStatusToLCD+2)& (0+255),c
  1898  000EC2  6A15               	clrf	(??_SendStatusToLCD+3)& (0+255),c
  1899  000EC4  0E0A               	movlw	10
  1900  000EC6                     u3855:
  1901  000EC6  FFFF               	dw	65535	; assembler added errata NOP
  1902  000EC8  90D8               	bcf	status,0,c
  1903  000ECA  3612               	rlcf	??_SendStatusToLCD,f,c
  1904  000ECC  3613               	rlcf	??_SendStatusToLCD+1,f,c
  1905  000ECE  3614               	rlcf	??_SendStatusToLCD+2,f,c
  1906  000ED0  3615               	rlcf	??_SendStatusToLCD+3,f,c
  1907  000ED2  2EE8               	decfsz	wreg,f,c
  1908  000ED4  D7F8               	goto	u3855
  1909  000ED6  5180               	movf	_volt_view& (0+255),w,b	;volatile
  1910  000ED8  1012               	iorwf	??_SendStatusToLCD,w,c
  1911  000EDA  6F60               	movwf	_tmp& (0+255),b	;volatile
  1912  000EDC  5181               	movf	(_volt_view+1)& (0+255),w,b	;volatile
  1913  000EDE  1013               	iorwf	??_SendStatusToLCD+1,w,c
  1914  000EE0  6F61               	movwf	(_tmp+1)& (0+255),b	;volatile
  1915  000EE2  0E00               	movlw	0
  1916  000EE4  1014               	iorwf	??_SendStatusToLCD+2,w,c
  1917  000EE6  6F62               	movwf	(_tmp+2)& (0+255),b	;volatile
  1918  000EE8  0E00               	movlw	0
  1919  000EEA  1015               	iorwf	??_SendStatusToLCD+3,w,c
  1920  000EEC  6F63               	movwf	(_tmp+3)& (0+255),b	;volatile
  1921                           
  1922                           ; BSR set to: 0
  1923                           ;nextion.h: 93: CreateBuffTX("cvV", tmp);
  1924  000EEE  0E4E               	movlw	low STR_2
  1925  000EF0  6E0C               	movwf	CreateBuffTX@str,c
  1926  000EF2  C060  F00D         	movff	_tmp,CreateBuffTX@data	;volatile
  1927  000EF6  C061  F00E         	movff	_tmp+1,CreateBuffTX@data+1	;volatile
  1928  000EFA  C062  F00F         	movff	_tmp+2,CreateBuffTX@data+2	;volatile
  1929  000EFE  C063  F010         	movff	_tmp+3,CreateBuffTX@data+3	;volatile
  1930  000F02  EC82  F00D         	call	_CreateBuffTX	;wreg free
  1931                           
  1932                           ;nextion.h: 94: cpeak_old = cpeak;
  1933  000F06  C078  F072         	movff	_cpeak,_cpeak_old	;volatile
  1934  000F0A  C079  F073         	movff	_cpeak+1,_cpeak_old+1	;volatile
  1935                           
  1936                           ;nextion.h: 95: volt_old = volt_view;
  1937  000F0E  C080  F07E         	movff	_volt_view,_volt_old	;volatile
  1938  000F12  C081  F07F         	movff	_volt_view+1,_volt_old+1	;volatile
  1939                           
  1940                           ;nextion.h: 96: cvtout = 1000;
  1941  000F16  0E03               	movlw	3
  1942  000F18  0100               	movlb	0	; () banked
  1943  000F1A  6F69               	movwf	(_cvtout+1)& (0+255),b	;volatile
  1944  000F1C  0EE8               	movlw	232
  1945  000F1E  6F68               	movwf	_cvtout& (0+255),b	;volatile
  1946  000F20  D7A4               	goto	l3676
  1947  000F22                     l3714:
  1948                           
  1949                           ; BSR set to: 0
  1950                           ;nextion.h: 99: else if (curr < cpeak) cpeak = curr;
  1951  000F22  5178               	movf	_cpeak& (0+255),w,b	;volatile
  1952  000F24  5C4C               	subwf	_curr,w,c	;volatile
  1953  000F26  5179               	movf	(_cpeak+1)& (0+255),w,b	;volatile
  1954  000F28  584D               	subwfb	_curr+1,w,c	;volatile
  1955  000F2A  E204               	bc	l490
  1956                           
  1957                           ; BSR set to: 0
  1958  000F2C  C04C  F078         	movff	_curr,_cpeak	;volatile
  1959  000F30  C04D  F079         	movff	_curr+1,_cpeak+1	;volatile
  1960  000F34                     l490:
  1961                           
  1962                           ; BSR set to: 0
  1963                           ;nextion.h: 100: };nextion.h: 101: };nextion.h: 103: if (lcd == 2)
  1964                           
  1965                           ; BSR set to: 0
  1966  000F34  0E02               	movlw	2
  1967  000F36  1855               	xorwf	_lcd,w,c	;volatile
  1968  000F38  E165               	bnz	l3740
  1969                           
  1970                           ; BSR set to: 0
  1971                           ;nextion.h: 104: {;nextion.h: 105: bstate = (fan << 3) | (bypass << 2) | (ptt << 1) | ab
      +                          and;
  1972  000F3A  90D8               	bcf	status,0,c
  1973  000F3C  3456               	rlcf	_ptt,w,c	;volatile
  1974  000F3E  6E12               	movwf	??_SendStatusToLCD& (0+255),c
  1975  000F40  C058  F013         	movff	_bypass,??_SendStatusToLCD+1	;volatile
  1976  000F44  90D8               	bcf	status,0,c
  1977  000F46  3613               	rlcf	??_SendStatusToLCD+1,f,c
  1978  000F48  90D8               	bcf	status,0,c
  1979  000F4A  3613               	rlcf	??_SendStatusToLCD+1,f,c
  1980  000F4C  398D               	swapf	_fan& (0+255),w,b	;volatile
  1981  000F4E  42E8               	rrncf	wreg,f,c
  1982  000F50  0BF8               	andlw	248
  1983  000F52  1013               	iorwf	??_SendStatusToLCD+1,w,c
  1984  000F54  1012               	iorwf	??_SendStatusToLCD,w,c
  1985  000F56  11F1               	iorwf	_aband& (0+255),w,b	;volatile
  1986  000F58  6F8A               	movwf	_bstate& (0+255),b	;volatile
  1987                           
  1988                           ;nextion.h: 106: if ((temp != temp_old) || (band != band_old) || (bstate != bstate_old))
  1989  000F5A  517C               	movf	_temp_old& (0+255),w,b	;volatile
  1990  000F5C  184A               	xorwf	_temp,w,c	;volatile
  1991  000F5E  E109               	bnz	l3726
  1992  000F60  517D               	movf	(_temp_old+1)& (0+255),w,b	;volatile
  1993  000F62  184B               	xorwf	_temp+1,w,c	;volatile
  1994  000F64  E106               	bnz	u3900
  1995                           
  1996                           ; BSR set to: 0
  1997  000F66  518B               	movf	_band_old& (0+255),w,b	;volatile
  1998  000F68  1857               	xorwf	_band,w,c	;volatile
  1999  000F6A  E103               	bnz	u3900
  2000                           
  2001                           ; BSR set to: 0
  2002  000F6C  5189               	movf	_bstate_old& (0+255),w,b	;volatile
  2003  000F6E  198A               	xorwf	_bstate& (0+255),w,b	;volatile
  2004  000F70  E049               	bz	l3740
  2005  000F72                     u3900:
  2006  000F72                     l3726:
  2007                           
  2008                           ; BSR set to: 0
  2009                           ;nextion.h: 107: {;nextion.h: 108: tmp = ((unsigned long)temp) | (((unsigned long)band) 
      +                          << 7) | (((unsigned long)bstate) << 10);
  2010  000F72  C08A  F012         	movff	_bstate,??_SendStatusToLCD	;volatile
  2011  000F76  6A13               	clrf	(??_SendStatusToLCD+1)& (0+255),c
  2012  000F78  6A14               	clrf	(??_SendStatusToLCD+2)& (0+255),c
  2013  000F7A  6A15               	clrf	(??_SendStatusToLCD+3)& (0+255),c
  2014  000F7C  0E0A               	movlw	10
  2015  000F7E                     u3915:
  2016  000F7E  FFFF               	dw	65535	; assembler added errata NOP
  2017  000F80  90D8               	bcf	status,0,c
  2018  000F82  3612               	rlcf	??_SendStatusToLCD,f,c
  2019  000F84  3613               	rlcf	??_SendStatusToLCD+1,f,c
  2020  000F86  3614               	rlcf	??_SendStatusToLCD+2,f,c
  2021  000F88  3615               	rlcf	??_SendStatusToLCD+3,f,c
  2022  000F8A  2EE8               	decfsz	wreg,f,c
  2023  000F8C  D7F8               	goto	u3915
  2024  000F8E  C057  F016         	movff	_band,??_SendStatusToLCD+4	;volatile
  2025  000F92  6A17               	clrf	(??_SendStatusToLCD+5)& (0+255),c
  2026  000F94  6A18               	clrf	(??_SendStatusToLCD+6)& (0+255),c
  2027  000F96  6A19               	clrf	(??_SendStatusToLCD+7)& (0+255),c
  2028  000F98  0E07               	movlw	7
  2029  000F9A                     u3925:
  2030  000F9A  FFFF               	dw	65535	; assembler added errata NOP
  2031  000F9C  90D8               	bcf	status,0,c
  2032  000F9E  3616               	rlcf	??_SendStatusToLCD+4,f,c
  2033  000FA0  3617               	rlcf	??_SendStatusToLCD+5,f,c
  2034  000FA2  3618               	rlcf	??_SendStatusToLCD+6,f,c
  2035  000FA4  3619               	rlcf	??_SendStatusToLCD+7,f,c
  2036  000FA6  2EE8               	decfsz	wreg,f,c
  2037  000FA8  D7F8               	goto	u3925
  2038  000FAA  504A               	movf	_temp,w,c	;volatile
  2039  000FAC  1016               	iorwf	??_SendStatusToLCD+4,w,c
  2040  000FAE  6E1A               	movwf	(??_SendStatusToLCD+8)& (0+255),c
  2041  000FB0  504B               	movf	_temp+1,w,c	;volatile
  2042  000FB2  1017               	iorwf	??_SendStatusToLCD+5,w,c
  2043  000FB4  6E1B               	movwf	(??_SendStatusToLCD+9)& (0+255),c
  2044  000FB6  0E00               	movlw	0
  2045  000FB8  1018               	iorwf	??_SendStatusToLCD+6,w,c
  2046  000FBA  6E1C               	movwf	(??_SendStatusToLCD+10)& (0+255),c
  2047  000FBC  0E00               	movlw	0
  2048  000FBE  1019               	iorwf	??_SendStatusToLCD+7,w,c
  2049  000FC0  6E1D               	movwf	(??_SendStatusToLCD+11)& (0+255),c
  2050  000FC2  5012               	movf	??_SendStatusToLCD,w,c
  2051  000FC4  101A               	iorwf	??_SendStatusToLCD+8,w,c
  2052  000FC6  6F60               	movwf	_tmp& (0+255),b	;volatile
  2053  000FC8  5013               	movf	??_SendStatusToLCD+1,w,c
  2054  000FCA  101B               	iorwf	??_SendStatusToLCD+9,w,c
  2055  000FCC  6F61               	movwf	(_tmp+1)& (0+255),b	;volatile
  2056  000FCE  5014               	movf	??_SendStatusToLCD+2,w,c
  2057  000FD0  101C               	iorwf	??_SendStatusToLCD+10,w,c
  2058  000FD2  6F62               	movwf	(_tmp+2)& (0+255),b	;volatile
  2059  000FD4  5015               	movf	??_SendStatusToLCD+3,w,c
  2060  000FD6  101D               	iorwf	??_SendStatusToLCD+11,w,c
  2061  000FD8  6F63               	movwf	(_tmp+3)& (0+255),b	;volatile
  2062                           
  2063                           ; BSR set to: 0
  2064                           ;nextion.h: 109: CreateBuffTX("tbs", tmp);
  2065  000FDA  0E7A               	movlw	low STR_3
  2066  000FDC  6E0C               	movwf	CreateBuffTX@str,c
  2067  000FDE  C060  F00D         	movff	_tmp,CreateBuffTX@data	;volatile
  2068  000FE2  C061  F00E         	movff	_tmp+1,CreateBuffTX@data+1	;volatile
  2069  000FE6  C062  F00F         	movff	_tmp+2,CreateBuffTX@data+2	;volatile
  2070  000FEA  C063  F010         	movff	_tmp+3,CreateBuffTX@data+3	;volatile
  2071  000FEE  EC82  F00D         	call	_CreateBuffTX	;wreg free
  2072                           
  2073                           ;nextion.h: 110: temp_old = temp;
  2074  000FF2  C04A  F07C         	movff	_temp,_temp_old	;volatile
  2075  000FF6  C04B  F07D         	movff	_temp+1,_temp_old+1	;volatile
  2076                           
  2077                           ;nextion.h: 111: band_old = band;
  2078  000FFA  C057  F08B         	movff	_band,_band_old	;volatile
  2079                           
  2080                           ;nextion.h: 112: bstate_old = bstate;
  2081  000FFE  C08A  F089         	movff	_bstate,_bstate_old	;volatile
  2082  001002  D733               	goto	l3676
  2083  001004                     l3740:
  2084                           
  2085                           ; BSR set to: 0
  2086                           ;nextion.h: 114: };nextion.h: 115: };nextion.h: 117: if (lcd == 3)
  2087  001004  0E03               	movlw	3
  2088  001006  1855               	xorwf	_lcd,w,c	;volatile
  2089  001008  E10F               	bnz	l480
  2090                           
  2091                           ; BSR set to: 0
  2092                           ;nextion.h: 118: {;nextion.h: 119: if (err != err_old)
  2093  00100A  51FB               	movf	_err_old& (0+255),w,b	;volatile
  2094  00100C  1854               	xorwf	_err,w,c	;volatile
  2095  00100E  E00C               	bz	l480
  2096                           
  2097                           ; BSR set to: 0
  2098                           ;nextion.h: 120: {;nextion.h: 121: CreateBuffTX("err", err);
  2099  001010  0E76               	movlw	low STR_4
  2100  001012  6E0C               	movwf	CreateBuffTX@str,c
  2101  001014  5054               	movf	_err,w,c	;volatile
  2102  001016  6E0D               	movwf	CreateBuffTX@data,c
  2103  001018  6A0E               	clrf	CreateBuffTX@data+1,c
  2104  00101A  6A0F               	clrf	CreateBuffTX@data+2,c
  2105  00101C  6A10               	clrf	CreateBuffTX@data+3,c
  2106  00101E  EC82  F00D         	call	_CreateBuffTX	;wreg free
  2107                           
  2108                           ;nextion.h: 122: err_old = err;
  2109  001022  C054  F0FB         	movff	_err,_err_old	;volatile
  2110  001026  D721               	goto	l3676
  2111  001028                     l480:
  2112  001028  FFFF               	dw	65535	; assembler added errata NOP
  2113                           
  2114                           ; BSR set to: 0
  2115  00102A  0012               	return		;funcret
  2116  00102C  FFFF               	dw	65535	; errata NOP
  2117  00102E                     __end_of_SendStatusToLCD:
  2118                           	opt stack 0
  2119                           stkptr	equ	0xFFC
  2120                           tblptru	equ	0xFF8
  2121                           tblptrh	equ	0xFF7
  2122                           tblptrl	equ	0xFF6
  2123                           tablat	equ	0xFF5
  2124                           intcon	equ	0xFF2
  2125                           intcon2	equ	0xFF1
  2126                           postinc0	equ	0xFEE
  2127                           wreg	equ	0xFE8
  2128                           status	equ	0xFD8
  2129                           
  2130 ;; *************** function _Tramsmitt *****************
  2131 ;; Defined at:
  2132 ;;		line 40 in file "../nextion.h"
  2133 ;; Parameters:    Size  Location     Type
  2134 ;;		None
  2135 ;; Auto vars:     Size  Location     Type
  2136 ;;		None
  2137 ;; Return value:  Size  Location     Type
  2138 ;;                  1    wreg      void 
  2139 ;; Registers used:
  2140 ;;		wreg, status,2
  2141 ;; Tracked objects:
  2142 ;;		On entry : 0/0
  2143 ;;		On exit  : 3F/0
  2144 ;;		Unchanged: 0/0
  2145 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2146 ;;      Params:         0       0       0       0       0       0       0
  2147 ;;      Locals:         0       0       0       0       0       0       0
  2148 ;;      Temps:          0       0       0       0       0       0       0
  2149 ;;      Totals:         0       0       0       0       0       0       0
  2150 ;;Total ram usage:        0 bytes
  2151 ;; Hardware stack levels used:    1
  2152 ;; Hardware stack levels required when called:    3
  2153 ;; This function calls:
  2154 ;;		Nothing
  2155 ;; This function is called by:
  2156 ;;		_SendStatusToLCD
  2157 ;; This function uses a non-reentrant model
  2158 ;;
  2159                           
  2160                           	psect	text5
  2161  0022B0                     __ptext5:
  2162                           	opt stack 0
  2163  0022B0                     _Tramsmitt:
  2164                           	opt stack 0
  2165  0022B0  FFFF               	dw	65535	; assembler added errata NOP
  2166                           
  2167                           ;nextion.h: 43: TMR0 = 0x2800;
  2168                           
  2169                           ; BSR set to: 0
  2170                           ;incstack = 0
  2171  0022B2  0E28               	movlw	40
  2172  0022B4  6ED7               	movwf	4055,c	;volatile
  2173  0022B6  0E00               	movlw	0
  2174  0022B8  6AD6               	clrf	4054,c	;volatile
  2175                           
  2176                           ;nextion.h: 44: INTCONbits.TMR0IF = 0;
  2177  0022BA  94F2               	bcf	intcon,2,c	;volatile
  2178                           
  2179                           ;nextion.h: 45: txb = 0; PIE1bits.TXIE = 1;
  2180  0022BC  0100               	movlb	0	; () banked
  2181  0022BE  6B87               	clrf	_txb& (0+255),b	;volatile
  2182                           
  2183                           ; BSR set to: 0
  2184  0022C0  889D               	bsf	3997,4,c	;volatile
  2185                           
  2186                           ; BSR set to: 0
  2187  0022C2  0012               	return		;funcret
  2188  0022C4  FFFF               	dw	65535	; errata NOP
  2189  0022C6                     __end_of_Tramsmitt:
  2190                           	opt stack 0
  2191                           stkptr	equ	0xFFC
  2192                           tblptru	equ	0xFF8
  2193                           tblptrh	equ	0xFF7
  2194                           tblptrl	equ	0xFF6
  2195                           tablat	equ	0xFF5
  2196                           intcon	equ	0xFF2
  2197                           intcon2	equ	0xFF1
  2198                           postinc0	equ	0xFEE
  2199                           wreg	equ	0xFE8
  2200                           status	equ	0xFD8
  2201                           
  2202 ;; *************** function _ReadStatusFromLCD *****************
  2203 ;; Defined at:
  2204 ;;		line 130 in file "../nextion.h"
  2205 ;; Parameters:    Size  Location     Type
  2206 ;;		None
  2207 ;; Auto vars:     Size  Location     Type
  2208 ;;		None
  2209 ;; Return value:  Size  Location     Type
  2210 ;;                  1    wreg      void 
  2211 ;; Registers used:
  2212 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2213 ;; Tracked objects:
  2214 ;;		On entry : 3F/0
  2215 ;;		On exit  : 3F/0
  2216 ;;		Unchanged: 0/0
  2217 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2218 ;;      Params:         0       0       0       0       0       0       0
  2219 ;;      Locals:         0       0       0       0       0       0       0
  2220 ;;      Temps:          0       0       0       0       0       0       0
  2221 ;;      Totals:         0       0       0       0       0       0       0
  2222 ;;Total ram usage:        0 bytes
  2223 ;; Hardware stack levels used:    1
  2224 ;; Hardware stack levels required when called:    8
  2225 ;; This function calls:
  2226 ;;		_Beep
  2227 ;;		_EEmbandRead
  2228 ;;		_EEsetupRead
  2229 ;;		_LCDpageSelect
  2230 ;;		_PTT_OFF
  2231 ;;		_RXrestart
  2232 ;;		_SetBand
  2233 ;;		_SetupMode
  2234 ;;		_writeEEPROM
  2235 ;; This function is called by:
  2236 ;;		_main
  2237 ;; This function uses a non-reentrant model
  2238 ;;
  2239                           
  2240                           	psect	text6
  2241  001796                     __ptext6:
  2242                           	opt stack 0
  2243  001796                     _ReadStatusFromLCD:
  2244                           	opt stack 0
  2245  001796  FFFF               	dw	65535	; assembler added errata NOP
  2246                           
  2247                           ; BSR set to: 0
  2248                           
  2249                           ; BSR set to: 0
  2250                           ;incstack = 0
  2251  001798  0004               	clrwdt		;# 
  2252                           
  2253                           ;nextion.h: 133: if (rx_end == 0) return;
  2254  00179A  0100               	movlb	0	; () banked
  2255  00179C  5186               	movf	_rx_end& (0+255),w,b	;volatile
  2256  00179E  E057               	bz	l505
  2257                           
  2258                           ; BSR set to: 0
  2259                           ;nextion.h: 134: if (buffRX[0] != 0x90) {RXrestart(); return;}
  2260  0017A0  0E90               	movlw	144
  2261  0017A2  19CF               	xorwf	_buffRX& (0+255),w,b	;volatile
  2262  0017A4  E004               	bz	l4408
  2263  0017A6                     u5040:
  2264  0017A6  FFFF               	dw	65535	; assembler added errata NOP
  2265  0017A8  EC54  F010         	call	_RXrestart	;wreg free
  2266  0017AC  D050               	goto	l505
  2267  0017AE                     l4408:
  2268                           
  2269                           ; BSR set to: 0
  2270                           ;nextion.h: 136: if (err)
  2271  0017AE  5054               	movf	_err,w,c	;volatile
  2272  0017B0  E008               	bz	l4416
  2273                           
  2274                           ; BSR set to: 0
  2275                           ;nextion.h: 137: {;nextion.h: 138: if (!(err & 0x20))
  2276  0017B2  BA54               	btfsc	_err,5,c	;volatile
  2277  0017B4  D7F8               	goto	u5040
  2278                           
  2279                           ; BSR set to: 0
  2280                           ;nextion.h: 139: {;nextion.h: 141: if (buffRX[1] == 0x12) err &=~ buffRX[2];
  2281  0017B6  0E12               	movlw	18
  2282  0017B8  19D0               	xorwf	(_buffRX+1)& (0+255),w,b	;volatile
  2283  0017BA  E1F5               	bnz	u5040
  2284                           
  2285                           ; BSR set to: 0
  2286  0017BC  1DD1               	comf	(_buffRX+2)& (0+255),w,b	;volatile
  2287  0017BE  1654               	andwf	_err,f,c	;volatile
  2288  0017C0  D7F2               	goto	u5040
  2289  0017C2                     l4416:
  2290                           
  2291                           ; BSR set to: 0
  2292                           ;nextion.h: 144: else;nextion.h: 145: {;nextion.h: 147: if (buffRX[1] == 0x11)
  2293  0017C2  0E11               	movlw	17
  2294  0017C4  19D0               	xorwf	(_buffRX+1)& (0+255),w,b	;volatile
  2295  0017C6  E10B               	bnz	l4426
  2296                           
  2297                           ; BSR set to: 0
  2298                           ;nextion.h: 148: {;nextion.h: 149: bypass ^= 1;
  2299  0017C8  0E01               	movlw	1
  2300  0017CA  1A58               	xorwf	_bypass,f,c	;volatile
  2301                           
  2302                           ; BSR set to: 0
  2303                           ;nextion.h: 150: writeEEPROM(28, bypass);
  2304  0017CC  C058  F005         	movff	_bypass,writeEEPROM@data	;volatile
  2305  0017D0  0E1C               	movlw	28
  2306  0017D2  ECD7  F00F         	call	_writeEEPROM
  2307                           
  2308                           ;nextion.h: 151: if (bypass) PTT_OFF();
  2309  0017D6  5058               	movf	_bypass,w,c	;volatile
  2310  0017D8  E002               	bz	l4426
  2311  0017DA  EC4B  F011         	call	_PTT_OFF	;wreg free
  2312  0017DE                     l4426:
  2313                           
  2314                           ;nextion.h: 152: };nextion.h: 154: if (ptt == 0)
  2315  0017DE  5056               	movf	_ptt,w,c	;volatile
  2316  0017E0  E1E2               	bnz	u5040
  2317                           
  2318                           ;nextion.h: 155: {;nextion.h: 156: if (bypass == 0)
  2319  0017E2  5058               	movf	_bypass,w,c	;volatile
  2320  0017E4  E125               	bnz	l4450
  2321                           
  2322                           ;nextion.h: 157: {;nextion.h: 159: if (buffRX[1] == 0x13)
  2323  0017E6  0E13               	movlw	19
  2324  0017E8  0100               	movlb	0	; () banked
  2325  0017EA  19D0               	xorwf	(_buffRX+1)& (0+255),w,b	;volatile
  2326  0017EC  E10E               	bnz	l4440
  2327                           
  2328                           ; BSR set to: 0
  2329                           ;nextion.h: 160: {;nextion.h: 161: aband ^= 1;
  2330  0017EE  0E01               	movlw	1
  2331  0017F0  1BF1               	xorwf	_aband& (0+255),f,b	;volatile
  2332                           
  2333                           ; BSR set to: 0
  2334                           ;nextion.h: 162: writeEEPROM(27, aband);
  2335  0017F2  C0F1  F005         	movff	_aband,writeEEPROM@data	;volatile
  2336  0017F6  0E1B               	movlw	27
  2337  0017F8  ECD7  F00F         	call	_writeEEPROM
  2338                           
  2339                           ;nextion.h: 163: if (aband == 0)
  2340  0017FC  0100               	movlb	0	; () banked
  2341  0017FE  51F1               	movf	_aband& (0+255),w,b	;volatile
  2342  001800  E104               	bnz	l4440
  2343                           
  2344                           ; BSR set to: 0
  2345                           ;nextion.h: 164: {;nextion.h: 165: EEmbandRead();
  2346  001802  ECCE  F010         	call	_EEmbandRead	;wreg free
  2347                           
  2348                           ;nextion.h: 166: SetBand();
  2349  001806  EC80  F00F         	call	_SetBand	;wreg free
  2350  00180A                     l4440:
  2351                           
  2352                           ;nextion.h: 167: };nextion.h: 168: };nextion.h: 170: if (buffRX[1] <= 0x04)
  2353  00180A  0E05               	movlw	5
  2354  00180C  0100               	movlb	0	; () banked
  2355  00180E  61D0               	cpfslt	(_buffRX+1)& (0+255),b	;volatile
  2356  001810  D00F               	goto	l4450
  2357                           
  2358                           ; BSR set to: 0
  2359                           ;nextion.h: 171: {;nextion.h: 172: aband = 0;
  2360  001812  6BF1               	clrf	_aband& (0+255),b	;volatile
  2361                           
  2362                           ;nextion.h: 173: band = buffRX[1];
  2363  001814  C0D0  F057         	movff	_buffRX+1,_band	;volatile
  2364                           
  2365                           ; BSR set to: 0
  2366                           ;nextion.h: 174: SetBand();
  2367  001818  EC80  F00F         	call	_SetBand	;wreg free
  2368                           
  2369                           ;nextion.h: 175: writeEEPROM(26, band);
  2370  00181C  C057  F005         	movff	_band,writeEEPROM@data	;volatile
  2371  001820  0E1A               	movlw	26
  2372  001822  ECD7  F00F         	call	_writeEEPROM
  2373                           
  2374                           ;nextion.h: 176: writeEEPROM(27, aband);
  2375  001826  C0F1  F005         	movff	_aband,writeEEPROM@data	;volatile
  2376  00182A  0E1B               	movlw	27
  2377  00182C  ECD7  F00F         	call	_writeEEPROM
  2378  001830                     l4450:
  2379  001830  FFFF               	dw	65535	; assembler added errata NOP
  2380                           
  2381                           ;nextion.h: 177: };nextion.h: 178: };nextion.h: 180: if (buffRX[1] == 0x20)
  2382  001832  0E20               	movlw	32
  2383  001834  0100               	movlb	0	; () banked
  2384  001836  19D0               	xorwf	(_buffRX+1)& (0+255),w,b	;volatile
  2385  001838  E1B6               	bnz	u5040
  2386                           
  2387                           ; BSR set to: 0
  2388                           ;nextion.h: 181: {;nextion.h: 182: SetupMode();
  2389  00183A  EC44  F003         	call	_SetupMode	;wreg free
  2390                           
  2391                           ;nextion.h: 183: EEsetupRead();
  2392  00183E  EC37  F005         	call	_EEsetupRead	;wreg free
  2393                           
  2394                           ; BSR set to: 0
  2395                           ;nextion.h: 184: LCDpageSelect(0xA0);
  2396  001842  0EA0               	movlw	160
  2397  001844  EC4B  F00E         	call	_LCDpageSelect
  2398                           
  2399                           ;nextion.h: 185: Beep();
  2400  001848  EC14  F011         	call	_Beep	;wreg free
  2401  00184C  D7AC               	goto	u5040
  2402  00184E                     l505:
  2403  00184E  FFFF               	dw	65535	; assembler added errata NOP
  2404                           
  2405                           ; BSR set to: 0
  2406  001850  0012               	return		;funcret
  2407  001852  FFFF               	dw	65535	; errata NOP
  2408  001854                     __end_of_ReadStatusFromLCD:
  2409                           	opt stack 0
  2410                           stkptr	equ	0xFFC
  2411                           tblptru	equ	0xFF8
  2412                           tblptrh	equ	0xFF7
  2413                           tblptrl	equ	0xFF6
  2414                           tablat	equ	0xFF5
  2415                           intcon	equ	0xFF2
  2416                           intcon2	equ	0xFF1
  2417                           postinc0	equ	0xFEE
  2418                           wreg	equ	0xFE8
  2419                           status	equ	0xFD8
  2420                           
  2421 ;; *************** function _SetupMode *****************
  2422 ;; Defined at:
  2423 ;;		line 201 in file "../nextion.h"
  2424 ;; Parameters:    Size  Location     Type
  2425 ;;		None
  2426 ;; Auto vars:     Size  Location     Type
  2427 ;;  lW              2   33[COMRAM] unsigned int 
  2428 ;;  rW              2   31[COMRAM] unsigned int 
  2429 ;;  pW              2   29[COMRAM] unsigned int 
  2430 ;;  eadr            1   35[COMRAM] unsigned char 
  2431 ;; Return value:  Size  Location     Type
  2432 ;;                  1    wreg      void 
  2433 ;; Registers used:
  2434 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2435 ;; Tracked objects:
  2436 ;;		On entry : 3F/0
  2437 ;;		On exit  : 0/0
  2438 ;;		Unchanged: 0/0
  2439 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2440 ;;      Params:         0       0       0       0       0       0       0
  2441 ;;      Locals:         7       0       0       0       0       0       0
  2442 ;;      Temps:         10       0       0       0       0       0       0
  2443 ;;      Totals:        17       0       0       0       0       0       0
  2444 ;;Total ram usage:       17 bytes
  2445 ;; Hardware stack levels used:    1
  2446 ;; Hardware stack levels required when called:    7
  2447 ;; This function calls:
  2448 ;;		_CreateBuffTX
  2449 ;;		_LCDpageSelect
  2450 ;;		_RXrestart
  2451 ;;		_SendUSART
  2452 ;;		_SwitchOFF
  2453 ;;		___lldiv
  2454 ;;		___lwdiv
  2455 ;;		_writeEEPROM
  2456 ;;		_writeEEPROM16
  2457 ;; This function is called by:
  2458 ;;		_ReadStatusFromLCD
  2459 ;; This function uses a non-reentrant model
  2460 ;;
  2461                           
  2462                           	psect	text7
  2463  000688                     __ptext7:
  2464                           	opt stack 0
  2465  000688                     _SetupMode:
  2466                           	opt stack 0
  2467  000688  FFFF               	dw	65535	; assembler added errata NOP
  2468                           
  2469                           ; BSR set to: 0
  2470                           ;nextion.h: 203: unsigned int pW,rW,lW;;nextion.h: 204: unsigned char eadr;;nextion.h: 2
      +                          06: SwitchOFF();
  2471                           
  2472                           ; BSR set to: 0
  2473                           ;incstack = 0
  2474  00068A  EC63  F011         	call	_SwitchOFF	;wreg free
  2475                           
  2476                           ; BSR set to: 0
  2477                           ;nextion.h: 208: pW = (unsigned int)(((unsigned long)max_pwr * (unsigned long)max_pwr) /
      +                           (unsigned long)870) + 1;
  2478  00068E  C0E9  F014         	movff	_max_pwr,??_SetupMode	;volatile
  2479  000692  C0EA  F015         	movff	_max_pwr+1,??_SetupMode+1	;volatile
  2480  000696  51E9               	movf	_max_pwr& (0+255),w,b	;volatile
  2481  000698  6E16               	movwf	(??_SetupMode+2)& (0+255),c
  2482  00069A  51EA               	movf	(_max_pwr+1)& (0+255),w,b	;volatile
  2483  00069C  6E17               	movwf	(??_SetupMode+3)& (0+255),c
  2484  00069E  6A18               	clrf	(??_SetupMode+4)& (0+255),c
  2485  0006A0  6A19               	clrf	(??_SetupMode+5)& (0+255),c
  2486  0006A2  5016               	movf	(??_SetupMode+2)& (0+255),w,c
  2487  0006A4  0214               	mulwf	??_SetupMode& (0+255),c
  2488  0006A6  CFF3 F01A          	movff	prodl,??_SetupMode+6
  2489  0006AA  CFF4 F01B          	movff	prodh,??_SetupMode+7
  2490  0006AE  6A1C               	clrf	(??_SetupMode+8)& (0+255),c
  2491  0006B0  6A1D               	clrf	(??_SetupMode+9)& (0+255),c
  2492  0006B2  0215               	mulwf	(??_SetupMode+1)& (0+255),c
  2493  0006B4  50F3               	movf	prodl,w,c
  2494  0006B6  261B               	addwf	(??_SetupMode+7)& (0+255),f,c
  2495  0006B8  50F4               	movf	prodh,w,c
  2496  0006BA  221C               	addwfc	(??_SetupMode+8)& (0+255),f,c
  2497  0006BC  0E00               	movlw	0
  2498  0006BE  221D               	addwfc	(??_SetupMode+9)& (0+255),f,c
  2499  0006C0  5017               	movf	(??_SetupMode+3)& (0+255),w,c
  2500  0006C2  0214               	mulwf	??_SetupMode& (0+255),c
  2501  0006C4  50F3               	movf	prodl,w,c
  2502  0006C6  261B               	addwf	(??_SetupMode+7)& (0+255),f,c
  2503  0006C8  50F4               	movf	prodh,w,c
  2504  0006CA  221C               	addwfc	(??_SetupMode+8)& (0+255),f,c
  2505  0006CC  0E00               	movlw	0
  2506  0006CE  221D               	addwfc	(??_SetupMode+9)& (0+255),f,c
  2507  0006D0  5017               	movf	(??_SetupMode+3)& (0+255),w,c
  2508  0006D2  0215               	mulwf	(??_SetupMode+1)& (0+255),c
  2509  0006D4  50F3               	movf	prodl,w,c
  2510  0006D6  261C               	addwf	(??_SetupMode+8)& (0+255),f,c
  2511  0006D8  50F4               	movf	prodh,w,c
  2512  0006DA  221D               	addwfc	(??_SetupMode+9)& (0+255),f,c
  2513  0006DC  5018               	movf	(??_SetupMode+4)& (0+255),w,c
  2514  0006DE  0214               	mulwf	??_SetupMode& (0+255),c
  2515  0006E0  50F3               	movf	prodl,w,c
  2516  0006E2  261C               	addwf	(??_SetupMode+8)& (0+255),f,c
  2517  0006E4  50F4               	movf	prodh,w,c
  2518  0006E6  221D               	addwfc	(??_SetupMode+9)& (0+255),f,c
  2519  0006E8  5018               	movf	(??_SetupMode+4)& (0+255),w,c
  2520  0006EA  0215               	mulwf	(??_SetupMode+1)& (0+255),c
  2521  0006EC  50F3               	movf	prodl,w,c
  2522  0006EE  261D               	addwf	(??_SetupMode+9)& (0+255),f,c
  2523  0006F0  5019               	movf	(??_SetupMode+5)& (0+255),w,c
  2524  0006F2  0214               	mulwf	??_SetupMode& (0+255),c
  2525  0006F4  50F3               	movf	prodl,w,c
  2526  0006F6  261D               	addwf	(??_SetupMode+9)& (0+255),f,c
  2527  0006F8  C01A  F005         	movff	??_SetupMode+6,___lldiv@dividend
  2528  0006FC  C01B  F006         	movff	??_SetupMode+7,___lldiv@dividend+1
  2529  000700  C01C  F007         	movff	??_SetupMode+8,___lldiv@dividend+2
  2530  000704  C01D  F008         	movff	??_SetupMode+9,___lldiv@dividend+3
  2531  000708  0E66               	movlw	102
  2532  00070A  6E09               	movwf	___lldiv@divisor,c
  2533  00070C  0E03               	movlw	3
  2534  00070E  6E0A               	movwf	___lldiv@divisor+1,c
  2535  000710  6A0B               	clrf	___lldiv@divisor+2,c
  2536  000712  6A0C               	clrf	___lldiv@divisor+3,c
  2537  000714  ECCD  F00D         	call	___lldiv	;wreg free
  2538  000718  2805               	incf	?___lldiv,w,c
  2539  00071A  6E1E               	movwf	SetupMode@pW,c
  2540  00071C  0E00               	movlw	0
  2541  00071E  2006               	addwfc	?___lldiv+1,w,c
  2542  000720  6E1F               	movwf	SetupMode@pW+1,c
  2543                           
  2544                           ; BSR set to: 0
  2545                           ;nextion.h: 209: rW = (unsigned int)(((unsigned long)max_ref * (unsigned long)max_ref) /
      +                           (unsigned long)870) + 1;
  2546  000722  C0E7  F014         	movff	_max_ref,??_SetupMode	;volatile
  2547  000726  C0E8  F015         	movff	_max_ref+1,??_SetupMode+1	;volatile
  2548  00072A  51E7               	movf	_max_ref& (0+255),w,b	;volatile
  2549  00072C  6E16               	movwf	(??_SetupMode+2)& (0+255),c
  2550  00072E  51E8               	movf	(_max_ref+1)& (0+255),w,b	;volatile
  2551  000730  6E17               	movwf	(??_SetupMode+3)& (0+255),c
  2552  000732  6A18               	clrf	(??_SetupMode+4)& (0+255),c
  2553  000734  6A19               	clrf	(??_SetupMode+5)& (0+255),c
  2554  000736  5016               	movf	(??_SetupMode+2)& (0+255),w,c
  2555  000738  0214               	mulwf	??_SetupMode& (0+255),c
  2556  00073A  CFF3 F01A          	movff	prodl,??_SetupMode+6
  2557  00073E  CFF4 F01B          	movff	prodh,??_SetupMode+7
  2558  000742  6A1C               	clrf	(??_SetupMode+8)& (0+255),c
  2559  000744  6A1D               	clrf	(??_SetupMode+9)& (0+255),c
  2560  000746  0215               	mulwf	(??_SetupMode+1)& (0+255),c
  2561  000748  50F3               	movf	prodl,w,c
  2562  00074A  261B               	addwf	(??_SetupMode+7)& (0+255),f,c
  2563  00074C  50F4               	movf	prodh,w,c
  2564  00074E  221C               	addwfc	(??_SetupMode+8)& (0+255),f,c
  2565  000750  0E00               	movlw	0
  2566  000752  221D               	addwfc	(??_SetupMode+9)& (0+255),f,c
  2567  000754  5017               	movf	(??_SetupMode+3)& (0+255),w,c
  2568  000756  0214               	mulwf	??_SetupMode& (0+255),c
  2569  000758  50F3               	movf	prodl,w,c
  2570  00075A  261B               	addwf	(??_SetupMode+7)& (0+255),f,c
  2571  00075C  50F4               	movf	prodh,w,c
  2572  00075E  221C               	addwfc	(??_SetupMode+8)& (0+255),f,c
  2573  000760  0E00               	movlw	0
  2574  000762  221D               	addwfc	(??_SetupMode+9)& (0+255),f,c
  2575  000764  5017               	movf	(??_SetupMode+3)& (0+255),w,c
  2576  000766  0215               	mulwf	(??_SetupMode+1)& (0+255),c
  2577  000768  50F3               	movf	prodl,w,c
  2578  00076A  261C               	addwf	(??_SetupMode+8)& (0+255),f,c
  2579  00076C  50F4               	movf	prodh,w,c
  2580  00076E  221D               	addwfc	(??_SetupMode+9)& (0+255),f,c
  2581  000770  5018               	movf	(??_SetupMode+4)& (0+255),w,c
  2582  000772  0214               	mulwf	??_SetupMode& (0+255),c
  2583  000774  50F3               	movf	prodl,w,c
  2584  000776  261C               	addwf	(??_SetupMode+8)& (0+255),f,c
  2585  000778  50F4               	movf	prodh,w,c
  2586  00077A  221D               	addwfc	(??_SetupMode+9)& (0+255),f,c
  2587  00077C  5018               	movf	(??_SetupMode+4)& (0+255),w,c
  2588  00077E  0215               	mulwf	(??_SetupMode+1)& (0+255),c
  2589  000780  50F3               	movf	prodl,w,c
  2590  000782  261D               	addwf	(??_SetupMode+9)& (0+255),f,c
  2591  000784  5019               	movf	(??_SetupMode+5)& (0+255),w,c
  2592  000786  0214               	mulwf	??_SetupMode& (0+255),c
  2593  000788  50F3               	movf	prodl,w,c
  2594  00078A  261D               	addwf	(??_SetupMode+9)& (0+255),f,c
  2595  00078C  C01A  F005         	movff	??_SetupMode+6,___lldiv@dividend
  2596  000790  C01B  F006         	movff	??_SetupMode+7,___lldiv@dividend+1
  2597  000794  C01C  F007         	movff	??_SetupMode+8,___lldiv@dividend+2
  2598  000798  C01D  F008         	movff	??_SetupMode+9,___lldiv@dividend+3
  2599  00079C  0E66               	movlw	102
  2600  00079E  6E09               	movwf	___lldiv@divisor,c
  2601  0007A0  0E03               	movlw	3
  2602  0007A2  6E0A               	movwf	___lldiv@divisor+1,c
  2603  0007A4  6A0B               	clrf	___lldiv@divisor+2,c
  2604  0007A6  6A0C               	clrf	___lldiv@divisor+3,c
  2605  0007A8  ECCD  F00D         	call	___lldiv	;wreg free
  2606  0007AC  2805               	incf	?___lldiv,w,c
  2607  0007AE  6E20               	movwf	SetupMode@rW,c
  2608  0007B0  0E00               	movlw	0
  2609  0007B2  2006               	addwfc	?___lldiv+1,w,c
  2610  0007B4  6E21               	movwf	SetupMode@rW+1,c
  2611                           
  2612                           ; BSR set to: 0
  2613                           ;nextion.h: 210: lW = (unsigned int)(((unsigned long)lpferrP * (unsigned long)lpferrP) /
      +                           (unsigned long)870) + 1;
  2614  0007B6  C0DD  F014         	movff	_lpferrP,??_SetupMode	;volatile
  2615  0007BA  C0DE  F015         	movff	_lpferrP+1,??_SetupMode+1	;volatile
  2616  0007BE  51DD               	movf	_lpferrP& (0+255),w,b	;volatile
  2617  0007C0  6E16               	movwf	(??_SetupMode+2)& (0+255),c
  2618  0007C2  51DE               	movf	(_lpferrP+1)& (0+255),w,b	;volatile
  2619  0007C4  6E17               	movwf	(??_SetupMode+3)& (0+255),c
  2620  0007C6  6A18               	clrf	(??_SetupMode+4)& (0+255),c
  2621  0007C8  6A19               	clrf	(??_SetupMode+5)& (0+255),c
  2622  0007CA  5016               	movf	(??_SetupMode+2)& (0+255),w,c
  2623  0007CC  0214               	mulwf	??_SetupMode& (0+255),c
  2624  0007CE  CFF3 F01A          	movff	prodl,??_SetupMode+6
  2625  0007D2  CFF4 F01B          	movff	prodh,??_SetupMode+7
  2626  0007D6  6A1C               	clrf	(??_SetupMode+8)& (0+255),c
  2627  0007D8  6A1D               	clrf	(??_SetupMode+9)& (0+255),c
  2628  0007DA  0215               	mulwf	(??_SetupMode+1)& (0+255),c
  2629  0007DC  50F3               	movf	prodl,w,c
  2630  0007DE  261B               	addwf	(??_SetupMode+7)& (0+255),f,c
  2631  0007E0  50F4               	movf	prodh,w,c
  2632  0007E2  221C               	addwfc	(??_SetupMode+8)& (0+255),f,c
  2633  0007E4  0E00               	movlw	0
  2634  0007E6  221D               	addwfc	(??_SetupMode+9)& (0+255),f,c
  2635  0007E8  5017               	movf	(??_SetupMode+3)& (0+255),w,c
  2636  0007EA  0214               	mulwf	??_SetupMode& (0+255),c
  2637  0007EC  50F3               	movf	prodl,w,c
  2638  0007EE  261B               	addwf	(??_SetupMode+7)& (0+255),f,c
  2639  0007F0  50F4               	movf	prodh,w,c
  2640  0007F2  221C               	addwfc	(??_SetupMode+8)& (0+255),f,c
  2641  0007F4  0E00               	movlw	0
  2642  0007F6  221D               	addwfc	(??_SetupMode+9)& (0+255),f,c
  2643  0007F8  5017               	movf	(??_SetupMode+3)& (0+255),w,c
  2644  0007FA  0215               	mulwf	(??_SetupMode+1)& (0+255),c
  2645  0007FC  50F3               	movf	prodl,w,c
  2646  0007FE  261C               	addwf	(??_SetupMode+8)& (0+255),f,c
  2647  000800  50F4               	movf	prodh,w,c
  2648  000802  221D               	addwfc	(??_SetupMode+9)& (0+255),f,c
  2649  000804  5018               	movf	(??_SetupMode+4)& (0+255),w,c
  2650  000806  0214               	mulwf	??_SetupMode& (0+255),c
  2651  000808  50F3               	movf	prodl,w,c
  2652  00080A  261C               	addwf	(??_SetupMode+8)& (0+255),f,c
  2653  00080C  50F4               	movf	prodh,w,c
  2654  00080E  221D               	addwfc	(??_SetupMode+9)& (0+255),f,c
  2655  000810  5018               	movf	(??_SetupMode+4)& (0+255),w,c
  2656  000812  0215               	mulwf	(??_SetupMode+1)& (0+255),c
  2657  000814  50F3               	movf	prodl,w,c
  2658  000816  261D               	addwf	(??_SetupMode+9)& (0+255),f,c
  2659  000818  5019               	movf	(??_SetupMode+5)& (0+255),w,c
  2660  00081A  0214               	mulwf	??_SetupMode& (0+255),c
  2661  00081C  50F3               	movf	prodl,w,c
  2662  00081E  261D               	addwf	(??_SetupMode+9)& (0+255),f,c
  2663  000820  C01A  F005         	movff	??_SetupMode+6,___lldiv@dividend
  2664  000824  C01B  F006         	movff	??_SetupMode+7,___lldiv@dividend+1
  2665  000828  C01C  F007         	movff	??_SetupMode+8,___lldiv@dividend+2
  2666  00082C  C01D  F008         	movff	??_SetupMode+9,___lldiv@dividend+3
  2667  000830  0E66               	movlw	102
  2668  000832  6E09               	movwf	___lldiv@divisor,c
  2669  000834  0E03               	movlw	3
  2670  000836  6E0A               	movwf	___lldiv@divisor+1,c
  2671  000838  6A0B               	clrf	___lldiv@divisor+2,c
  2672  00083A  6A0C               	clrf	___lldiv@divisor+3,c
  2673  00083C  ECCD  F00D         	call	___lldiv	;wreg free
  2674  000840  2805               	incf	?___lldiv,w,c
  2675  000842  6E22               	movwf	SetupMode@lW,c
  2676  000844  0E00               	movlw	0
  2677  000846  2006               	addwfc	?___lldiv+1,w,c
  2678  000848  6E23               	movwf	SetupMode@lW+1,c
  2679                           
  2680                           ; BSR set to: 0
  2681                           ;nextion.h: 212: CreateBuffTX("mfrw", pW); SendUSART();
  2682  00084A  0E45               	movlw	low STR_5
  2683  00084C  6E0C               	movwf	CreateBuffTX@str,c
  2684  00084E  C01E  F00D         	movff	SetupMode@pW,CreateBuffTX@data
  2685  000852  C01F  F00E         	movff	SetupMode@pW+1,CreateBuffTX@data+1
  2686  000856  6A0F               	clrf	CreateBuffTX@data+2,c
  2687  000858  6A10               	clrf	CreateBuffTX@data+3,c
  2688  00085A  EC82  F00D         	call	_CreateBuffTX	;wreg free
  2689  00085E  EC30  F011         	call	_SendUSART	;wreg free
  2690                           
  2691                           ;nextion.h: 213: CreateBuffTX("mref", rW); SendUSART();
  2692  000862  0E27               	movlw	low STR_6
  2693  000864  6E0C               	movwf	CreateBuffTX@str,c
  2694  000866  C020  F00D         	movff	SetupMode@rW,CreateBuffTX@data
  2695  00086A  C021  F00E         	movff	SetupMode@rW+1,CreateBuffTX@data+1
  2696  00086E  6A0F               	clrf	CreateBuffTX@data+2,c
  2697  000870  6A10               	clrf	CreateBuffTX@data+3,c
  2698  000872  EC82  F00D         	call	_CreateBuffTX	;wreg free
  2699  000876  EC30  F011         	call	_SendUSART	;wreg free
  2700                           
  2701                           ;nextion.h: 214: CreateBuffTX("mcur", max_curr); SendUSART();
  2702  00087A  0E3B               	movlw	low STR_7
  2703  00087C  6E0C               	movwf	CreateBuffTX@str,c
  2704  00087E  C0E3  F00D         	movff	_max_curr,CreateBuffTX@data	;volatile
  2705  000882  C0E4  F00E         	movff	_max_curr+1,CreateBuffTX@data+1	;volatile
  2706  000886  6A0F               	clrf	CreateBuffTX@data+2,c
  2707  000888  6A10               	clrf	CreateBuffTX@data+3,c
  2708  00088A  EC82  F00D         	call	_CreateBuffTX	;wreg free
  2709  00088E  EC30  F011         	call	_SendUSART	;wreg free
  2710                           
  2711                           ;nextion.h: 215: CreateBuffTX("mvol", max_volt); SendUSART();
  2712  000892  0E36               	movlw	low STR_8
  2713  000894  6E0C               	movwf	CreateBuffTX@str,c
  2714  000896  C0E5  F00D         	movff	_max_volt,CreateBuffTX@data	;volatile
  2715  00089A  C0E6  F00E         	movff	_max_volt+1,CreateBuffTX@data+1	;volatile
  2716  00089E  6A0F               	clrf	CreateBuffTX@data+2,c
  2717  0008A0  6A10               	clrf	CreateBuffTX@data+3,c
  2718  0008A2  EC82  F00D         	call	_CreateBuffTX	;wreg free
  2719  0008A6  EC30  F011         	call	_SendUSART	;wreg free
  2720                           
  2721                           ;nextion.h: 216: CreateBuffTX("mlp", lW); SendUSART();
  2722  0008AA  0E6E               	movlw	low STR_9
  2723  0008AC  6E0C               	movwf	CreateBuffTX@str,c
  2724  0008AE  C022  F00D         	movff	SetupMode@lW,CreateBuffTX@data
  2725  0008B2  C023  F00E         	movff	SetupMode@lW+1,CreateBuffTX@data+1
  2726  0008B6  6A0F               	clrf	CreateBuffTX@data+2,c
  2727  0008B8  6A10               	clrf	CreateBuffTX@data+3,c
  2728  0008BA  EC82  F00D         	call	_CreateBuffTX	;wreg free
  2729  0008BE  EC30  F011         	call	_SendUSART	;wreg free
  2730                           
  2731                           ;nextion.h: 217: CreateBuffTX("mlc", lpferrC); SendUSART();
  2732  0008C2  0E52               	movlw	low STR_10
  2733  0008C4  6E0C               	movwf	CreateBuffTX@str,c
  2734  0008C6  C0DB  F00D         	movff	_lpferrC,CreateBuffTX@data	;volatile
  2735  0008CA  C0DC  F00E         	movff	_lpferrC+1,CreateBuffTX@data+1	;volatile
  2736  0008CE  6A0F               	clrf	CreateBuffTX@data+2,c
  2737  0008D0  6A10               	clrf	CreateBuffTX@data+3,c
  2738  0008D2  EC82  F00D         	call	_CreateBuffTX	;wreg free
  2739  0008D6  EC30  F011         	call	_SendUSART	;wreg free
  2740                           
  2741                           ;nextion.h: 218: CreateBuffTX("mrt", lpferrR/10); SendUSART();
  2742  0008DA  0E82               	movlw	low STR_11
  2743  0008DC  6E0C               	movwf	CreateBuffTX@str,c
  2744  0008DE  C0D9  F005         	movff	_lpferrR,___lwdiv@dividend	;volatile
  2745  0008E2  C0DA  F006         	movff	_lpferrR+1,___lwdiv@dividend+1	;volatile
  2746  0008E6  6A08               	clrf	___lwdiv@divisor+1,c
  2747  0008E8  0E0A               	movlw	10
  2748  0008EA  6E07               	movwf	___lwdiv@divisor,c
  2749  0008EC  ECE5  F00E         	call	___lwdiv	;wreg free
  2750  0008F0  C005  F00D         	movff	?___lwdiv,CreateBuffTX@data
  2751  0008F4  C006  F00E         	movff	?___lwdiv+1,CreateBuffTX@data+1
  2752  0008F8  6A0F               	clrf	CreateBuffTX@data+2,c
  2753  0008FA  6A10               	clrf	CreateBuffTX@data+3,c
  2754  0008FC  EC82  F00D         	call	_CreateBuffTX	;wreg free
  2755  000900  EC30  F011         	call	_SendUSART	;wreg free
  2756                           
  2757                           ;nextion.h: 219: CreateBuffTX("mhe", ptt_hold); SendUSART();
  2758  000904  0E5E               	movlw	low STR_12
  2759  000906  6E0C               	movwf	CreateBuffTX@str,c
  2760  000908  0100               	movlb	0	; () banked
  2761  00090A  51EB               	movf	_ptt_hold& (0+255),w,b	;volatile
  2762  00090C  6E0D               	movwf	CreateBuffTX@data,c
  2763  00090E  6A0E               	clrf	CreateBuffTX@data+1,c
  2764  000910  6A0F               	clrf	CreateBuffTX@data+2,c
  2765  000912  6A10               	clrf	CreateBuffTX@data+3,c
  2766  000914  EC82  F00D         	call	_CreateBuffTX	;wreg free
  2767  000918  EC30  F011         	call	_SendUSART	;wreg free
  2768                           
  2769                           ;nextion.h: 220: CreateBuffTX("mtp", max_temp); SendUSART();
  2770  00091C  0E72               	movlw	low STR_13
  2771  00091E  6E0C               	movwf	CreateBuffTX@str,c
  2772  000920  C0E1  F00D         	movff	_max_temp,CreateBuffTX@data	;volatile
  2773  000924  C0E2  F00E         	movff	_max_temp+1,CreateBuffTX@data+1	;volatile
  2774  000928  6A0F               	clrf	CreateBuffTX@data+2,c
  2775  00092A  6A10               	clrf	CreateBuffTX@data+3,c
  2776  00092C  EC82  F00D         	call	_CreateBuffTX	;wreg free
  2777  000930  EC30  F011         	call	_SendUSART	;wreg free
  2778                           
  2779                           ;nextion.h: 221: CreateBuffTX("mtf", max_tFAN); SendUSART();
  2780  000934  0E62               	movlw	low STR_14
  2781  000936  6E0C               	movwf	CreateBuffTX@str,c
  2782  000938  C0DF  F00D         	movff	_max_tFAN,CreateBuffTX@data	;volatile
  2783  00093C  C0E0  F00E         	movff	_max_tFAN+1,CreateBuffTX@data+1	;volatile
  2784  000940  6A0F               	clrf	CreateBuffTX@data+2,c
  2785  000942  6A10               	clrf	CreateBuffTX@data+3,c
  2786  000944  EC82  F00D         	call	_CreateBuffTX	;wreg free
  2787  000948  EC30  F011         	call	_SendUSART	;wreg free
  2788                           
  2789                           ;nextion.h: 222: CreateBuffTX("mtph", hystT); SendUSART();
  2790  00094C  0E31               	movlw	low STR_15
  2791  00094E  6E0C               	movwf	CreateBuffTX@str,c
  2792  000950  0100               	movlb	0	; () banked
  2793  000952  51F0               	movf	_hystT& (0+255),w,b	;volatile
  2794  000954  6E0D               	movwf	CreateBuffTX@data,c
  2795  000956  6A0E               	clrf	CreateBuffTX@data+1,c
  2796  000958  6A0F               	clrf	CreateBuffTX@data+2,c
  2797  00095A  6A10               	clrf	CreateBuffTX@data+3,c
  2798  00095C  EC82  F00D         	call	_CreateBuffTX	;wreg free
  2799  000960  EC30  F011         	call	_SendUSART	;wreg free
  2800                           
  2801                           ;nextion.h: 223: CreateBuffTX("mtfh", hystF); SendUSART();
  2802  000964  0E2C               	movlw	low STR_16
  2803  000966  6E0C               	movwf	CreateBuffTX@str,c
  2804  000968  0100               	movlb	0	; () banked
  2805  00096A  51EF               	movf	_hystF& (0+255),w,b	;volatile
  2806  00096C  6E0D               	movwf	CreateBuffTX@data,c
  2807  00096E  6A0E               	clrf	CreateBuffTX@data+1,c
  2808  000970  6A0F               	clrf	CreateBuffTX@data+2,c
  2809  000972  6A10               	clrf	CreateBuffTX@data+3,c
  2810  000974  EC82  F00D         	call	_CreateBuffTX	;wreg free
  2811  000978  EC30  F011         	call	_SendUSART	;wreg free
  2812                           
  2813                           ;nextion.h: 224: CreateBuffTX("mrd", reldel); SendUSART();
  2814  00097C  0E5A               	movlw	low STR_17
  2815  00097E  6E0C               	movwf	CreateBuffTX@str,c
  2816  000980  0100               	movlb	0	; () banked
  2817  000982  51F4               	movf	_reldel& (0+255),w,b	;volatile
  2818  000984  6E0D               	movwf	CreateBuffTX@data,c
  2819  000986  6A0E               	clrf	CreateBuffTX@data+1,c
  2820  000988  6A0F               	clrf	CreateBuffTX@data+2,c
  2821  00098A  6A10               	clrf	CreateBuffTX@data+3,c
  2822  00098C  EC82  F00D         	call	_CreateBuffTX	;wreg free
  2823  000990  EC30  F011         	call	_SendUSART	;wreg free
  2824                           
  2825                           ;nextion.h: 225: CreateBuffTX("mbd", biasdel); SendUSART();
  2826  000994  0E56               	movlw	low STR_18
  2827  000996  6E0C               	movwf	CreateBuffTX@str,c
  2828  000998  0100               	movlb	0	; () banked
  2829  00099A  51F3               	movf	_biasdel& (0+255),w,b	;volatile
  2830  00099C  6E0D               	movwf	CreateBuffTX@data,c
  2831  00099E  6A0E               	clrf	CreateBuffTX@data+1,c
  2832  0009A0  6A0F               	clrf	CreateBuffTX@data+2,c
  2833  0009A2  6A10               	clrf	CreateBuffTX@data+3,c
  2834  0009A4  EC82  F00D         	call	_CreateBuffTX	;wreg free
  2835  0009A8  EC30  F011         	call	_SendUSART	;wreg free
  2836                           
  2837                           ;nextion.h: 226: CreateBuffTX("mptt", fanptt); SendUSART();
  2838  0009AC  0E40               	movlw	low STR_19
  2839  0009AE  6E0C               	movwf	CreateBuffTX@str,c
  2840  0009B0  0100               	movlb	0	; () banked
  2841  0009B2  51F2               	movf	_fanptt& (0+255),w,b	;volatile
  2842  0009B4  6E0D               	movwf	CreateBuffTX@data,c
  2843  0009B6  6A0E               	clrf	CreateBuffTX@data+1,c
  2844  0009B8  6A0F               	clrf	CreateBuffTX@data+2,c
  2845  0009BA  6A10               	clrf	CreateBuffTX@data+3,c
  2846  0009BC  EC82  F00D         	call	_CreateBuffTX	;wreg free
  2847  0009C0  EC30  F011         	call	_SendUSART	;wreg free
  2848                           
  2849                           ;nextion.h: 227: CreateBuffTX("mbp", beeper); SendUSART();
  2850  0009C4  0E6A               	movlw	low STR_20
  2851  0009C6  6E0C               	movwf	CreateBuffTX@str,c
  2852  0009C8  0100               	movlb	0	; () banked
  2853  0009CA  51EE               	movf	_beeper& (0+255),w,b	;volatile
  2854  0009CC  6E0D               	movwf	CreateBuffTX@data,c
  2855  0009CE  6A0E               	clrf	CreateBuffTX@data+1,c
  2856  0009D0  6A0F               	clrf	CreateBuffTX@data+2,c
  2857  0009D2  6A10               	clrf	CreateBuffTX@data+3,c
  2858  0009D4  EC82  F00D         	call	_CreateBuffTX	;wreg free
  2859  0009D8  EC30  F011         	call	_SendUSART	;wreg free
  2860                           
  2861                           ;nextion.h: 228: CreateBuffTX("mts", sensor); SendUSART();
  2862  0009DC  0E7E               	movlw	low STR_21
  2863  0009DE  6E0C               	movwf	CreateBuffTX@str,c
  2864  0009E0  0100               	movlb	0	; () banked
  2865  0009E2  51EC               	movf	_sensor& (0+255),w,b	;volatile
  2866  0009E4  6E0D               	movwf	CreateBuffTX@data,c
  2867  0009E6  6A0E               	clrf	CreateBuffTX@data+1,c
  2868  0009E8  6A0F               	clrf	CreateBuffTX@data+2,c
  2869  0009EA  6A10               	clrf	CreateBuffTX@data+3,c
  2870  0009EC  EC82  F00D         	call	_CreateBuffTX	;wreg free
  2871  0009F0  EC30  F011         	call	_SendUSART	;wreg free
  2872                           
  2873                           ;nextion.h: 229: CreateBuffTX("mlg", logo); SendUSART();
  2874  0009F4  0E66               	movlw	low STR_22
  2875  0009F6  6E0C               	movwf	CreateBuffTX@str,c
  2876  0009F8  0100               	movlb	0	; () banked
  2877  0009FA  51ED               	movf	_logo& (0+255),w,b	;volatile
  2878  0009FC  6E0D               	movwf	CreateBuffTX@data,c
  2879  0009FE  6A0E               	clrf	CreateBuffTX@data+1,c
  2880  000A00  6A0F               	clrf	CreateBuffTX@data+2,c
  2881  000A02  6A10               	clrf	CreateBuffTX@data+3,c
  2882  000A04  EC82  F00D         	call	_CreateBuffTX	;wreg free
  2883  000A08  EC30  F011         	call	_SendUSART	;wreg free
  2884                           
  2885                           ;nextion.h: 231: if (!LCDpageSelect(0xA2)) return;
  2886  000A0C  0EA2               	movlw	162
  2887  000A0E  EC4B  F00E         	call	_LCDpageSelect
  2888  000A12  0900               	iorlw	0
  2889  000A14  D028               	goto	L1
  2890  000A16                     l3464:
  2891                           
  2892                           ;nextion.h: 233: RXrestart();
  2893  000A16  EC54  F010         	call	_RXrestart	;wreg free
  2894  000A1A                     l529:
  2895                           
  2896                           ; BSR set to: 0
  2897  000A1A  0004               	clrwdt		;# 
  2898                           
  2899                           ;nextion.h: 237: if (rx_end)
  2900  000A1C  0100               	movlb	0	; () banked
  2901  000A1E  5186               	movf	_rx_end& (0+255),w,b	;volatile
  2902  000A20  E0FC               	bz	l529
  2903                           
  2904                           ; BSR set to: 0
  2905                           ;nextion.h: 238: {;nextion.h: 240: if ((buffRX[0] >= 0xB0) && (buffRX[0] < 0xEE))
  2906  000A22  0EAF               	movlw	175
  2907  000A24  65CF               	cpfsgt	_buffRX& (0+255),b	;volatile
  2908  000A26  D018               	goto	l3480
  2909                           
  2910                           ; BSR set to: 0
  2911  000A28  0EEE               	movlw	238
  2912  000A2A  61CF               	cpfslt	_buffRX& (0+255),b	;volatile
  2913  000A2C  D015               	goto	l3480
  2914                           
  2915                           ; BSR set to: 0
  2916                           ;nextion.h: 241: {;nextion.h: 242: eadr = buffRX[0] - 0xB0;
  2917  000A2E  51CF               	movf	_buffRX& (0+255),w,b	;volatile
  2918  000A30  0F50               	addlw	80
  2919  000A32  6E24               	movwf	SetupMode@eadr,c
  2920                           
  2921                           ;nextion.h: 243: if (buffRX[1] == 0x1) writeEEPROM(eadr, buffRX[2]);
  2922  000A34  05D0               	decf	(_buffRX+1)& (0+255),w,b	;volatile
  2923  000A36  E105               	bnz	l3476
  2924                           
  2925                           ; BSR set to: 0
  2926  000A38  C0D1  F005         	movff	_buffRX+2,writeEEPROM@data	;volatile
  2927  000A3C  5024               	movf	SetupMode@eadr,w,c
  2928  000A3E  ECD7  F00F         	call	_writeEEPROM
  2929  000A42                     l3476:
  2930                           
  2931                           ;nextion.h: 244: if (buffRX[1] == 0x2) writeEEPROM16(eadr, (unsigned char *)&buffRX[2]);
  2932  000A42  0E02               	movlw	2
  2933  000A44  0100               	movlb	0	; () banked
  2934  000A46  19D0               	xorwf	(_buffRX+1)& (0+255),w,b	;volatile
  2935  000A48  E107               	bnz	l3480
  2936                           
  2937                           ; BSR set to: 0
  2938  000A4A  C024  F008         	movff	SetupMode@eadr,writeEEPROM16@addr
  2939  000A4E  6A09               	clrf	writeEEPROM16@addr+1,c
  2940  000A50  0ED1               	movlw	low (_buffRX+2)
  2941  000A52  6E0A               	movwf	writeEEPROM16@data,c
  2942  000A54  ECBB  F010         	call	_writeEEPROM16	;wreg free
  2943  000A58                     l3480:
  2944  000A58  FFFF               	dw	65535	; assembler added errata NOP
  2945                           
  2946                           ;nextion.h: 245: };nextion.h: 247: if ((buffRX[0] == 0xF0) && (buffRX[1] == 0xF0)) break
      +                          ;
  2947  000A5A  0EF0               	movlw	240
  2948  000A5C  0100               	movlb	0	; () banked
  2949  000A5E  19CF               	xorwf	_buffRX& (0+255),w,b	;volatile
  2950  000A60  E1DA               	bnz	l3464
  2951                           
  2952                           ; BSR set to: 0
  2953  000A62  0EF0               	movlw	240
  2954  000A64  19D0               	xorwf	(_buffRX+1)& (0+255),w,b	;volatile
  2955  000A66                     L1:
  2956  000A66  FFFF               	dw	65535	; assembler added errata NOP
  2957  000A68  E1D6               	bnz	l3464
  2958  000A6A  0012               	return		;funcret
  2959  000A6C  FFFF               	dw	65535	; errata NOP
  2960  000A6E                     __end_of_SetupMode:
  2961                           	opt stack 0
  2962                           stkptr	equ	0xFFC
  2963                           tblptru	equ	0xFF8
  2964                           tblptrh	equ	0xFF7
  2965                           tblptrl	equ	0xFF6
  2966                           tablat	equ	0xFF5
  2967                           prodh	equ	0xFF4
  2968                           prodl	equ	0xFF3
  2969                           intcon	equ	0xFF2
  2970                           intcon2	equ	0xFF1
  2971                           postinc0	equ	0xFEE
  2972                           wreg	equ	0xFE8
  2973                           status	equ	0xFD8
  2974                           
  2975 ;; *************** function _writeEEPROM16 *****************
  2976 ;; Defined at:
  2977 ;;		line 39 in file "../eep.h"
  2978 ;; Parameters:    Size  Location     Type
  2979 ;;  addr            2    7[COMRAM] unsigned int 
  2980 ;;  data            1    9[COMRAM] PTR unsigned char 
  2981 ;;		 -> buffRX(10), 
  2982 ;; Auto vars:     Size  Location     Type
  2983 ;;		None
  2984 ;; Return value:  Size  Location     Type
  2985 ;;                  1    wreg      void 
  2986 ;; Registers used:
  2987 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  2988 ;; Tracked objects:
  2989 ;;		On entry : 3F/0
  2990 ;;		On exit  : 0/0
  2991 ;;		Unchanged: 0/0
  2992 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2993 ;;      Params:         3       0       0       0       0       0       0
  2994 ;;      Locals:         0       0       0       0       0       0       0
  2995 ;;      Temps:          0       0       0       0       0       0       0
  2996 ;;      Totals:         3       0       0       0       0       0       0
  2997 ;;Total ram usage:        3 bytes
  2998 ;; Hardware stack levels used:    1
  2999 ;; Hardware stack levels required when called:    4
  3000 ;; This function calls:
  3001 ;;		_writeEEPROM
  3002 ;; This function is called by:
  3003 ;;		_SetupMode
  3004 ;; This function uses a non-reentrant model
  3005 ;;
  3006                           
  3007                           	psect	text8
  3008  002176                     __ptext8:
  3009                           	opt stack 0
  3010  002176                     _writeEEPROM16:
  3011                           	opt stack 0
  3012  002176  FFFF               	dw	65535	; assembler added errata NOP
  3013                           
  3014                           ; BSR set to: 0
  3015                           ;eep.h: 41: writeEEPROM(addr+0, data[0]);
  3016                           
  3017                           ;incstack = 0
  3018  002178  500A               	movf	writeEEPROM16@data,w,c
  3019  00217A  6ED9               	movwf	fsr2l,c
  3020  00217C  6ADA               	clrf	fsr2h,c
  3021  00217E  50DF               	movf	indf2,w,c
  3022  002180  6E05               	movwf	writeEEPROM@data,c
  3023  002182  5008               	movf	writeEEPROM16@addr,w,c
  3024  002184  ECD7  F00F         	call	_writeEEPROM
  3025                           
  3026                           ;eep.h: 42: writeEEPROM(addr+1, data[1]);
  3027  002188  500A               	movf	writeEEPROM16@data,w,c
  3028  00218A  6ED9               	movwf	fsr2l,c
  3029  00218C  6ADA               	clrf	fsr2h,c
  3030  00218E  2AD9               	incf	fsr2l,f,c
  3031  002190  50DF               	movf	indf2,w,c
  3032  002192  6E05               	movwf	writeEEPROM@data,c
  3033  002194  2808               	incf	writeEEPROM16@addr,w,c
  3034  002196  EFD7  F00F         	goto	_writeEEPROM
  3035  00219A  FFFF               	dw	65535	; errata NOP
  3036  00219C                     __end_of_writeEEPROM16:
  3037                           	opt stack 0
  3038                           stkptr	equ	0xFFC
  3039                           tblptru	equ	0xFF8
  3040                           tblptrh	equ	0xFF7
  3041                           tblptrl	equ	0xFF6
  3042                           tablat	equ	0xFF5
  3043                           prodh	equ	0xFF4
  3044                           prodl	equ	0xFF3
  3045                           intcon	equ	0xFF2
  3046                           intcon2	equ	0xFF1
  3047                           postinc0	equ	0xFEE
  3048                           wreg	equ	0xFE8
  3049                           indf2	equ	0xFDF
  3050                           fsr2h	equ	0xFDA
  3051                           fsr2l	equ	0xFD9
  3052                           status	equ	0xFD8
  3053                           
  3054 ;; *************** function _writeEEPROM *****************
  3055 ;; Defined at:
  3056 ;;		line 14 in file "../eep.h"
  3057 ;; Parameters:    Size  Location     Type
  3058 ;;  address         1    wreg     unsigned char 
  3059 ;;  data            1    4[COMRAM] unsigned char 
  3060 ;; Auto vars:     Size  Location     Type
  3061 ;;  address         1    5[COMRAM] unsigned char 
  3062 ;;  INTCON_SAVE     1    6[COMRAM] unsigned char 
  3063 ;; Return value:  Size  Location     Type
  3064 ;;                  1    wreg      void 
  3065 ;; Registers used:
  3066 ;;		wreg, status,2
  3067 ;; Tracked objects:
  3068 ;;		On entry : 0/0
  3069 ;;		On exit  : 0/0
  3070 ;;		Unchanged: 0/0
  3071 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3072 ;;      Params:         1       0       0       0       0       0       0
  3073 ;;      Locals:         2       0       0       0       0       0       0
  3074 ;;      Temps:          0       0       0       0       0       0       0
  3075 ;;      Totals:         3       0       0       0       0       0       0
  3076 ;;Total ram usage:        3 bytes
  3077 ;; Hardware stack levels used:    1
  3078 ;; Hardware stack levels required when called:    3
  3079 ;; This function calls:
  3080 ;;		Nothing
  3081 ;; This function is called by:
  3082 ;;		_writeEEPROM16
  3083 ;;		_ReadStatusFromLCD
  3084 ;;		_SetupMode
  3085 ;; This function uses a non-reentrant model
  3086 ;;
  3087                           
  3088                           	psect	text9
  3089  001FAE                     __ptext9:
  3090                           	opt stack 0
  3091  001FAE                     _writeEEPROM:
  3092                           	opt stack 0
  3093  001FAE  FFFF               	dw	65535	; assembler added errata NOP
  3094                           
  3095                           ;incstack = 0
  3096                           ;writeEEPROM@address stored from wreg
  3097  001FB0  6E06               	movwf	writeEEPROM@address,c
  3098                           
  3099                           ;eep.h: 16: unsigned char INTCON_SAVE;;eep.h: 18: EEADR = address;
  3100  001FB2  C006  FFA9         	movff	writeEEPROM@address,4009	;volatile
  3101                           
  3102                           ;eep.h: 19: EEDATA = data;
  3103  001FB6  C005  FFA8         	movff	writeEEPROM@data,4008	;volatile
  3104                           
  3105                           ;eep.h: 20: EECON1bits.EEPGD = 0;
  3106  001FBA  9EA6               	bcf	4006,7,c	;volsfr
  3107                           
  3108                           ;eep.h: 21: EECON1bits.WREN = 1;
  3109  001FBC  84A6               	bsf	4006,2,c	;volsfr
  3110                           
  3111                           ;eep.h: 22: INTCON_SAVE = INTCON;
  3112  001FBE  CFF2 F007          	movff	intcon,writeEEPROM@INTCON_SAVE	;volatile
  3113                           
  3114                           ;eep.h: 23: INTCON = 0;
  3115  001FC2  6AF2               	clrf	intcon,c	;volatile
  3116                           
  3117                           ;eep.h: 24: EECON2 = 0x55;
  3118  001FC4  0E55               	movlw	85
  3119  001FC6  6EA7               	movwf	4007,c	;volsfr
  3120                           
  3121                           ;eep.h: 25: EECON2 = 0xAA;
  3122  001FC8  0EAA               	movlw	170
  3123  001FCA  6EA7               	movwf	4007,c	;volsfr
  3124                           
  3125                           ;eep.h: 26: EECON1bits.WR = 1;
  3126  001FCC  82A6               	bsf	4006,1,c	;volsfr
  3127                           
  3128                           ;eep.h: 27: while (EECON1bits.WR) asm("clrwdt");
  3129  001FCE  D002               	goto	l254
  3130  001FD0                     l255:
  3131  001FD0  FFFF               	dw	65535	; assembler added errata NOP
  3132  001FD2  0004               	clrwdt		;# 
  3133  001FD4                     l254:
  3134  001FD4  FFFF               	dw	65535	; assembler added errata NOP
  3135  001FD6  B2A6               	btfsc	4006,1,c	;volsfr
  3136  001FD8  D7FB               	goto	l255
  3137                           
  3138                           ;eep.h: 28: EECON1bits.WREN = 0;
  3139  001FDA  94A6               	bcf	4006,2,c	;volsfr
  3140                           
  3141                           ;eep.h: 29: INTCON = INTCON_SAVE;
  3142  001FDC  C007  FFF2         	movff	writeEEPROM@INTCON_SAVE,intcon	;volatile
  3143  001FE0  0012               	return		;funcret
  3144  001FE2  FFFF               	dw	65535	; errata NOP
  3145  001FE4                     __end_of_writeEEPROM:
  3146                           	opt stack 0
  3147                           stkptr	equ	0xFFC
  3148                           tblptru	equ	0xFF8
  3149                           tblptrh	equ	0xFF7
  3150                           tblptrl	equ	0xFF6
  3151                           tablat	equ	0xFF5
  3152                           prodh	equ	0xFF4
  3153                           prodl	equ	0xFF3
  3154                           intcon	equ	0xFF2
  3155                           intcon2	equ	0xFF1
  3156                           postinc0	equ	0xFEE
  3157                           wreg	equ	0xFE8
  3158                           indf2	equ	0xFDF
  3159                           fsr2h	equ	0xFDA
  3160                           fsr2l	equ	0xFD9
  3161                           status	equ	0xFD8
  3162                           
  3163 ;; *************** function ___lwdiv *****************
  3164 ;; Defined at:
  3165 ;;		line 7 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\lwdiv.c"
  3166 ;; Parameters:    Size  Location     Type
  3167 ;;  dividend        2    4[COMRAM] unsigned int 
  3168 ;;  divisor         2    6[COMRAM] unsigned int 
  3169 ;; Auto vars:     Size  Location     Type
  3170 ;;  quotient        2    8[COMRAM] unsigned int 
  3171 ;;  counter         1   10[COMRAM] unsigned char 
  3172 ;; Return value:  Size  Location     Type
  3173 ;;                  2    4[COMRAM] unsigned int 
  3174 ;; Registers used:
  3175 ;;		wreg, status,2, status,0
  3176 ;; Tracked objects:
  3177 ;;		On entry : 0/0
  3178 ;;		On exit  : 0/0
  3179 ;;		Unchanged: 0/0
  3180 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3181 ;;      Params:         4       0       0       0       0       0       0
  3182 ;;      Locals:         3       0       0       0       0       0       0
  3183 ;;      Temps:          0       0       0       0       0       0       0
  3184 ;;      Totals:         7       0       0       0       0       0       0
  3185 ;;Total ram usage:        7 bytes
  3186 ;; Hardware stack levels used:    1
  3187 ;; Hardware stack levels required when called:    3
  3188 ;; This function calls:
  3189 ;;		Nothing
  3190 ;; This function is called by:
  3191 ;;		_SetupMode
  3192 ;; This function uses a non-reentrant model
  3193 ;;
  3194                           
  3195                           	psect	text10
  3196  001DCA                     __ptext10:
  3197                           	opt stack 0
  3198  001DCA                     ___lwdiv:
  3199                           	opt stack 0
  3200  001DCA  FFFF               	dw	65535	; assembler added errata NOP
  3201                           
  3202                           ;incstack = 0
  3203  001DCC  6A09               	clrf	___lwdiv@quotient,c
  3204  001DCE  6A0A               	clrf	___lwdiv@quotient+1,c
  3205  001DD0  5007               	movf	___lwdiv@divisor,w,c
  3206  001DD2  1008               	iorwf	___lwdiv@divisor+1,w,c
  3207  001DD4  E01E               	bz	l1049
  3208  001DD6  0E01               	movlw	1
  3209  001DD8  6E0B               	movwf	___lwdiv@counter,c
  3210  001DDA  D005               	goto	l3242
  3211  001DDC                     l3240:
  3212  001DDC  FFFF               	dw	65535	; assembler added errata NOP
  3213  001DDE  90D8               	bcf	status,0,c
  3214  001DE0  3607               	rlcf	___lwdiv@divisor,f,c
  3215  001DE2  3608               	rlcf	___lwdiv@divisor+1,f,c
  3216  001DE4  2A0B               	incf	___lwdiv@counter,f,c
  3217  001DE6                     l3242:
  3218  001DE6  FFFF               	dw	65535	; assembler added errata NOP
  3219  001DE8  AE08               	btfss	___lwdiv@divisor+1,7,c
  3220  001DEA  D7F8               	goto	l3240
  3221  001DEC                     u3130:
  3222  001DEC  FFFF               	dw	65535	; assembler added errata NOP
  3223  001DEE  90D8               	bcf	status,0,c
  3224  001DF0  3609               	rlcf	___lwdiv@quotient,f,c
  3225  001DF2  360A               	rlcf	___lwdiv@quotient+1,f,c
  3226  001DF4  5007               	movf	___lwdiv@divisor,w,c
  3227  001DF6  5C05               	subwf	___lwdiv@dividend,w,c
  3228  001DF8  5008               	movf	___lwdiv@divisor+1,w,c
  3229  001DFA  5806               	subwfb	___lwdiv@dividend+1,w,c
  3230  001DFC  E305               	bnc	l3252
  3231  001DFE  5007               	movf	___lwdiv@divisor,w,c
  3232  001E00  5E05               	subwf	___lwdiv@dividend,f,c
  3233  001E02  5008               	movf	___lwdiv@divisor+1,w,c
  3234  001E04  5A06               	subwfb	___lwdiv@dividend+1,f,c
  3235  001E06  8009               	bsf	___lwdiv@quotient,0,c
  3236  001E08                     l3252:
  3237  001E08  90D8               	bcf	status,0,c
  3238  001E0A  3208               	rrcf	___lwdiv@divisor+1,f,c
  3239  001E0C  3207               	rrcf	___lwdiv@divisor,f,c
  3240  001E0E  2E0B               	decfsz	___lwdiv@counter,f,c
  3241  001E10  D7ED               	goto	u3130
  3242  001E12                     l1049:
  3243  001E12  C009  F005         	movff	___lwdiv@quotient,?___lwdiv
  3244  001E16  C00A  F006         	movff	___lwdiv@quotient+1,?___lwdiv+1
  3245  001E1A  0012               	return		;funcret
  3246  001E1C  FFFF               	dw	65535	; errata NOP
  3247  001E1E                     __end_of___lwdiv:
  3248                           	opt stack 0
  3249                           stkptr	equ	0xFFC
  3250                           tblptru	equ	0xFF8
  3251                           tblptrh	equ	0xFF7
  3252                           tblptrl	equ	0xFF6
  3253                           tablat	equ	0xFF5
  3254                           prodh	equ	0xFF4
  3255                           prodl	equ	0xFF3
  3256                           intcon	equ	0xFF2
  3257                           intcon2	equ	0xFF1
  3258                           postinc0	equ	0xFEE
  3259                           wreg	equ	0xFE8
  3260                           indf2	equ	0xFDF
  3261                           fsr2h	equ	0xFDA
  3262                           fsr2l	equ	0xFD9
  3263                           status	equ	0xFD8
  3264                           
  3265 ;; *************** function ___lldiv *****************
  3266 ;; Defined at:
  3267 ;;		line 7 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\__lldiv.c"
  3268 ;; Parameters:    Size  Location     Type
  3269 ;;  dividend        4    4[COMRAM] unsigned long 
  3270 ;;  divisor         4    8[COMRAM] unsigned long 
  3271 ;; Auto vars:     Size  Location     Type
  3272 ;;  quotient        4   12[COMRAM] unsigned long 
  3273 ;;  counter         1   16[COMRAM] unsigned char 
  3274 ;; Return value:  Size  Location     Type
  3275 ;;                  4    4[COMRAM] unsigned long 
  3276 ;; Registers used:
  3277 ;;		wreg, status,2, status,0
  3278 ;; Tracked objects:
  3279 ;;		On entry : 3F/0
  3280 ;;		On exit  : 3F/0
  3281 ;;		Unchanged: 3F/0
  3282 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3283 ;;      Params:         8       0       0       0       0       0       0
  3284 ;;      Locals:         5       0       0       0       0       0       0
  3285 ;;      Temps:          0       0       0       0       0       0       0
  3286 ;;      Totals:        13       0       0       0       0       0       0
  3287 ;;Total ram usage:       13 bytes
  3288 ;; Hardware stack levels used:    1
  3289 ;; Hardware stack levels required when called:    3
  3290 ;; This function calls:
  3291 ;;		Nothing
  3292 ;; This function is called by:
  3293 ;;		_SetupMode
  3294 ;; This function uses a non-reentrant model
  3295 ;;
  3296                           
  3297                           	psect	text11
  3298  001B9A                     __ptext11:
  3299                           	opt stack 0
  3300  001B9A                     ___lldiv:
  3301                           	opt stack 0
  3302  001B9A  FFFF               	dw	65535	; assembler added errata NOP
  3303                           
  3304                           ; BSR set to: 0
  3305                           
  3306                           ;incstack = 0
  3307  001B9C  6A0D               	clrf	___lldiv@quotient,c
  3308  001B9E  6A0E               	clrf	___lldiv@quotient+1,c
  3309  001BA0  6A0F               	clrf	___lldiv@quotient+2,c
  3310  001BA2  6A10               	clrf	___lldiv@quotient+3,c
  3311                           
  3312                           ; BSR set to: 0
  3313  001BA4  5009               	movf	___lldiv@divisor,w,c
  3314  001BA6  100A               	iorwf	___lldiv@divisor+1,w,c
  3315  001BA8  100B               	iorwf	___lldiv@divisor+2,w,c
  3316  001BAA  100C               	iorwf	___lldiv@divisor+3,w,c
  3317  001BAC  E02C               	bz	l602
  3318                           
  3319                           ; BSR set to: 0
  3320  001BAE  0E01               	movlw	1
  3321  001BB0  6E11               	movwf	___lldiv@counter,c
  3322  001BB2  D007               	goto	l3170
  3323  001BB4                     l3168:
  3324  001BB4  FFFF               	dw	65535	; assembler added errata NOP
  3325                           
  3326                           ; BSR set to: 0
  3327  001BB6  90D8               	bcf	status,0,c
  3328  001BB8  3609               	rlcf	___lldiv@divisor,f,c
  3329  001BBA  360A               	rlcf	___lldiv@divisor+1,f,c
  3330  001BBC  360B               	rlcf	___lldiv@divisor+2,f,c
  3331  001BBE  360C               	rlcf	___lldiv@divisor+3,f,c
  3332  001BC0  2A11               	incf	___lldiv@counter,f,c
  3333  001BC2                     l3170:
  3334  001BC2  FFFF               	dw	65535	; assembler added errata NOP
  3335                           
  3336                           ; BSR set to: 0
  3337  001BC4  AE0C               	btfss	___lldiv@divisor+3,7,c
  3338  001BC6  D7F6               	goto	l3168
  3339  001BC8                     u3010:
  3340  001BC8  FFFF               	dw	65535	; assembler added errata NOP
  3341                           
  3342                           ; BSR set to: 0
  3343  001BCA  90D8               	bcf	status,0,c
  3344  001BCC  360D               	rlcf	___lldiv@quotient,f,c
  3345  001BCE  360E               	rlcf	___lldiv@quotient+1,f,c
  3346  001BD0  360F               	rlcf	___lldiv@quotient+2,f,c
  3347  001BD2  3610               	rlcf	___lldiv@quotient+3,f,c
  3348                           
  3349                           ; BSR set to: 0
  3350  001BD4  5009               	movf	___lldiv@divisor,w,c
  3351  001BD6  5C05               	subwf	___lldiv@dividend,w,c
  3352  001BD8  500A               	movf	___lldiv@divisor+1,w,c
  3353  001BDA  5806               	subwfb	___lldiv@dividend+1,w,c
  3354  001BDC  500B               	movf	___lldiv@divisor+2,w,c
  3355  001BDE  5807               	subwfb	___lldiv@dividend+2,w,c
  3356  001BE0  500C               	movf	___lldiv@divisor+3,w,c
  3357  001BE2  5808               	subwfb	___lldiv@dividend+3,w,c
  3358  001BE4  E309               	bnc	l3180
  3359                           
  3360                           ; BSR set to: 0
  3361  001BE6  5009               	movf	___lldiv@divisor,w,c
  3362  001BE8  5E05               	subwf	___lldiv@dividend,f,c
  3363  001BEA  500A               	movf	___lldiv@divisor+1,w,c
  3364  001BEC  5A06               	subwfb	___lldiv@dividend+1,f,c
  3365  001BEE  500B               	movf	___lldiv@divisor+2,w,c
  3366  001BF0  5A07               	subwfb	___lldiv@dividend+2,f,c
  3367  001BF2  500C               	movf	___lldiv@divisor+3,w,c
  3368  001BF4  5A08               	subwfb	___lldiv@dividend+3,f,c
  3369                           
  3370                           ; BSR set to: 0
  3371  001BF6  800D               	bsf	___lldiv@quotient,0,c
  3372  001BF8                     l3180:
  3373                           
  3374                           ; BSR set to: 0
  3375  001BF8  90D8               	bcf	status,0,c
  3376  001BFA  320C               	rrcf	___lldiv@divisor+3,f,c
  3377  001BFC  320B               	rrcf	___lldiv@divisor+2,f,c
  3378  001BFE  320A               	rrcf	___lldiv@divisor+1,f,c
  3379  001C00  3209               	rrcf	___lldiv@divisor,f,c
  3380                           
  3381                           ; BSR set to: 0
  3382  001C02  2E11               	decfsz	___lldiv@counter,f,c
  3383  001C04  D7E1               	goto	u3010
  3384  001C06                     l602:
  3385                           
  3386                           ; BSR set to: 0
  3387  001C06  C00D  F005         	movff	___lldiv@quotient,?___lldiv
  3388  001C0A  C00E  F006         	movff	___lldiv@quotient+1,?___lldiv+1
  3389  001C0E  C00F  F007         	movff	___lldiv@quotient+2,?___lldiv+2
  3390  001C12  C010  F008         	movff	___lldiv@quotient+3,?___lldiv+3
  3391                           
  3392                           ; BSR set to: 0
  3393  001C16  0012               	return		;funcret
  3394  001C18  FFFF               	dw	65535	; errata NOP
  3395  001C1A                     __end_of___lldiv:
  3396                           	opt stack 0
  3397                           stkptr	equ	0xFFC
  3398                           tblptru	equ	0xFF8
  3399                           tblptrh	equ	0xFF7
  3400                           tblptrl	equ	0xFF6
  3401                           tablat	equ	0xFF5
  3402                           prodh	equ	0xFF4
  3403                           prodl	equ	0xFF3
  3404                           intcon	equ	0xFF2
  3405                           intcon2	equ	0xFF1
  3406                           postinc0	equ	0xFEE
  3407                           wreg	equ	0xFE8
  3408                           indf2	equ	0xFDF
  3409                           fsr2h	equ	0xFDA
  3410                           fsr2l	equ	0xFD9
  3411                           status	equ	0xFD8
  3412                           
  3413 ;; *************** function _LCDpageSelect *****************
  3414 ;; Defined at:
  3415 ;;		line 283 in file "../nextion.h"
  3416 ;; Parameters:    Size  Location     Type
  3417 ;;  page            1    wreg     unsigned char 
  3418 ;; Auto vars:     Size  Location     Type
  3419 ;;  page            1   18[COMRAM] unsigned char 
  3420 ;;  tt              1   17[COMRAM] unsigned char 
  3421 ;; Return value:  Size  Location     Type
  3422 ;;                  1    wreg      unsigned char 
  3423 ;; Registers used:
  3424 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  3425 ;; Tracked objects:
  3426 ;;		On entry : 0/0
  3427 ;;		On exit  : 0/0
  3428 ;;		Unchanged: 0/0
  3429 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3430 ;;      Params:         0       0       0       0       0       0       0
  3431 ;;      Locals:         2       0       0       0       0       0       0
  3432 ;;      Temps:          0       0       0       0       0       0       0
  3433 ;;      Totals:         2       0       0       0       0       0       0
  3434 ;;Total ram usage:        2 bytes
  3435 ;; Hardware stack levels used:    1
  3436 ;; Hardware stack levels required when called:    6
  3437 ;; This function calls:
  3438 ;;		_CreateBuffTX
  3439 ;;		_SendUSART
  3440 ;;		_waitAckFromLCD
  3441 ;; This function is called by:
  3442 ;;		_ReadStatusFromLCD
  3443 ;;		_SetupMode
  3444 ;;		_main
  3445 ;; This function uses a non-reentrant model
  3446 ;;
  3447                           
  3448                           	psect	text12
  3449  001C96                     __ptext12:
  3450                           	opt stack 0
  3451  001C96                     _LCDpageSelect:
  3452                           	opt stack 0
  3453  001C96  FFFF               	dw	65535	; assembler added errata NOP
  3454                           
  3455                           ; BSR set to: 0
  3456                           ;incstack = 0
  3457                           ;LCDpageSelect@page stored from wreg
  3458  001C98  6E13               	movwf	LCDpageSelect@page,c
  3459                           
  3460                           ;nextion.h: 285: unsigned char tt = 6;
  3461  001C9A  0E06               	movlw	6
  3462  001C9C  6E12               	movwf	LCDpageSelect@tt,c
  3463                           
  3464                           ;nextion.h: 287: while (tt--)
  3465  001C9E  D029               	goto	l3156
  3466  001CA0                     l3136:
  3467                           
  3468                           ;nextion.h: 288: {;nextion.h: 289: if (page == 0xA0) CreateBuffTX("page main",0xFFFFFF);
  3469  001CA0  0EA0               	movlw	160
  3470  001CA2  1813               	xorwf	LCDpageSelect@page,w,c
  3471  001CA4  E108               	bnz	l3140
  3472  001CA6  0E01               	movlw	low STR_23
  3473  001CA8  6E0C               	movwf	CreateBuffTX@str,c
  3474  001CAA  680D               	setf	CreateBuffTX@data,c
  3475  001CAC  680E               	setf	CreateBuffTX@data+1,c
  3476  001CAE  680F               	setf	CreateBuffTX@data+2,c
  3477  001CB0  6A10               	clrf	CreateBuffTX@data+3,c
  3478  001CB2  EC82  F00D         	call	_CreateBuffTX	;wreg free
  3479  001CB6                     l3140:
  3480                           
  3481                           ;nextion.h: 290: if (page == 0xA1) CreateBuffTX("page logo",0xFFFFFF);
  3482  001CB6  0EA1               	movlw	161
  3483  001CB8  1813               	xorwf	LCDpageSelect@page,w,c
  3484  001CBA  E108               	bnz	l3144
  3485  001CBC  0E0B               	movlw	low STR_24
  3486  001CBE  6E0C               	movwf	CreateBuffTX@str,c
  3487  001CC0  680D               	setf	CreateBuffTX@data,c
  3488  001CC2  680E               	setf	CreateBuffTX@data+1,c
  3489  001CC4  680F               	setf	CreateBuffTX@data+2,c
  3490  001CC6  6A10               	clrf	CreateBuffTX@data+3,c
  3491  001CC8  EC82  F00D         	call	_CreateBuffTX	;wreg free
  3492  001CCC                     l3144:
  3493                           
  3494                           ;nextion.h: 291: if (page == 0xA2) CreateBuffTX("page pass",0xFFFFFF);
  3495  001CCC  0EA2               	movlw	162
  3496  001CCE  1813               	xorwf	LCDpageSelect@page,w,c
  3497  001CD0  E108               	bnz	l3148
  3498  001CD2  0E15               	movlw	low STR_25
  3499  001CD4  6E0C               	movwf	CreateBuffTX@str,c
  3500  001CD6  680D               	setf	CreateBuffTX@data,c
  3501  001CD8  680E               	setf	CreateBuffTX@data+1,c
  3502  001CDA  680F               	setf	CreateBuffTX@data+2,c
  3503  001CDC  6A10               	clrf	CreateBuffTX@data+3,c
  3504  001CDE  EC82  F00D         	call	_CreateBuffTX	;wreg free
  3505  001CE2                     l3148:
  3506                           
  3507                           ;nextion.h: 292: SendUSART();
  3508  001CE2  EC30  F011         	call	_SendUSART	;wreg free
  3509                           
  3510                           ;nextion.h: 294: if (waitAckFromLCD() == page) return(1);
  3511  001CE6  EC0F  F00F         	call	_waitAckFromLCD	;wreg free
  3512  001CEA  1813               	xorwf	LCDpageSelect@page,w,c
  3513  001CEC  E102               	bnz	l3156
  3514                           
  3515                           ; BSR set to: 0
  3516  001CEE  0E01               	movlw	1
  3517  001CF0  D005               	goto	l554
  3518  001CF2                     l3156:
  3519  001CF2  FFFF               	dw	65535	; assembler added errata NOP
  3520  001CF4  0612               	decf	LCDpageSelect@tt,f,c
  3521  001CF6  2812               	incf	LCDpageSelect@tt,w,c
  3522  001CF8  E1D3               	bnz	l3136
  3523                           
  3524                           ;nextion.h: 295: };nextion.h: 296: return(0);
  3525  001CFA  0E00               	movlw	0
  3526  001CFC                     l554:
  3527  001CFC  FFFF               	dw	65535	; assembler added errata NOP
  3528  001CFE  0012               	return		;funcret
  3529  001D00  FFFF               	dw	65535	; errata NOP
  3530  001D02                     __end_of_LCDpageSelect:
  3531                           	opt stack 0
  3532                           stkptr	equ	0xFFC
  3533                           tblptru	equ	0xFF8
  3534                           tblptrh	equ	0xFF7
  3535                           tblptrl	equ	0xFF6
  3536                           tablat	equ	0xFF5
  3537                           prodh	equ	0xFF4
  3538                           prodl	equ	0xFF3
  3539                           intcon	equ	0xFF2
  3540                           intcon2	equ	0xFF1
  3541                           postinc0	equ	0xFEE
  3542                           wreg	equ	0xFE8
  3543                           indf2	equ	0xFDF
  3544                           fsr2h	equ	0xFDA
  3545                           fsr2l	equ	0xFD9
  3546                           status	equ	0xFD8
  3547                           
  3548 ;; *************** function _waitAckFromLCD *****************
  3549 ;; Defined at:
  3550 ;;		line 254 in file "../nextion.h"
  3551 ;; Parameters:    Size  Location     Type
  3552 ;;		None
  3553 ;; Auto vars:     Size  Location     Type
  3554 ;;  ack             1    4[COMRAM] unsigned char 
  3555 ;; Return value:  Size  Location     Type
  3556 ;;                  1    wreg      unsigned char 
  3557 ;; Registers used:
  3558 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  3559 ;; Tracked objects:
  3560 ;;		On entry : 0/0
  3561 ;;		On exit  : 3F/0
  3562 ;;		Unchanged: 0/0
  3563 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3564 ;;      Params:         0       0       0       0       0       0       0
  3565 ;;      Locals:         1       0       0       0       0       0       0
  3566 ;;      Temps:          0       0       0       0       0       0       0
  3567 ;;      Totals:         1       0       0       0       0       0       0
  3568 ;;Total ram usage:        1 bytes
  3569 ;; Hardware stack levels used:    1
  3570 ;; Hardware stack levels required when called:    5
  3571 ;; This function calls:
  3572 ;;		_RXrestart
  3573 ;; This function is called by:
  3574 ;;		_LCDpageSelect
  3575 ;; This function uses a non-reentrant model
  3576 ;;
  3577                           
  3578                           	psect	text13
  3579  001E1E                     __ptext13:
  3580                           	opt stack 0
  3581  001E1E                     _waitAckFromLCD:
  3582                           	opt stack 0
  3583  001E1E  FFFF               	dw	65535	; assembler added errata NOP
  3584                           
  3585                           ;nextion.h: 256: unsigned char ack = 0;
  3586                           
  3587                           ;incstack = 0
  3588  001E20  6A05               	clrf	waitAckFromLCD@ack,c
  3589                           
  3590                           ;nextion.h: 258: RXrestart();
  3591  001E22  EC54  F010         	call	_RXrestart	;wreg free
  3592                           
  3593                           ; BSR set to: 0
  3594                           ;nextion.h: 259: TMR0 = 0;
  3595  001E26  6AD6               	clrf	4054,c	;volatile
  3596  001E28  6AD7               	clrf	4055,c	;volatile
  3597                           
  3598                           ; BSR set to: 0
  3599                           ;nextion.h: 260: T0CON = 0b10000101;
  3600  001E2A  0E85               	movlw	133
  3601  001E2C  6ED5               	movwf	4053,c	;volatile
  3602                           
  3603                           ; BSR set to: 0
  3604                           ;nextion.h: 261: INTCONbits.TMR0IF = 0;
  3605  001E2E  94F2               	bcf	intcon,2,c	;volatile
  3606                           
  3607                           ;nextion.h: 263: while(!INTCONbits.TMR0IF)
  3608  001E30  D017               	goto	l3016
  3609  001E32                     l540:
  3610  001E32  FFFF               	dw	65535	; assembler added errata NOP
  3611                           
  3612                           ; BSR set to: 0
  3613  001E34  0004               	clrwdt		;# 
  3614                           
  3615                           ;nextion.h: 266: if (rx_end)
  3616  001E36  0100               	movlb	0	; () banked
  3617  001E38  5186               	movf	_rx_end& (0+255),w,b	;volatile
  3618  001E3A  E012               	bz	l3016
  3619                           
  3620                           ; BSR set to: 0
  3621                           ;nextion.h: 267: {;nextion.h: 268: if ((buffRX[1] == 0x55) && (buffRX[2] == 0x77))
  3622  001E3C  0E55               	movlw	85
  3623  001E3E  19D0               	xorwf	(_buffRX+1)& (0+255),w,b	;volatile
  3624  001E40  E10C               	bnz	l3014
  3625                           
  3626                           ; BSR set to: 0
  3627  001E42  0E77               	movlw	119
  3628  001E44  19D1               	xorwf	(_buffRX+2)& (0+255),w,b	;volatile
  3629  001E46  E109               	bnz	l3014
  3630                           
  3631                           ; BSR set to: 0
  3632                           ;nextion.h: 269: {;nextion.h: 270: if ((buffRX[0] >= 0xA0) && (buffRX[0] <= 0xA2))
  3633  001E48  0E9F               	movlw	159
  3634  001E4A  65CF               	cpfsgt	_buffRX& (0+255),b	;volatile
  3635  001E4C  D006               	goto	l3014
  3636                           
  3637                           ; BSR set to: 0
  3638  001E4E  0EA3               	movlw	163
  3639  001E50  61CF               	cpfslt	_buffRX& (0+255),b	;volatile
  3640  001E52  D003               	goto	l3014
  3641                           
  3642                           ; BSR set to: 0
  3643                           ;nextion.h: 271: {;nextion.h: 272: ack = buffRX[0];
  3644  001E54  C0CF  F005         	movff	_buffRX,waitAckFromLCD@ack	;volatile
  3645                           
  3646                           ;nextion.h: 273: break;
  3647  001E58  D006               	goto	u2830
  3648  001E5A                     l3014:
  3649  001E5A  FFFF               	dw	65535	; assembler added errata NOP
  3650                           
  3651                           ; BSR set to: 0
  3652                           ;nextion.h: 274: };nextion.h: 275: };nextion.h: 276: RXrestart();
  3653  001E5C  EC54  F010         	call	_RXrestart	;wreg free
  3654  001E60                     l3016:
  3655  001E60  FFFF               	dw	65535	; assembler added errata NOP
  3656                           
  3657                           ; BSR set to: 0
  3658  001E62  A4F2               	btfss	intcon,2,c	;volatile
  3659  001E64  D7E6               	goto	l540
  3660  001E66                     u2830:
  3661  001E66  FFFF               	dw	65535	; assembler added errata NOP
  3662                           
  3663                           ; BSR set to: 0
  3664                           ;nextion.h: 277: };nextion.h: 278: };nextion.h: 279: T0CON = 0b10000000;
  3665  001E68  0E80               	movlw	128
  3666  001E6A  6ED5               	movwf	4053,c	;volatile
  3667                           
  3668                           ;nextion.h: 280: return(ack);
  3669  001E6C  5005               	movf	waitAckFromLCD@ack,w,c
  3670                           
  3671                           ; BSR set to: 0
  3672  001E6E  0012               	return		;funcret
  3673  001E70  FFFF               	dw	65535	; errata NOP
  3674  001E72                     __end_of_waitAckFromLCD:
  3675                           	opt stack 0
  3676                           stkptr	equ	0xFFC
  3677                           tblptru	equ	0xFF8
  3678                           tblptrh	equ	0xFF7
  3679                           tblptrl	equ	0xFF6
  3680                           tablat	equ	0xFF5
  3681                           prodh	equ	0xFF4
  3682                           prodl	equ	0xFF3
  3683                           intcon	equ	0xFF2
  3684                           intcon2	equ	0xFF1
  3685                           postinc0	equ	0xFEE
  3686                           wreg	equ	0xFE8
  3687                           indf2	equ	0xFDF
  3688                           fsr2h	equ	0xFDA
  3689                           fsr2l	equ	0xFD9
  3690                           status	equ	0xFD8
  3691                           
  3692 ;; *************** function _RXrestart *****************
  3693 ;; Defined at:
  3694 ;;		line 17 in file "../usart.h"
  3695 ;; Parameters:    Size  Location     Type
  3696 ;;		None
  3697 ;; Auto vars:     Size  Location     Type
  3698 ;;		None
  3699 ;; Return value:  Size  Location     Type
  3700 ;;                  1    wreg      void 
  3701 ;; Registers used:
  3702 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  3703 ;; Tracked objects:
  3704 ;;		On entry : 0/0
  3705 ;;		On exit  : 3F/0
  3706 ;;		Unchanged: 0/0
  3707 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3708 ;;      Params:         0       0       0       0       0       0       0
  3709 ;;      Locals:         0       0       0       0       0       0       0
  3710 ;;      Temps:          0       0       0       0       0       0       0
  3711 ;;      Totals:         0       0       0       0       0       0       0
  3712 ;;Total ram usage:        0 bytes
  3713 ;; Hardware stack levels used:    1
  3714 ;; Hardware stack levels required when called:    4
  3715 ;; This function calls:
  3716 ;;		_RXstopTIMER
  3717 ;; This function is called by:
  3718 ;;		_ReadStatusFromLCD
  3719 ;;		_SetupMode
  3720 ;;		_waitAckFromLCD
  3721 ;; This function uses a non-reentrant model
  3722 ;;
  3723                           
  3724                           	psect	text14
  3725  0020A8                     __ptext14:
  3726                           	opt stack 0
  3727  0020A8                     _RXrestart:
  3728                           	opt stack 0
  3729  0020A8  FFFF               	dw	65535	; assembler added errata NOP
  3730                           
  3731                           ;usart.h: 19: RXstopTIMER();
  3732                           
  3733                           ; BSR set to: 0
  3734                           ;incstack = 0
  3735  0020AA  EC73  F011         	call	_RXstopTIMER	;wreg free
  3736                           
  3737                           ;usart.h: 20: for (rxb = 0; rxb < (10-1); rxb++) buffRX[rxb] = 0x00;
  3738  0020AE  6A53               	clrf	_rxb,c	;volatile
  3739  0020B0  D007               	goto	l2718
  3740  0020B2                     l2714:
  3741  0020B2  FFFF               	dw	65535	; assembler added errata NOP
  3742  0020B4  5053               	movf	_rxb,w,c
  3743  0020B6  0FCF               	addlw	low _buffRX
  3744  0020B8  6ED9               	movwf	fsr2l,c
  3745  0020BA  6ADA               	clrf	fsr2h,c
  3746  0020BC  6ADF               	clrf	indf2,c
  3747  0020BE  2A53               	incf	_rxb,f,c	;volatile
  3748  0020C0                     l2718:
  3749  0020C0  FFFF               	dw	65535	; assembler added errata NOP
  3750  0020C2  0E08               	movlw	8
  3751  0020C4  6453               	cpfsgt	_rxb,c	;volatile
  3752  0020C6  D7F5               	goto	l2714
  3753                           
  3754                           ;usart.h: 21: rx_end = 0; rxb = 0;
  3755  0020C8  0100               	movlb	0	; () banked
  3756  0020CA  6B86               	clrf	_rx_end& (0+255),b	;volatile
  3757  0020CC  6A53               	clrf	_rxb,c	;volatile
  3758                           
  3759                           ; BSR set to: 0
  3760  0020CE  0012               	return		;funcret
  3761  0020D0  FFFF               	dw	65535	; errata NOP
  3762  0020D2                     __end_of_RXrestart:
  3763                           	opt stack 0
  3764                           stkptr	equ	0xFFC
  3765                           tblptru	equ	0xFF8
  3766                           tblptrh	equ	0xFF7
  3767                           tblptrl	equ	0xFF6
  3768                           tablat	equ	0xFF5
  3769                           prodh	equ	0xFF4
  3770                           prodl	equ	0xFF3
  3771                           intcon	equ	0xFF2
  3772                           intcon2	equ	0xFF1
  3773                           postinc0	equ	0xFEE
  3774                           wreg	equ	0xFE8
  3775                           indf2	equ	0xFDF
  3776                           fsr2h	equ	0xFDA
  3777                           fsr2l	equ	0xFD9
  3778                           status	equ	0xFD8
  3779                           
  3780 ;; *************** function _RXstopTIMER *****************
  3781 ;; Defined at:
  3782 ;;		line 10 in file "../usart.h"
  3783 ;; Parameters:    Size  Location     Type
  3784 ;;		None
  3785 ;; Auto vars:     Size  Location     Type
  3786 ;;		None
  3787 ;; Return value:  Size  Location     Type
  3788 ;;                  1    wreg      void 
  3789 ;; Registers used:
  3790 ;;		None
  3791 ;; Tracked objects:
  3792 ;;		On entry : 0/0
  3793 ;;		On exit  : 0/0
  3794 ;;		Unchanged: 0/0
  3795 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3796 ;;      Params:         0       0       0       0       0       0       0
  3797 ;;      Locals:         0       0       0       0       0       0       0
  3798 ;;      Temps:          0       0       0       0       0       0       0
  3799 ;;      Totals:         0       0       0       0       0       0       0
  3800 ;;Total ram usage:        0 bytes
  3801 ;; Hardware stack levels used:    1
  3802 ;; Hardware stack levels required when called:    3
  3803 ;; This function calls:
  3804 ;;		Nothing
  3805 ;; This function is called by:
  3806 ;;		_RXrestart
  3807 ;; This function uses a non-reentrant model
  3808 ;;
  3809                           
  3810                           	psect	text15
  3811  0022E6                     __ptext15:
  3812                           	opt stack 0
  3813  0022E6                     _RXstopTIMER:
  3814                           	opt stack 0
  3815  0022E6  FFFF               	dw	65535	; assembler added errata NOP
  3816                           
  3817                           ;usart.h: 12: T2CON = 0;
  3818                           
  3819                           ; BSR set to: 0
  3820                           ;incstack = 0
  3821  0022E8  6ACA               	clrf	4042,c	;volatile
  3822                           
  3823                           ;usart.h: 13: PIE1bits.TMR2IE = 0;
  3824  0022EA  929D               	bcf	3997,1,c	;volatile
  3825  0022EC  0012               	return		;funcret
  3826  0022EE  FFFF               	dw	65535	; errata NOP
  3827  0022F0                     __end_of_RXstopTIMER:
  3828                           	opt stack 0
  3829                           stkptr	equ	0xFFC
  3830                           tblptru	equ	0xFF8
  3831                           tblptrh	equ	0xFF7
  3832                           tblptrl	equ	0xFF6
  3833                           tablat	equ	0xFF5
  3834                           prodh	equ	0xFF4
  3835                           prodl	equ	0xFF3
  3836                           intcon	equ	0xFF2
  3837                           intcon2	equ	0xFF1
  3838                           postinc0	equ	0xFEE
  3839                           wreg	equ	0xFE8
  3840                           indf2	equ	0xFDF
  3841                           fsr2h	equ	0xFDA
  3842                           fsr2l	equ	0xFD9
  3843                           status	equ	0xFD8
  3844                           
  3845 ;; *************** function _EEsetupRead *****************
  3846 ;; Defined at:
  3847 ;;		line 47 in file "../eep.h"
  3848 ;; Parameters:    Size  Location     Type
  3849 ;;		None
  3850 ;; Auto vars:     Size  Location     Type
  3851 ;;  lW              2    4[BANK0 ] unsigned int 
  3852 ;;  rW              2    2[BANK0 ] unsigned int 
  3853 ;;  pW              2    0[BANK0 ] unsigned int 
  3854 ;; Return value:  Size  Location     Type
  3855 ;;                  1    wreg      void 
  3856 ;; Registers used:
  3857 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  3858 ;; Tracked objects:
  3859 ;;		On entry : 0/0
  3860 ;;		On exit  : 3F/0
  3861 ;;		Unchanged: 0/0
  3862 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3863 ;;      Params:         0       0       0       0       0       0       0
  3864 ;;      Locals:         0       6       0       0       0       0       0
  3865 ;;      Temps:          8       0       0       0       0       0       0
  3866 ;;      Totals:         8       6       0       0       0       0       0
  3867 ;;Total ram usage:       14 bytes
  3868 ;; Hardware stack levels used:    1
  3869 ;; Hardware stack levels required when called:    7
  3870 ;; This function calls:
  3871 ;;		___fttol
  3872 ;;		___lltoft
  3873 ;;		_readEEPROM
  3874 ;;		_readEEPROM16
  3875 ;;		_sqrt
  3876 ;; This function is called by:
  3877 ;;		_ReadStatusFromLCD
  3878 ;;		_main
  3879 ;; This function uses a non-reentrant model
  3880 ;;
  3881                           
  3882                           	psect	text16
  3883  000A6E                     __ptext16:
  3884                           	opt stack 0
  3885  000A6E                     _EEsetupRead:
  3886                           	opt stack 0
  3887  000A6E  FFFF               	dw	65535	; assembler added errata NOP
  3888                           
  3889                           ;eep.h: 49: unsigned int pW,rW,lW;;eep.h: 51: pW = readEEPROM16(0)&0x7FF;
  3890                           
  3891                           ;incstack = 0
  3892  000A70  0E00               	movlw	0
  3893  000A72  EC93  F010         	call	_readEEPROM16
  3894  000A76  5006               	movf	?_readEEPROM16,w,c
  3895  000A78  0100               	movlb	0	; () banked
  3896  000A7A  6FF5               	movwf	EEsetupRead@pW& (0+255),b
  3897  000A7C  0E07               	movlw	7
  3898  000A7E  1407               	andwf	?_readEEPROM16+1,w,c
  3899  000A80  6FF6               	movwf	(EEsetupRead@pW+1)& (0+255),b
  3900                           
  3901                           ; BSR set to: 0
  3902                           ;eep.h: 52: max_pwr = (unsigned int)sqrt((unsigned long)pW * (unsigned long)870);
  3903  000A82  51F5               	movf	EEsetupRead@pW& (0+255),w,b
  3904  000A84  6E3E               	movwf	??_EEsetupRead& (0+255),c
  3905  000A86  51F6               	movf	(EEsetupRead@pW+1)& (0+255),w,b
  3906  000A88  6E3F               	movwf	(??_EEsetupRead+1)& (0+255),c
  3907  000A8A  6A40               	clrf	(??_EEsetupRead+2)& (0+255),c
  3908  000A8C  6A41               	clrf	(??_EEsetupRead+3)& (0+255),c
  3909  000A8E  0E66               	movlw	102
  3910  000A90  023E               	mulwf	??_EEsetupRead& (0+255),c
  3911  000A92  CFF3 F042          	movff	prodl,??_EEsetupRead+4
  3912  000A96  CFF4 F043          	movff	prodh,??_EEsetupRead+5
  3913  000A9A  6A44               	clrf	(??_EEsetupRead+6)& (0+255),c
  3914  000A9C  6A45               	clrf	(??_EEsetupRead+7)& (0+255),c
  3915  000A9E  023F               	mulwf	(??_EEsetupRead+1)& (0+255),c
  3916  000AA0  50F3               	movf	prodl,w,c
  3917  000AA2  2643               	addwf	(??_EEsetupRead+5)& (0+255),f,c
  3918  000AA4  50F4               	movf	prodh,w,c
  3919  000AA6  2244               	addwfc	(??_EEsetupRead+6)& (0+255),f,c
  3920  000AA8  0E00               	movlw	0
  3921  000AAA  2245               	addwfc	(??_EEsetupRead+7)& (0+255),f,c
  3922  000AAC  0E03               	movlw	3
  3923  000AAE  023E               	mulwf	??_EEsetupRead& (0+255),c
  3924  000AB0  50F3               	movf	prodl,w,c
  3925  000AB2  2643               	addwf	(??_EEsetupRead+5)& (0+255),f,c
  3926  000AB4  50F4               	movf	prodh,w,c
  3927  000AB6  2244               	addwfc	(??_EEsetupRead+6)& (0+255),f,c
  3928  000AB8  0E00               	movlw	0
  3929  000ABA  2245               	addwfc	(??_EEsetupRead+7)& (0+255),f,c
  3930  000ABC  0E66               	movlw	102
  3931  000ABE  0240               	mulwf	(??_EEsetupRead+2)& (0+255),c
  3932  000AC0  50F3               	movf	prodl,w,c
  3933  000AC2  2644               	addwf	(??_EEsetupRead+6)& (0+255),f,c
  3934  000AC4  50F4               	movf	prodh,w,c
  3935  000AC6  2245               	addwfc	(??_EEsetupRead+7)& (0+255),f,c
  3936  000AC8  0E03               	movlw	3
  3937  000ACA  023F               	mulwf	(??_EEsetupRead+1)& (0+255),c
  3938  000ACC  50F3               	movf	prodl,w,c
  3939  000ACE  2644               	addwf	(??_EEsetupRead+6)& (0+255),f,c
  3940  000AD0  50F4               	movf	prodh,w,c
  3941  000AD2  2245               	addwfc	(??_EEsetupRead+7)& (0+255),f,c
  3942  000AD4  0E00               	movlw	0
  3943  000AD6  023E               	mulwf	??_EEsetupRead& (0+255),c
  3944  000AD8  50F3               	movf	prodl,w,c
  3945  000ADA  2644               	addwf	(??_EEsetupRead+6)& (0+255),f,c
  3946  000ADC  50F4               	movf	prodh,w,c
  3947  000ADE  2245               	addwfc	(??_EEsetupRead+7)& (0+255),f,c
  3948  000AE0  0E66               	movlw	102
  3949  000AE2  0241               	mulwf	(??_EEsetupRead+3)& (0+255),c
  3950  000AE4  50F3               	movf	prodl,w,c
  3951  000AE6  2645               	addwf	(??_EEsetupRead+7)& (0+255),f,c
  3952  000AE8  0E03               	movlw	3
  3953  000AEA  0240               	mulwf	(??_EEsetupRead+2)& (0+255),c
  3954  000AEC  50F3               	movf	prodl,w,c
  3955  000AEE  2645               	addwf	(??_EEsetupRead+7)& (0+255),f,c
  3956  000AF0  0E00               	movlw	0
  3957  000AF2  023F               	mulwf	(??_EEsetupRead+1)& (0+255),c
  3958  000AF4  50F3               	movf	prodl,w,c
  3959  000AF6  2645               	addwf	(??_EEsetupRead+7)& (0+255),f,c
  3960  000AF8  0E00               	movlw	0
  3961  000AFA  023E               	mulwf	??_EEsetupRead& (0+255),c
  3962  000AFC  50F3               	movf	prodl,w,c
  3963  000AFE  2645               	addwf	(??_EEsetupRead+7)& (0+255),f,c
  3964  000B00  C042  F00D         	movff	??_EEsetupRead+4,___lltoft@c
  3965  000B04  C043  F00E         	movff	??_EEsetupRead+5,___lltoft@c+1
  3966  000B08  C044  F00F         	movff	??_EEsetupRead+6,___lltoft@c+2
  3967  000B0C  C045  F010         	movff	??_EEsetupRead+7,___lltoft@c+3
  3968  000B10  EC39  F00F         	call	___lltoft	;wreg free
  3969  000B14  C00D  F01F         	movff	?___lltoft,sqrt@a
  3970  000B18  C00E  F020         	movff	?___lltoft+1,sqrt@a+1
  3971  000B1C  C00F  F021         	movff	?___lltoft+2,sqrt@a+2
  3972  000B20  ECD0  F008         	call	_sqrt	;wreg free
  3973  000B24  C01F  F02F         	movff	?_sqrt,___fttol@f1
  3974  000B28  C020  F030         	movff	?_sqrt+1,___fttol@f1+1
  3975  000B2C  C021  F031         	movff	?_sqrt+2,___fttol@f1+2
  3976  000B30  EC65  F00B         	call	___fttol	;wreg free
  3977  000B34  C02F  F0E9         	movff	?___fttol,_max_pwr	;volatile
  3978  000B38  C030  F0EA         	movff	?___fttol+1,_max_pwr+1	;volatile
  3979                           
  3980                           ;eep.h: 53: rW = readEEPROM16(2)&0x1FF;
  3981  000B3C  0E02               	movlw	2
  3982  000B3E  EC93  F010         	call	_readEEPROM16
  3983  000B42  5006               	movf	?_readEEPROM16,w,c
  3984  000B44  0100               	movlb	0	; () banked
  3985  000B46  6FF7               	movwf	EEsetupRead@rW& (0+255),b
  3986  000B48  0E01               	movlw	1
  3987  000B4A  1407               	andwf	?_readEEPROM16+1,w,c
  3988  000B4C  6FF8               	movwf	(EEsetupRead@rW+1)& (0+255),b
  3989                           
  3990                           ;eep.h: 54: max_ref = (unsigned int)sqrt((unsigned long)rW * (unsigned long)870);
  3991  000B4E  51F7               	movf	EEsetupRead@rW& (0+255),w,b
  3992  000B50  6E3E               	movwf	??_EEsetupRead& (0+255),c
  3993  000B52  51F8               	movf	(EEsetupRead@rW+1)& (0+255),w,b
  3994  000B54  6E3F               	movwf	(??_EEsetupRead+1)& (0+255),c
  3995  000B56  6A40               	clrf	(??_EEsetupRead+2)& (0+255),c
  3996  000B58  6A41               	clrf	(??_EEsetupRead+3)& (0+255),c
  3997  000B5A  0E66               	movlw	102
  3998  000B5C  023E               	mulwf	??_EEsetupRead& (0+255),c
  3999  000B5E  CFF3 F042          	movff	prodl,??_EEsetupRead+4
  4000  000B62  CFF4 F043          	movff	prodh,??_EEsetupRead+5
  4001  000B66  6A44               	clrf	(??_EEsetupRead+6)& (0+255),c
  4002  000B68  6A45               	clrf	(??_EEsetupRead+7)& (0+255),c
  4003  000B6A  023F               	mulwf	(??_EEsetupRead+1)& (0+255),c
  4004  000B6C  50F3               	movf	prodl,w,c
  4005  000B6E  2643               	addwf	(??_EEsetupRead+5)& (0+255),f,c
  4006  000B70  50F4               	movf	prodh,w,c
  4007  000B72  2244               	addwfc	(??_EEsetupRead+6)& (0+255),f,c
  4008  000B74  0E00               	movlw	0
  4009  000B76  2245               	addwfc	(??_EEsetupRead+7)& (0+255),f,c
  4010  000B78  0E03               	movlw	3
  4011  000B7A  023E               	mulwf	??_EEsetupRead& (0+255),c
  4012  000B7C  50F3               	movf	prodl,w,c
  4013  000B7E  2643               	addwf	(??_EEsetupRead+5)& (0+255),f,c
  4014  000B80  50F4               	movf	prodh,w,c
  4015  000B82  2244               	addwfc	(??_EEsetupRead+6)& (0+255),f,c
  4016  000B84  0E00               	movlw	0
  4017  000B86  2245               	addwfc	(??_EEsetupRead+7)& (0+255),f,c
  4018  000B88  0E66               	movlw	102
  4019  000B8A  0240               	mulwf	(??_EEsetupRead+2)& (0+255),c
  4020  000B8C  50F3               	movf	prodl,w,c
  4021  000B8E  2644               	addwf	(??_EEsetupRead+6)& (0+255),f,c
  4022  000B90  50F4               	movf	prodh,w,c
  4023  000B92  2245               	addwfc	(??_EEsetupRead+7)& (0+255),f,c
  4024  000B94  0E03               	movlw	3
  4025  000B96  023F               	mulwf	(??_EEsetupRead+1)& (0+255),c
  4026  000B98  50F3               	movf	prodl,w,c
  4027  000B9A  2644               	addwf	(??_EEsetupRead+6)& (0+255),f,c
  4028  000B9C  50F4               	movf	prodh,w,c
  4029  000B9E  2245               	addwfc	(??_EEsetupRead+7)& (0+255),f,c
  4030  000BA0  0E00               	movlw	0
  4031  000BA2  023E               	mulwf	??_EEsetupRead& (0+255),c
  4032  000BA4  50F3               	movf	prodl,w,c
  4033  000BA6  2644               	addwf	(??_EEsetupRead+6)& (0+255),f,c
  4034  000BA8  50F4               	movf	prodh,w,c
  4035  000BAA  2245               	addwfc	(??_EEsetupRead+7)& (0+255),f,c
  4036  000BAC  0E66               	movlw	102
  4037  000BAE  0241               	mulwf	(??_EEsetupRead+3)& (0+255),c
  4038  000BB0  50F3               	movf	prodl,w,c
  4039  000BB2  2645               	addwf	(??_EEsetupRead+7)& (0+255),f,c
  4040  000BB4  0E03               	movlw	3
  4041  000BB6  0240               	mulwf	(??_EEsetupRead+2)& (0+255),c
  4042  000BB8  50F3               	movf	prodl,w,c
  4043  000BBA  2645               	addwf	(??_EEsetupRead+7)& (0+255),f,c
  4044  000BBC  0E00               	movlw	0
  4045  000BBE  023F               	mulwf	(??_EEsetupRead+1)& (0+255),c
  4046  000BC0  50F3               	movf	prodl,w,c
  4047  000BC2  2645               	addwf	(??_EEsetupRead+7)& (0+255),f,c
  4048  000BC4  0E00               	movlw	0
  4049  000BC6  023E               	mulwf	??_EEsetupRead& (0+255),c
  4050  000BC8  50F3               	movf	prodl,w,c
  4051  000BCA  2645               	addwf	(??_EEsetupRead+7)& (0+255),f,c
  4052  000BCC  C042  F00D         	movff	??_EEsetupRead+4,___lltoft@c
  4053  000BD0  C043  F00E         	movff	??_EEsetupRead+5,___lltoft@c+1
  4054  000BD4  C044  F00F         	movff	??_EEsetupRead+6,___lltoft@c+2
  4055  000BD8  C045  F010         	movff	??_EEsetupRead+7,___lltoft@c+3
  4056  000BDC  EC39  F00F         	call	___lltoft	;wreg free
  4057  000BE0  C00D  F01F         	movff	?___lltoft,sqrt@a
  4058  000BE4  C00E  F020         	movff	?___lltoft+1,sqrt@a+1
  4059  000BE8  C00F  F021         	movff	?___lltoft+2,sqrt@a+2
  4060  000BEC  ECD0  F008         	call	_sqrt	;wreg free
  4061  000BF0  C01F  F02F         	movff	?_sqrt,___fttol@f1
  4062  000BF4  C020  F030         	movff	?_sqrt+1,___fttol@f1+1
  4063  000BF8  C021  F031         	movff	?_sqrt+2,___fttol@f1+2
  4064  000BFC  EC65  F00B         	call	___fttol	;wreg free
  4065  000C00  C02F  F0E7         	movff	?___fttol,_max_ref	;volatile
  4066  000C04  C030  F0E8         	movff	?___fttol+1,_max_ref+1	;volatile
  4067                           
  4068                           ;eep.h: 56: max_curr = readEEPROM16(4)&0x3FF;
  4069  000C08  0E04               	movlw	4
  4070  000C0A  EC93  F010         	call	_readEEPROM16
  4071  000C0E  5006               	movf	?_readEEPROM16,w,c
  4072  000C10  0100               	movlb	0	; () banked
  4073  000C12  6FE3               	movwf	_max_curr& (0+255),b	;volatile
  4074  000C14  0E03               	movlw	3
  4075  000C16  1407               	andwf	?_readEEPROM16+1,w,c
  4076  000C18  6FE4               	movwf	(_max_curr+1)& (0+255),b	;volatile
  4077                           
  4078                           ; BSR set to: 0
  4079                           ;eep.h: 57: max_volt = readEEPROM16(6)&0x3FF;
  4080  000C1A  0E06               	movlw	6
  4081  000C1C  EC93  F010         	call	_readEEPROM16
  4082  000C20  5006               	movf	?_readEEPROM16,w,c
  4083  000C22  0100               	movlb	0	; () banked
  4084  000C24  6FE5               	movwf	_max_volt& (0+255),b	;volatile
  4085  000C26  0E03               	movlw	3
  4086  000C28  1407               	andwf	?_readEEPROM16+1,w,c
  4087  000C2A  6FE6               	movwf	(_max_volt+1)& (0+255),b	;volatile
  4088                           
  4089                           ; BSR set to: 0
  4090                           ;eep.h: 58: max_temp = readEEPROM16(8)&0x7F;
  4091  000C2C  0E08               	movlw	8
  4092  000C2E  EC93  F010         	call	_readEEPROM16
  4093  000C32  0E7F               	movlw	127
  4094  000C34  1406               	andwf	?_readEEPROM16,w,c
  4095  000C36  0100               	movlb	0	; () banked
  4096  000C38  6FE1               	movwf	_max_temp& (0+255),b	;volatile
  4097  000C3A  6BE2               	clrf	(_max_temp+1)& (0+255),b	;volatile
  4098                           
  4099                           ; BSR set to: 0
  4100                           ;eep.h: 59: max_tFAN = readEEPROM16(10)&0x7F;
  4101  000C3C  0E0A               	movlw	10
  4102  000C3E  EC93  F010         	call	_readEEPROM16
  4103  000C42  0E7F               	movlw	127
  4104  000C44  1406               	andwf	?_readEEPROM16,w,c
  4105  000C46  0100               	movlb	0	; () banked
  4106  000C48  6FDF               	movwf	_max_tFAN& (0+255),b	;volatile
  4107  000C4A  6BE0               	clrf	(_max_tFAN+1)& (0+255),b	;volatile
  4108                           
  4109                           ; BSR set to: 0
  4110                           ;eep.h: 61: lW = readEEPROM16(12)&0x3FF;
  4111  000C4C  0E0C               	movlw	12
  4112  000C4E  EC93  F010         	call	_readEEPROM16
  4113  000C52  5006               	movf	?_readEEPROM16,w,c
  4114  000C54  0100               	movlb	0	; () banked
  4115  000C56  6FF9               	movwf	EEsetupRead@lW& (0+255),b
  4116  000C58  0E03               	movlw	3
  4117  000C5A  1407               	andwf	?_readEEPROM16+1,w,c
  4118  000C5C  6FFA               	movwf	(EEsetupRead@lW+1)& (0+255),b
  4119                           
  4120                           ; BSR set to: 0
  4121                           ;eep.h: 62: lpferrP = (unsigned int)sqrt((unsigned long)lW * (unsigned long)870);
  4122  000C5E  51F9               	movf	EEsetupRead@lW& (0+255),w,b
  4123  000C60  6E3E               	movwf	??_EEsetupRead& (0+255),c
  4124  000C62  51FA               	movf	(EEsetupRead@lW+1)& (0+255),w,b
  4125  000C64  6E3F               	movwf	(??_EEsetupRead+1)& (0+255),c
  4126  000C66  6A40               	clrf	(??_EEsetupRead+2)& (0+255),c
  4127  000C68  6A41               	clrf	(??_EEsetupRead+3)& (0+255),c
  4128  000C6A  0E66               	movlw	102
  4129  000C6C  023E               	mulwf	??_EEsetupRead& (0+255),c
  4130  000C6E  CFF3 F042          	movff	prodl,??_EEsetupRead+4
  4131  000C72  CFF4 F043          	movff	prodh,??_EEsetupRead+5
  4132  000C76  6A44               	clrf	(??_EEsetupRead+6)& (0+255),c
  4133  000C78  6A45               	clrf	(??_EEsetupRead+7)& (0+255),c
  4134  000C7A  023F               	mulwf	(??_EEsetupRead+1)& (0+255),c
  4135  000C7C  50F3               	movf	prodl,w,c
  4136  000C7E  2643               	addwf	(??_EEsetupRead+5)& (0+255),f,c
  4137  000C80  50F4               	movf	prodh,w,c
  4138  000C82  2244               	addwfc	(??_EEsetupRead+6)& (0+255),f,c
  4139  000C84  0E00               	movlw	0
  4140  000C86  2245               	addwfc	(??_EEsetupRead+7)& (0+255),f,c
  4141  000C88  0E03               	movlw	3
  4142  000C8A  023E               	mulwf	??_EEsetupRead& (0+255),c
  4143  000C8C  50F3               	movf	prodl,w,c
  4144  000C8E  2643               	addwf	(??_EEsetupRead+5)& (0+255),f,c
  4145  000C90  50F4               	movf	prodh,w,c
  4146  000C92  2244               	addwfc	(??_EEsetupRead+6)& (0+255),f,c
  4147  000C94  0E00               	movlw	0
  4148  000C96  2245               	addwfc	(??_EEsetupRead+7)& (0+255),f,c
  4149  000C98  0E66               	movlw	102
  4150  000C9A  0240               	mulwf	(??_EEsetupRead+2)& (0+255),c
  4151  000C9C  50F3               	movf	prodl,w,c
  4152  000C9E  2644               	addwf	(??_EEsetupRead+6)& (0+255),f,c
  4153  000CA0  50F4               	movf	prodh,w,c
  4154  000CA2  2245               	addwfc	(??_EEsetupRead+7)& (0+255),f,c
  4155  000CA4  0E03               	movlw	3
  4156  000CA6  023F               	mulwf	(??_EEsetupRead+1)& (0+255),c
  4157  000CA8  50F3               	movf	prodl,w,c
  4158  000CAA  2644               	addwf	(??_EEsetupRead+6)& (0+255),f,c
  4159  000CAC  50F4               	movf	prodh,w,c
  4160  000CAE  2245               	addwfc	(??_EEsetupRead+7)& (0+255),f,c
  4161  000CB0  0E00               	movlw	0
  4162  000CB2  023E               	mulwf	??_EEsetupRead& (0+255),c
  4163  000CB4  50F3               	movf	prodl,w,c
  4164  000CB6  2644               	addwf	(??_EEsetupRead+6)& (0+255),f,c
  4165  000CB8  50F4               	movf	prodh,w,c
  4166  000CBA  2245               	addwfc	(??_EEsetupRead+7)& (0+255),f,c
  4167  000CBC  0E66               	movlw	102
  4168  000CBE  0241               	mulwf	(??_EEsetupRead+3)& (0+255),c
  4169  000CC0  50F3               	movf	prodl,w,c
  4170  000CC2  2645               	addwf	(??_EEsetupRead+7)& (0+255),f,c
  4171  000CC4  0E03               	movlw	3
  4172  000CC6  0240               	mulwf	(??_EEsetupRead+2)& (0+255),c
  4173  000CC8  50F3               	movf	prodl,w,c
  4174  000CCA  2645               	addwf	(??_EEsetupRead+7)& (0+255),f,c
  4175  000CCC  0E00               	movlw	0
  4176  000CCE  023F               	mulwf	(??_EEsetupRead+1)& (0+255),c
  4177  000CD0  50F3               	movf	prodl,w,c
  4178  000CD2  2645               	addwf	(??_EEsetupRead+7)& (0+255),f,c
  4179  000CD4  0E00               	movlw	0
  4180  000CD6  023E               	mulwf	??_EEsetupRead& (0+255),c
  4181  000CD8  50F3               	movf	prodl,w,c
  4182  000CDA  2645               	addwf	(??_EEsetupRead+7)& (0+255),f,c
  4183  000CDC  C042  F00D         	movff	??_EEsetupRead+4,___lltoft@c
  4184  000CE0  C043  F00E         	movff	??_EEsetupRead+5,___lltoft@c+1
  4185  000CE4  C044  F00F         	movff	??_EEsetupRead+6,___lltoft@c+2
  4186  000CE8  C045  F010         	movff	??_EEsetupRead+7,___lltoft@c+3
  4187  000CEC  EC39  F00F         	call	___lltoft	;wreg free
  4188  000CF0  C00D  F01F         	movff	?___lltoft,sqrt@a
  4189  000CF4  C00E  F020         	movff	?___lltoft+1,sqrt@a+1
  4190  000CF8  C00F  F021         	movff	?___lltoft+2,sqrt@a+2
  4191  000CFC  ECD0  F008         	call	_sqrt	;wreg free
  4192  000D00  C01F  F02F         	movff	?_sqrt,___fttol@f1
  4193  000D04  C020  F030         	movff	?_sqrt+1,___fttol@f1+1
  4194  000D08  C021  F031         	movff	?_sqrt+2,___fttol@f1+2
  4195  000D0C  EC65  F00B         	call	___fttol	;wreg free
  4196  000D10  C02F  F0DD         	movff	?___fttol,_lpferrP	;volatile
  4197  000D14  C030  F0DE         	movff	?___fttol+1,_lpferrP+1	;volatile
  4198                           
  4199                           ;eep.h: 63: lpferrC = readEEPROM16(14)&0x3FF;
  4200  000D18  0E0E               	movlw	14
  4201  000D1A  EC93  F010         	call	_readEEPROM16
  4202  000D1E  5006               	movf	?_readEEPROM16,w,c
  4203  000D20  0100               	movlb	0	; () banked
  4204  000D22  6FDB               	movwf	_lpferrC& (0+255),b	;volatile
  4205  000D24  0E03               	movlw	3
  4206  000D26  1407               	andwf	?_readEEPROM16+1,w,c
  4207  000D28  6FDC               	movwf	(_lpferrC+1)& (0+255),b	;volatile
  4208                           
  4209                           ; BSR set to: 0
  4210                           ;eep.h: 65: lpferrR = (readEEPROM(16)&0x7F) * 10;
  4211  000D2A  0E10               	movlw	16
  4212  000D2C  EC3E  F011         	call	_readEEPROM
  4213  000D30  0B7F               	andlw	127
  4214  000D32  0D0A               	mullw	10
  4215  000D34  CFF3 F0D9          	movff	prodl,_lpferrR	;volatile
  4216  000D38  CFF4 F0DA          	movff	prodh,_lpferrR+1	;volatile
  4217                           
  4218                           ;eep.h: 66: ptt_hold = readEEPROM(17)&0x7F;
  4219  000D3C  0E11               	movlw	17
  4220  000D3E  EC3E  F011         	call	_readEEPROM
  4221  000D42  0B7F               	andlw	127
  4222  000D44  0100               	movlb	0	; () banked
  4223  000D46  6FEB               	movwf	_ptt_hold& (0+255),b	;volatile
  4224                           
  4225                           ; BSR set to: 0
  4226                           ;eep.h: 67: hystT = readEEPROM(18)&0x1F;
  4227  000D48  0E12               	movlw	18
  4228  000D4A  EC3E  F011         	call	_readEEPROM
  4229  000D4E  0B1F               	andlw	31
  4230  000D50  0100               	movlb	0	; () banked
  4231  000D52  6FF0               	movwf	_hystT& (0+255),b	;volatile
  4232                           
  4233                           ; BSR set to: 0
  4234                           ;eep.h: 68: hystF = readEEPROM(19)&0x1F;
  4235  000D54  0E13               	movlw	19
  4236  000D56  EC3E  F011         	call	_readEEPROM
  4237  000D5A  0B1F               	andlw	31
  4238  000D5C  0100               	movlb	0	; () banked
  4239  000D5E  6FEF               	movwf	_hystF& (0+255),b	;volatile
  4240                           
  4241                           ; BSR set to: 0
  4242                           ;eep.h: 69: reldel = readEEPROM(20)&0x7F;
  4243  000D60  0E14               	movlw	20
  4244  000D62  EC3E  F011         	call	_readEEPROM
  4245  000D66  0B7F               	andlw	127
  4246  000D68  0100               	movlb	0	; () banked
  4247  000D6A  6FF4               	movwf	_reldel& (0+255),b	;volatile
  4248                           
  4249                           ; BSR set to: 0
  4250                           ;eep.h: 70: biasdel = readEEPROM(21)&0x7F;
  4251  000D6C  0E15               	movlw	21
  4252  000D6E  EC3E  F011         	call	_readEEPROM
  4253  000D72  0B7F               	andlw	127
  4254  000D74  0100               	movlb	0	; () banked
  4255  000D76  6FF3               	movwf	_biasdel& (0+255),b	;volatile
  4256                           
  4257                           ; BSR set to: 0
  4258                           ;eep.h: 71: sensor = readEEPROM(22)&0x1F;
  4259  000D78  0E16               	movlw	22
  4260  000D7A  EC3E  F011         	call	_readEEPROM
  4261  000D7E  0B1F               	andlw	31
  4262  000D80  0100               	movlb	0	; () banked
  4263  000D82  6FEC               	movwf	_sensor& (0+255),b	;volatile
  4264                           
  4265                           ; BSR set to: 0
  4266                           ;eep.h: 72: fanptt = readEEPROM(23)&0x01;
  4267  000D84  0E17               	movlw	23
  4268  000D86  EC3E  F011         	call	_readEEPROM
  4269  000D8A  0B01               	andlw	1
  4270  000D8C  0100               	movlb	0	; () banked
  4271  000D8E  6FF2               	movwf	_fanptt& (0+255),b	;volatile
  4272                           
  4273                           ; BSR set to: 0
  4274                           ;eep.h: 73: beeper = readEEPROM(24)&0x01;
  4275  000D90  0E18               	movlw	24
  4276  000D92  EC3E  F011         	call	_readEEPROM
  4277  000D96  0B01               	andlw	1
  4278  000D98  0100               	movlb	0	; () banked
  4279  000D9A  6FEE               	movwf	_beeper& (0+255),b	;volatile
  4280                           
  4281                           ; BSR set to: 0
  4282                           ;eep.h: 74: logo = readEEPROM(25)&0x01;
  4283  000D9C  0E19               	movlw	25
  4284  000D9E  EC3E  F011         	call	_readEEPROM
  4285  000DA2  0B01               	andlw	1
  4286  000DA4  0100               	movlb	0	; () banked
  4287  000DA6  6FED               	movwf	_logo& (0+255),b	;volatile
  4288                           
  4289                           ; BSR set to: 0
  4290  000DA8  0012               	return		;funcret
  4291  000DAA  FFFF               	dw	65535	; errata NOP
  4292  000DAC                     __end_of_EEsetupRead:
  4293                           	opt stack 0
  4294                           stkptr	equ	0xFFC
  4295                           tblptru	equ	0xFF8
  4296                           tblptrh	equ	0xFF7
  4297                           tblptrl	equ	0xFF6
  4298                           tablat	equ	0xFF5
  4299                           prodh	equ	0xFF4
  4300                           prodl	equ	0xFF3
  4301                           intcon	equ	0xFF2
  4302                           intcon2	equ	0xFF1
  4303                           postinc0	equ	0xFEE
  4304                           wreg	equ	0xFE8
  4305                           indf2	equ	0xFDF
  4306                           fsr2h	equ	0xFDA
  4307                           fsr2l	equ	0xFD9
  4308                           status	equ	0xFD8
  4309                           
  4310 ;; *************** function _sqrt *****************
  4311 ;; Defined at:
  4312 ;;		line 9 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\sprcsqrt.c"
  4313 ;; Parameters:    Size  Location     Type
  4314 ;;  a               3   30[COMRAM] void 
  4315 ;; Auto vars:     Size  Location     Type
  4316 ;;  x               3   43[COMRAM] void 
  4317 ;;  q               3   40[COMRAM] void 
  4318 ;;  z               3   36[COMRAM] void 
  4319 ;;  og              3    0        void 
  4320 ;;  i               1   39[COMRAM] unsigned char 
  4321 ;; Return value:  Size  Location     Type
  4322 ;;                  3   30[COMRAM] unsigned char 
  4323 ;; Registers used:
  4324 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  4325 ;; Tracked objects:
  4326 ;;		On entry : 0/0
  4327 ;;		On exit  : 0/0
  4328 ;;		Unchanged: 0/0
  4329 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4330 ;;      Params:         3       0       0       0       0       0       0
  4331 ;;      Locals:        10       0       0       0       0       0       0
  4332 ;;      Temps:          3       0       0       0       0       0       0
  4333 ;;      Totals:        16       0       0       0       0       0       0
  4334 ;;Total ram usage:       16 bytes
  4335 ;; Hardware stack levels used:    1
  4336 ;; Hardware stack levels required when called:    6
  4337 ;; This function calls:
  4338 ;;		___ftge
  4339 ;;		___ftmul
  4340 ;;		___ftsub
  4341 ;; This function is called by:
  4342 ;;		_EEsetupRead
  4343 ;; This function uses a non-reentrant model
  4344 ;;
  4345                           
  4346                           	psect	text17
  4347  0011A0                     __ptext17:
  4348                           	opt stack 0
  4349  0011A0                     _sqrt:
  4350                           	opt stack 0
  4351  0011A0  FFFF               	dw	65535	; assembler added errata NOP
  4352                           
  4353                           ; BSR set to: 0
  4354                           ;incstack = 0
  4355  0011A2  6A13               	clrf	___ftge@ff1,c
  4356  0011A4  6A14               	clrf	___ftge@ff1+1,c
  4357  0011A6  6A15               	clrf	___ftge@ff1+2,c
  4358  0011A8  C01F  F016         	movff	sqrt@a,___ftge@ff2
  4359  0011AC  C020  F017         	movff	sqrt@a+1,___ftge@ff2+1
  4360  0011B0  C021  F018         	movff	sqrt@a+2,___ftge@ff2+2
  4361  0011B4  ECB4  F00E         	call	___ftge	;wreg free
  4362  0011B8  E304               	bnc	l1196
  4363  0011BA  6A1F               	clrf	?_sqrt,c
  4364  0011BC  6A20               	clrf	?_sqrt+1,c
  4365  0011BE  6A21               	clrf	?_sqrt+2,c
  4366  0011C0  D09A               	goto	l1198
  4367  0011C2                     l1196:
  4368  0011C2  C01F  F025         	movff	sqrt@a,sqrt@z
  4369  0011C6  C020  F026         	movff	sqrt@a+1,sqrt@z+1
  4370  0011CA  C021  F027         	movff	sqrt@a+2,sqrt@z+2
  4371  0011CE  0EC8               	movlw	200
  4372  0011D0  6E22               	movwf	??_sqrt& (0+255),c
  4373  0011D2  0E6E               	movlw	110
  4374  0011D4  6E23               	movwf	(??_sqrt+1)& (0+255),c
  4375  0011D6  0EBE               	movlw	190
  4376  0011D8  6E24               	movwf	(??_sqrt+2)& (0+255),c
  4377  0011DA  501F               	movf	sqrt@a,w,c
  4378  0011DC  5C22               	subwf	??_sqrt,w,c
  4379  0011DE  6E2C               	movwf	sqrt@x,c
  4380  0011E0  5020               	movf	sqrt@a+1,w,c
  4381  0011E2  5823               	subwfb	??_sqrt+1,w,c
  4382  0011E4  6E2D               	movwf	sqrt@x+1,c
  4383  0011E6  5021               	movf	sqrt@a+2,w,c
  4384  0011E8  5824               	subwfb	??_sqrt+2,w,c
  4385  0011EA  6E2E               	movwf	sqrt@x+2,c
  4386  0011EC  90D8               	bcf	status,0,c
  4387  0011EE  322E               	rrcf	sqrt@x+2,f,c
  4388  0011F0  322D               	rrcf	sqrt@x+1,f,c
  4389  0011F2  322C               	rrcf	sqrt@x,f,c
  4390  0011F4  80D8               	bsf	status,0,c
  4391  0011F6  0E80               	movlw	128
  4392  0011F8  5A26               	subwfb	sqrt@z+1,f,c
  4393  0011FA  0E00               	movlw	0
  4394  0011FC  5A27               	subwfb	sqrt@z+2,f,c
  4395  0011FE  0E04               	movlw	4
  4396  001200  6E28               	movwf	sqrt@i,c
  4397  001202                     l4196:
  4398  001202  FFFF               	dw	65535	; assembler added errata NOP
  4399  001204  C02C  F00D         	movff	sqrt@x,___ftmul@f1
  4400  001208  C02D  F00E         	movff	sqrt@x+1,___ftmul@f1+1
  4401  00120C  C02E  F00F         	movff	sqrt@x+2,___ftmul@f1+2
  4402  001210  C025  F010         	movff	sqrt@z,___ftmul@f2
  4403  001214  C026  F011         	movff	sqrt@z+1,___ftmul@f2+1
  4404  001218  C027  F012         	movff	sqrt@z+2,___ftmul@f2+2
  4405  00121C  EC90  F00A         	call	___ftmul	;wreg free
  4406  001220  C00D  F029         	movff	?___ftmul,sqrt@q
  4407  001224  C00E  F02A         	movff	?___ftmul+1,sqrt@q+1
  4408  001228  C00F  F02B         	movff	?___ftmul+2,sqrt@q+2
  4409  00122C  C029  F00D         	movff	sqrt@q,___ftmul@f1
  4410  001230  C02A  F00E         	movff	sqrt@q+1,___ftmul@f1+1
  4411  001234  C02B  F00F         	movff	sqrt@q+2,___ftmul@f1+2
  4412  001238  C02C  F010         	movff	sqrt@x,___ftmul@f2
  4413  00123C  C02D  F011         	movff	sqrt@x+1,___ftmul@f2+1
  4414  001240  C02E  F012         	movff	sqrt@x+2,___ftmul@f2+2
  4415  001244  EC90  F00A         	call	___ftmul	;wreg free
  4416  001248  C00D  F029         	movff	?___ftmul,sqrt@q
  4417  00124C  C00E  F02A         	movff	?___ftmul+1,sqrt@q+1
  4418  001250  C00F  F02B         	movff	?___ftmul+2,sqrt@q+2
  4419  001254  C029  F00D         	movff	sqrt@q,___ftmul@f1
  4420  001258  C02A  F00E         	movff	sqrt@q+1,___ftmul@f1+1
  4421  00125C  C02B  F00F         	movff	sqrt@q+2,___ftmul@f1+2
  4422  001260  C02C  F010         	movff	sqrt@x,___ftmul@f2
  4423  001264  C02D  F011         	movff	sqrt@x+1,___ftmul@f2+1
  4424  001268  C02E  F012         	movff	sqrt@x+2,___ftmul@f2+2
  4425  00126C  EC90  F00A         	call	___ftmul	;wreg free
  4426  001270  C00D  F029         	movff	?___ftmul,sqrt@q
  4427  001274  C00E  F02A         	movff	?___ftmul+1,sqrt@q+1
  4428  001278  C00F  F02B         	movff	?___ftmul+2,sqrt@q+2
  4429  00127C  C02C  F00D         	movff	sqrt@x,___ftmul@f1
  4430  001280  C02D  F00E         	movff	sqrt@x+1,___ftmul@f1+1
  4431  001284  C02E  F00F         	movff	sqrt@x+2,___ftmul@f1+2
  4432  001288  6A10               	clrf	___ftmul@f2,c
  4433  00128A  0EC0               	movlw	192
  4434  00128C  6E11               	movwf	___ftmul@f2+1,c
  4435  00128E  0E3F               	movlw	63
  4436  001290  6E12               	movwf	___ftmul@f2+2,c
  4437  001292  EC90  F00A         	call	___ftmul	;wreg free
  4438  001296  C00D  F02C         	movff	?___ftmul,sqrt@x
  4439  00129A  C00E  F02D         	movff	?___ftmul+1,sqrt@x+1
  4440  00129E  C00F  F02E         	movff	?___ftmul+2,sqrt@x+2
  4441  0012A2  C02C  F019         	movff	sqrt@x,___ftsub@f1
  4442  0012A6  C02D  F01A         	movff	sqrt@x+1,___ftsub@f1+1
  4443  0012AA  C02E  F01B         	movff	sqrt@x+2,___ftsub@f1+2
  4444  0012AE  C029  F01C         	movff	sqrt@q,___ftsub@f2
  4445  0012B2  C02A  F01D         	movff	sqrt@q+1,___ftsub@f2+1
  4446  0012B6  C02B  F01E         	movff	sqrt@q+2,___ftsub@f2+2
  4447  0012BA  EC9E  F00F         	call	___ftsub	;wreg free
  4448  0012BE  C019  F02C         	movff	?___ftsub,sqrt@x
  4449  0012C2  C01A  F02D         	movff	?___ftsub+1,sqrt@x+1
  4450  0012C6  C01B  F02E         	movff	?___ftsub+2,sqrt@x+2
  4451  0012CA  2E28               	decfsz	sqrt@i,f,c
  4452  0012CC  D79A               	goto	l4196
  4453  0012CE  C02C  F00D         	movff	sqrt@x,___ftmul@f1
  4454  0012D2  C02D  F00E         	movff	sqrt@x+1,___ftmul@f1+1
  4455  0012D6  C02E  F00F         	movff	sqrt@x+2,___ftmul@f1+2
  4456  0012DA  C01F  F010         	movff	sqrt@a,___ftmul@f2
  4457  0012DE  C020  F011         	movff	sqrt@a+1,___ftmul@f2+1
  4458  0012E2  C021  F012         	movff	sqrt@a+2,___ftmul@f2+2
  4459  0012E6  EC90  F00A         	call	___ftmul	;wreg free
  4460  0012EA  C00D  F01F         	movff	?___ftmul,?_sqrt
  4461  0012EE  C00E  F020         	movff	?___ftmul+1,?_sqrt+1
  4462  0012F2  C00F  F021         	movff	?___ftmul+2,?_sqrt+2
  4463  0012F6                     l1198:
  4464  0012F6  FFFF               	dw	65535	; assembler added errata NOP
  4465  0012F8  0012               	return		;funcret
  4466  0012FA  FFFF               	dw	65535	; errata NOP
  4467  0012FC                     __end_of_sqrt:
  4468                           	opt stack 0
  4469                           stkptr	equ	0xFFC
  4470                           tblptru	equ	0xFF8
  4471                           tblptrh	equ	0xFF7
  4472                           tblptrl	equ	0xFF6
  4473                           tablat	equ	0xFF5
  4474                           prodh	equ	0xFF4
  4475                           prodl	equ	0xFF3
  4476                           intcon	equ	0xFF2
  4477                           intcon2	equ	0xFF1
  4478                           postinc0	equ	0xFEE
  4479                           wreg	equ	0xFE8
  4480                           indf2	equ	0xFDF
  4481                           fsr2h	equ	0xFDA
  4482                           fsr2l	equ	0xFD9
  4483                           status	equ	0xFD8
  4484                           
  4485 ;; *************** function ___ftsub *****************
  4486 ;; Defined at:
  4487 ;;		line 19 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\ftsub.c"
  4488 ;; Parameters:    Size  Location     Type
  4489 ;;  f1              3   24[COMRAM] float 
  4490 ;;  f2              3   27[COMRAM] float 
  4491 ;; Auto vars:     Size  Location     Type
  4492 ;;		None
  4493 ;; Return value:  Size  Location     Type
  4494 ;;                  3   24[COMRAM] float 
  4495 ;; Registers used:
  4496 ;;		wreg, status,2, status,0, cstack
  4497 ;; Tracked objects:
  4498 ;;		On entry : 0/0
  4499 ;;		On exit  : 0/0
  4500 ;;		Unchanged: 0/0
  4501 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4502 ;;      Params:         6       0       0       0       0       0       0
  4503 ;;      Locals:         0       0       0       0       0       0       0
  4504 ;;      Temps:          0       0       0       0       0       0       0
  4505 ;;      Totals:         6       0       0       0       0       0       0
  4506 ;;Total ram usage:        6 bytes
  4507 ;; Hardware stack levels used:    1
  4508 ;; Hardware stack levels required when called:    5
  4509 ;; This function calls:
  4510 ;;		___ftadd
  4511 ;; This function is called by:
  4512 ;;		_sqrt
  4513 ;; This function uses a non-reentrant model
  4514 ;;
  4515                           
  4516                           	psect	text18
  4517  001F3C                     __ptext18:
  4518                           	opt stack 0
  4519  001F3C                     ___ftsub:
  4520                           	opt stack 0
  4521  001F3C  FFFF               	dw	65535	; assembler added errata NOP
  4522                           
  4523                           ;incstack = 0
  4524  001F3E  501C               	movf	___ftsub@f2,w,c
  4525  001F40  101D               	iorwf	___ftsub@f2+1,w,c
  4526  001F42  101E               	iorwf	___ftsub@f2+2,w,c
  4527  001F44  E002               	bz	l4174
  4528  001F46  0E80               	movlw	128
  4529  001F48  1A1E               	xorwf	___ftsub@f2+2,f,c
  4530  001F4A                     l4174:
  4531  001F4A  C019  F00D         	movff	___ftsub@f1,___ftadd@f1
  4532  001F4E  C01A  F00E         	movff	___ftsub@f1+1,___ftadd@f1+1
  4533  001F52  C01B  F00F         	movff	___ftsub@f1+2,___ftadd@f1+2
  4534  001F56  C01C  F010         	movff	___ftsub@f2,___ftadd@f2
  4535  001F5A  C01D  F011         	movff	___ftsub@f2+1,___ftadd@f2+1
  4536  001F5E  C01E  F012         	movff	___ftsub@f2+2,___ftadd@f2+2
  4537  001F62  EC17  F008         	call	___ftadd	;wreg free
  4538  001F66  C00D  F019         	movff	?___ftadd,?___ftsub
  4539  001F6A  C00E  F01A         	movff	?___ftadd+1,?___ftsub+1
  4540  001F6E  C00F  F01B         	movff	?___ftadd+2,?___ftsub+2
  4541  001F72  0012               	return		;funcret
  4542  001F74  FFFF               	dw	65535	; errata NOP
  4543  001F76                     __end_of___ftsub:
  4544                           	opt stack 0
  4545                           stkptr	equ	0xFFC
  4546                           tblptru	equ	0xFF8
  4547                           tblptrh	equ	0xFF7
  4548                           tblptrl	equ	0xFF6
  4549                           tablat	equ	0xFF5
  4550                           prodh	equ	0xFF4
  4551                           prodl	equ	0xFF3
  4552                           intcon	equ	0xFF2
  4553                           intcon2	equ	0xFF1
  4554                           postinc0	equ	0xFEE
  4555                           wreg	equ	0xFE8
  4556                           indf2	equ	0xFDF
  4557                           fsr2h	equ	0xFDA
  4558                           fsr2l	equ	0xFD9
  4559                           status	equ	0xFD8
  4560                           
  4561 ;; *************** function ___ftadd *****************
  4562 ;; Defined at:
  4563 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\ftadd.c"
  4564 ;; Parameters:    Size  Location     Type
  4565 ;;  f1              3   12[COMRAM] float 
  4566 ;;  f2              3   15[COMRAM] float 
  4567 ;; Auto vars:     Size  Location     Type
  4568 ;;  exp1            1   23[COMRAM] unsigned char 
  4569 ;;  exp2            1   22[COMRAM] unsigned char 
  4570 ;;  sign            1   21[COMRAM] unsigned char 
  4571 ;; Return value:  Size  Location     Type
  4572 ;;                  3   12[COMRAM] float 
  4573 ;; Registers used:
  4574 ;;		wreg, status,2, status,0, cstack
  4575 ;; Tracked objects:
  4576 ;;		On entry : 0/0
  4577 ;;		On exit  : 0/0
  4578 ;;		Unchanged: 0/0
  4579 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4580 ;;      Params:         6       0       0       0       0       0       0
  4581 ;;      Locals:         3       0       0       0       0       0       0
  4582 ;;      Temps:          3       0       0       0       0       0       0
  4583 ;;      Totals:        12       0       0       0       0       0       0
  4584 ;;Total ram usage:       12 bytes
  4585 ;; Hardware stack levels used:    1
  4586 ;; Hardware stack levels required when called:    4
  4587 ;; This function calls:
  4588 ;;		___ftpack
  4589 ;; This function is called by:
  4590 ;;		___ftsub
  4591 ;; This function uses a non-reentrant model
  4592 ;;
  4593                           
  4594                           	psect	text19
  4595  00102E                     __ptext19:
  4596                           	opt stack 0
  4597  00102E                     ___ftadd:
  4598                           	opt stack 0
  4599  00102E  FFFF               	dw	65535	; assembler added errata NOP
  4600                           
  4601                           ;incstack = 0
  4602  001030  C00F  F013         	movff	___ftadd@f1+2,??___ftadd
  4603  001034  6A14               	clrf	(??___ftadd+1)& (0+255),c
  4604  001036  6A15               	clrf	(??___ftadd+2)& (0+255),c
  4605  001038  340E               	rlcf	___ftadd@f1+1,w,c
  4606  00103A  3613               	rlcf	??___ftadd& (0+255),f,c
  4607  00103C  E301               	bnc	u4351
  4608  00103E  8014               	bsf	(??___ftadd+1)& (0+255),0,c
  4609  001040                     u4351:
  4610  001040  5013               	movf	??___ftadd,w,c
  4611  001042  6E18               	movwf	___ftadd@exp1,c
  4612  001044  C012  F013         	movff	___ftadd@f2+2,??___ftadd
  4613  001048  6A14               	clrf	(??___ftadd+1)& (0+255),c
  4614  00104A  6A15               	clrf	(??___ftadd+2)& (0+255),c
  4615  00104C  3411               	rlcf	___ftadd@f2+1,w,c
  4616  00104E  3613               	rlcf	??___ftadd& (0+255),f,c
  4617  001050  E301               	bnc	u4361
  4618  001052  8014               	bsf	(??___ftadd+1)& (0+255),0,c
  4619  001054                     u4361:
  4620  001054  5013               	movf	??___ftadd,w,c
  4621  001056  6E17               	movwf	___ftadd@exp2,c
  4622  001058  5018               	movf	___ftadd@exp1,w,c
  4623  00105A  E009               	bz	u4390
  4624  00105C  5017               	movf	___ftadd@exp2,w,c
  4625  00105E  5C18               	subwf	___ftadd@exp1,w,c
  4626  001060  E20D               	bc	l4000
  4627  001062  5018               	movf	___ftadd@exp1,w,c
  4628  001064  5C17               	subwf	___ftadd@exp2,w,c
  4629  001066  6E13               	movwf	??___ftadd& (0+255),c
  4630  001068  0E18               	movlw	24
  4631  00106A  6413               	cpfsgt	??___ftadd,c
  4632  00106C  D007               	goto	l4000
  4633  00106E                     u4390:
  4634  00106E  C010  F00D         	movff	___ftadd@f2,?___ftadd
  4635  001072  C011  F00E         	movff	___ftadd@f2+1,?___ftadd+1
  4636  001076  C012  F00F         	movff	___ftadd@f2+2,?___ftadd+2
  4637  00107A  D08F               	goto	l882
  4638  00107C                     l4000:
  4639  00107C  FFFF               	dw	65535	; assembler added errata NOP
  4640  00107E  5017               	movf	___ftadd@exp2,w,c
  4641  001080  E009               	bz	u4420
  4642  001082  5018               	movf	___ftadd@exp1,w,c
  4643  001084  5C17               	subwf	___ftadd@exp2,w,c
  4644  001086  E20D               	bc	l4006
  4645  001088  5017               	movf	___ftadd@exp2,w,c
  4646  00108A  5C18               	subwf	___ftadd@exp1,w,c
  4647  00108C  6E13               	movwf	??___ftadd& (0+255),c
  4648  00108E  0E18               	movlw	24
  4649  001090  6413               	cpfsgt	??___ftadd,c
  4650  001092  D007               	goto	l4006
  4651  001094                     u4420:
  4652  001094  C00D  F00D         	movff	___ftadd@f1,?___ftadd
  4653  001098  C00E  F00E         	movff	___ftadd@f1+1,?___ftadd+1
  4654  00109C  C00F  F00F         	movff	___ftadd@f1+2,?___ftadd+2
  4655  0010A0  D07C               	goto	l882
  4656  0010A2                     l4006:
  4657  0010A2  FFFF               	dw	65535	; assembler added errata NOP
  4658  0010A4  0E06               	movlw	6
  4659  0010A6  6E16               	movwf	___ftadd@sign,c
  4660  0010A8  BE0F               	btfsc	___ftadd@f1+2,7,c
  4661  0010AA  8E16               	bsf	___ftadd@sign,7,c
  4662  0010AC  BE12               	btfsc	___ftadd@f2+2,7,c
  4663  0010AE  8C16               	bsf	___ftadd@sign,6,c
  4664  0010B0  8E0E               	bsf	___ftadd@f1+1,7,c
  4665  0010B2  6A0F               	clrf	___ftadd@f1+2,c
  4666  0010B4  8E11               	bsf	___ftadd@f2+1,7,c
  4667  0010B6  6A12               	clrf	___ftadd@f2+2,c
  4668  0010B8  5017               	movf	___ftadd@exp2,w,c
  4669  0010BA  5C18               	subwf	___ftadd@exp1,w,c
  4670  0010BC  E21A               	bc	l4032
  4671  0010BE                     u4450:
  4672  0010BE  FFFF               	dw	65535	; assembler added errata NOP
  4673  0010C0  90D8               	bcf	status,0,c
  4674  0010C2  3610               	rlcf	___ftadd@f2,f,c
  4675  0010C4  3611               	rlcf	___ftadd@f2+1,f,c
  4676  0010C6  3612               	rlcf	___ftadd@f2+2,f,c
  4677  0010C8  0617               	decf	___ftadd@exp2,f,c
  4678  0010CA  5018               	movf	___ftadd@exp1,w,c
  4679  0010CC  1817               	xorwf	___ftadd@exp2,w,c
  4680  0010CE  E00D               	bz	l4030
  4681  0010D0  0616               	decf	___ftadd@sign,f,c
  4682  0010D2  C016  F013         	movff	___ftadd@sign,??___ftadd
  4683  0010D6  0E07               	movlw	7
  4684  0010D8  1613               	andwf	??___ftadd,f,c
  4685  0010DA  E007               	bz	l4030
  4686  0010DC  D7F0               	goto	u4450
  4687  0010DE                     l4028:
  4688  0010DE  FFFF               	dw	65535	; assembler added errata NOP
  4689  0010E0  90D8               	bcf	status,0,c
  4690  0010E2  320F               	rrcf	___ftadd@f1+2,f,c
  4691  0010E4  320E               	rrcf	___ftadd@f1+1,f,c
  4692  0010E6  320D               	rrcf	___ftadd@f1,f,c
  4693  0010E8  2A18               	incf	___ftadd@exp1,f,c
  4694  0010EA                     l4030:
  4695  0010EA  5017               	movf	___ftadd@exp2,w,c
  4696  0010EC  1818               	xorwf	___ftadd@exp1,w,c
  4697  0010EE  E01C               	bz	u4520
  4698  0010F0  D7F6               	goto	l4028
  4699  0010F2                     l4032:
  4700  0010F2  5018               	movf	___ftadd@exp1,w,c
  4701  0010F4  5C17               	subwf	___ftadd@exp2,w,c
  4702  0010F6  E218               	bc	u4520
  4703  0010F8                     u4490:
  4704  0010F8  FFFF               	dw	65535	; assembler added errata NOP
  4705  0010FA  90D8               	bcf	status,0,c
  4706  0010FC  360D               	rlcf	___ftadd@f1,f,c
  4707  0010FE  360E               	rlcf	___ftadd@f1+1,f,c
  4708  001100  360F               	rlcf	___ftadd@f1+2,f,c
  4709  001102  0618               	decf	___ftadd@exp1,f,c
  4710  001104  5018               	movf	___ftadd@exp1,w,c
  4711  001106  1817               	xorwf	___ftadd@exp2,w,c
  4712  001108  E00C               	bz	l4042
  4713  00110A  0616               	decf	___ftadd@sign,f,c
  4714  00110C  C016  F013         	movff	___ftadd@sign,??___ftadd
  4715  001110  0E07               	movlw	7
  4716  001112  1613               	andwf	??___ftadd,f,c
  4717  001114  E006               	bz	l4042
  4718  001116  D7F0               	goto	u4490
  4719  001118                     l4040:
  4720  001118  90D8               	bcf	status,0,c
  4721  00111A  3212               	rrcf	___ftadd@f2+2,f,c
  4722  00111C  3211               	rrcf	___ftadd@f2+1,f,c
  4723  00111E  3210               	rrcf	___ftadd@f2,f,c
  4724  001120  2A17               	incf	___ftadd@exp2,f,c
  4725  001122                     l4042:
  4726  001122  5017               	movf	___ftadd@exp2,w,c
  4727  001124  1818               	xorwf	___ftadd@exp1,w,c
  4728  001126  E1F8               	bnz	l4040
  4729  001128                     u4520:
  4730  001128  AE16               	btfss	___ftadd@sign,7,c
  4731  00112A  D007               	goto	l905
  4732  00112C  1E0D               	comf	___ftadd@f1,f,c
  4733  00112E  1E0E               	comf	___ftadd@f1+1,f,c
  4734  001130  1E0F               	comf	___ftadd@f1+2,f,c
  4735  001132  2A0D               	incf	___ftadd@f1,f,c
  4736  001134  0E00               	movlw	0
  4737  001136  220E               	addwfc	___ftadd@f1+1,f,c
  4738  001138  220F               	addwfc	___ftadd@f1+2,f,c
  4739  00113A                     l905:
  4740  00113A  FFFF               	dw	65535	; assembler added errata NOP
  4741  00113C  AC16               	btfss	___ftadd@sign,6,c
  4742  00113E  D007               	goto	l906
  4743  001140  1E10               	comf	___ftadd@f2,f,c
  4744  001142  1E11               	comf	___ftadd@f2+1,f,c
  4745  001144  1E12               	comf	___ftadd@f2+2,f,c
  4746  001146  2A10               	incf	___ftadd@f2,f,c
  4747  001148  0E00               	movlw	0
  4748  00114A  2211               	addwfc	___ftadd@f2+1,f,c
  4749  00114C  2212               	addwfc	___ftadd@f2+2,f,c
  4750  00114E                     l906:
  4751  00114E  FFFF               	dw	65535	; assembler added errata NOP
  4752  001150  6A16               	clrf	___ftadd@sign,c
  4753  001152  500D               	movf	___ftadd@f1,w,c
  4754  001154  2610               	addwf	___ftadd@f2,f,c
  4755  001156  500E               	movf	___ftadd@f1+1,w,c
  4756  001158  2211               	addwfc	___ftadd@f2+1,f,c
  4757  00115A  500F               	movf	___ftadd@f1+2,w,c
  4758  00115C  2212               	addwfc	___ftadd@f2+2,f,c
  4759  00115E  AE12               	btfss	___ftadd@f2+2,7,c
  4760  001160  D009               	goto	l4052
  4761  001162  1E10               	comf	___ftadd@f2,f,c
  4762  001164  1E11               	comf	___ftadd@f2+1,f,c
  4763  001166  1E12               	comf	___ftadd@f2+2,f,c
  4764  001168  2A10               	incf	___ftadd@f2,f,c
  4765  00116A  0E00               	movlw	0
  4766  00116C  2211               	addwfc	___ftadd@f2+1,f,c
  4767  00116E  2212               	addwfc	___ftadd@f2+2,f,c
  4768  001170  0E01               	movlw	1
  4769  001172  6E16               	movwf	___ftadd@sign,c
  4770  001174                     l4052:
  4771  001174  FFFF               	dw	65535	; assembler added errata NOP
  4772  001176  C010  F005         	movff	___ftadd@f2,___ftpack@arg
  4773  00117A  C011  F006         	movff	___ftadd@f2+1,___ftpack@arg+1
  4774  00117E  C012  F007         	movff	___ftadd@f2+2,___ftpack@arg+2
  4775  001182  C018  F008         	movff	___ftadd@exp1,___ftpack@exp
  4776  001186  C016  F009         	movff	___ftadd@sign,___ftpack@sign
  4777  00118A  EC36  F00D         	call	___ftpack	;wreg free
  4778  00118E  C005  F00D         	movff	?___ftpack,?___ftadd
  4779  001192  C006  F00E         	movff	?___ftpack+1,?___ftadd+1
  4780  001196  C007  F00F         	movff	?___ftpack+2,?___ftadd+2
  4781  00119A                     l882:
  4782  00119A  FFFF               	dw	65535	; assembler added errata NOP
  4783  00119C  0012               	return		;funcret
  4784  00119E  FFFF               	dw	65535	; errata NOP
  4785  0011A0                     __end_of___ftadd:
  4786                           	opt stack 0
  4787                           stkptr	equ	0xFFC
  4788                           tblptru	equ	0xFF8
  4789                           tblptrh	equ	0xFF7
  4790                           tblptrl	equ	0xFF6
  4791                           tablat	equ	0xFF5
  4792                           prodh	equ	0xFF4
  4793                           prodl	equ	0xFF3
  4794                           intcon	equ	0xFF2
  4795                           intcon2	equ	0xFF1
  4796                           postinc0	equ	0xFEE
  4797                           wreg	equ	0xFE8
  4798                           indf2	equ	0xFDF
  4799                           fsr2h	equ	0xFDA
  4800                           fsr2l	equ	0xFD9
  4801                           status	equ	0xFD8
  4802                           
  4803 ;; *************** function ___ftmul *****************
  4804 ;; Defined at:
  4805 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\ftmul.c"
  4806 ;; Parameters:    Size  Location     Type
  4807 ;;  f1              3   12[COMRAM] float 
  4808 ;;  f2              3   15[COMRAM] float 
  4809 ;; Auto vars:     Size  Location     Type
  4810 ;;  f3_as_produc    3   23[COMRAM] unsigned um
  4811 ;;  sign            1   22[COMRAM] unsigned char 
  4812 ;;  exp             1   21[COMRAM] unsigned char 
  4813 ;;  cntr            1    0        unsigned char 
  4814 ;; Return value:  Size  Location     Type
  4815 ;;                  3   12[COMRAM] float 
  4816 ;; Registers used:
  4817 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  4818 ;; Tracked objects:
  4819 ;;		On entry : 0/0
  4820 ;;		On exit  : 0/0
  4821 ;;		Unchanged: 0/0
  4822 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4823 ;;      Params:         6       0       0       0       0       0       0
  4824 ;;      Locals:         5       0       0       0       0       0       0
  4825 ;;      Temps:          3       0       0       0       0       0       0
  4826 ;;      Totals:        14       0       0       0       0       0       0
  4827 ;;Total ram usage:       14 bytes
  4828 ;; Hardware stack levels used:    1
  4829 ;; Hardware stack levels required when called:    4
  4830 ;; This function calls:
  4831 ;;		___ftpack
  4832 ;; This function is called by:
  4833 ;;		_sqrt
  4834 ;; This function uses a non-reentrant model
  4835 ;;
  4836                           
  4837                           	psect	text20
  4838  001520                     __ptext20:
  4839                           	opt stack 0
  4840  001520                     ___ftmul:
  4841                           	opt stack 0
  4842  001520  FFFF               	dw	65535	; assembler added errata NOP
  4843                           
  4844                           ;incstack = 0
  4845  001522  C00F  F013         	movff	___ftmul@f1+2,??___ftmul
  4846  001526  6A14               	clrf	(??___ftmul+1)& (0+255),c
  4847  001528  6A15               	clrf	(??___ftmul+2)& (0+255),c
  4848  00152A  340E               	rlcf	___ftmul@f1+1,w,c
  4849  00152C  3613               	rlcf	??___ftmul& (0+255),f,c
  4850  00152E  E301               	bnc	u4661
  4851  001530  8014               	bsf	(??___ftmul+1)& (0+255),0,c
  4852  001532                     u4661:
  4853  001532  5013               	movf	??___ftmul,w,c
  4854  001534  6E16               	movwf	___ftmul@exp,c
  4855  001536  5016               	movf	___ftmul@exp,w,c
  4856  001538  E101               	bnz	l4136
  4857  00153A  D00C               	goto	u4690
  4858  00153C                     l4136:
  4859  00153C  C012  F013         	movff	___ftmul@f2+2,??___ftmul
  4860  001540  6A14               	clrf	(??___ftmul+1)& (0+255),c
  4861  001542  6A15               	clrf	(??___ftmul+2)& (0+255),c
  4862  001544  3411               	rlcf	___ftmul@f2+1,w,c
  4863  001546  3613               	rlcf	??___ftmul& (0+255),f,c
  4864  001548  E301               	bnc	u4681
  4865  00154A  8014               	bsf	(??___ftmul+1)& (0+255),0,c
  4866  00154C                     u4681:
  4867  00154C  5013               	movf	??___ftmul,w,c
  4868  00154E  6E17               	movwf	___ftmul@sign,c
  4869  001550  5017               	movf	___ftmul@sign,w,c
  4870  001552  E105               	bnz	l4140
  4871  001554                     u4690:
  4872  001554  FFFF               	dw	65535	; assembler added errata NOP
  4873  001556  6A0D               	clrf	?___ftmul,c
  4874  001558  6A0E               	clrf	?___ftmul+1,c
  4875  00155A  6A0F               	clrf	?___ftmul+2,c
  4876  00155C  D04B               	goto	l928
  4877  00155E                     l4140:
  4878  00155E  5017               	movf	___ftmul@sign,w,c
  4879  001560  0F7B               	addlw	123
  4880  001562  2616               	addwf	___ftmul@exp,f,c
  4881  001564  C00F  F017         	movff	___ftmul@f1+2,___ftmul@sign
  4882  001568  5012               	movf	___ftmul@f2+2,w,c
  4883  00156A  1A17               	xorwf	___ftmul@sign,f,c
  4884  00156C  0E80               	movlw	128
  4885  00156E  1617               	andwf	___ftmul@sign,f,c
  4886  001570  8E0E               	bsf	___ftmul@f1+1,7,c
  4887  001572  8E11               	bsf	___ftmul@f2+1,7,c
  4888  001574  6A12               	clrf	___ftmul@f2+2,c
  4889  001576  6A0F               	clrf	___ftmul@f1+2,c
  4890  001578  500D               	movf	___ftmul@f1,w,c
  4891  00157A  0210               	mulwf	___ftmul@f2,c
  4892  00157C  CFF4 FFF3          	movff	prodh,prodl
  4893  001580  6AF4               	clrf	prodh,c
  4894  001582  CFF3 F018          	movff	prodl,___ftmul@f3_as_product
  4895  001586  CFF4 F019          	movff	prodh,___ftmul@f3_as_product+1
  4896  00158A  6A1A               	clrf	___ftmul@f3_as_product+2,c
  4897  00158C  500D               	movf	___ftmul@f1,w,c
  4898  00158E  0211               	mulwf	___ftmul@f2+1,c
  4899  001590  50F3               	movf	prodl,w,c
  4900  001592  2618               	addwf	___ftmul@f3_as_product,f,c
  4901  001594  50F4               	movf	prodh,w,c
  4902  001596  2219               	addwfc	___ftmul@f3_as_product+1,f,c
  4903  001598  0E00               	movlw	0
  4904  00159A  221A               	addwfc	___ftmul@f3_as_product+2,f,c
  4905  00159C  500E               	movf	___ftmul@f1+1,w,c
  4906  00159E  0210               	mulwf	___ftmul@f2,c
  4907  0015A0  50F3               	movf	prodl,w,c
  4908  0015A2  2618               	addwf	___ftmul@f3_as_product,f,c
  4909  0015A4  50F4               	movf	prodh,w,c
  4910  0015A6  2219               	addwfc	___ftmul@f3_as_product+1,f,c
  4911  0015A8  0E00               	movlw	0
  4912  0015AA  221A               	addwfc	___ftmul@f3_as_product+2,f,c
  4913  0015AC  500E               	movf	___ftmul@f1+1,w,c
  4914  0015AE  0211               	mulwf	___ftmul@f2+1,c
  4915  0015B0  50F3               	movf	prodl,w,c
  4916  0015B2  2619               	addwf	___ftmul@f3_as_product+1,f,c
  4917  0015B4  50F4               	movf	prodh,w,c
  4918  0015B6  221A               	addwfc	___ftmul@f3_as_product+2,f,c
  4919  0015B8  AE1A               	btfss	___ftmul@f3_as_product+2,7,c
  4920  0015BA  D005               	goto	l930
  4921  0015BC  90D8               	bcf	status,0,c
  4922  0015BE  321A               	rrcf	___ftmul@f3_as_product+2,f,c
  4923  0015C0  3219               	rrcf	___ftmul@f3_as_product+1,f,c
  4924  0015C2  3218               	rrcf	___ftmul@f3_as_product,f,c
  4925  0015C4  2A16               	incf	___ftmul@exp,f,c
  4926  0015C6                     l930:
  4927  0015C6  FFFF               	dw	65535	; assembler added errata NOP
  4928  0015C8  90D8               	bcf	status,0,c
  4929  0015CA  321A               	rrcf	___ftmul@f3_as_product+2,f,c
  4930  0015CC  3219               	rrcf	___ftmul@f3_as_product+1,f,c
  4931  0015CE  3218               	rrcf	___ftmul@f3_as_product,f,c
  4932  0015D0  C018  F005         	movff	___ftmul@f3_as_product,___ftpack@arg
  4933  0015D4  C019  F006         	movff	___ftmul@f3_as_product+1,___ftpack@arg+1
  4934  0015D8  C01A  F007         	movff	___ftmul@f3_as_product+2,___ftpack@arg+2
  4935  0015DC  C016  F008         	movff	___ftmul@exp,___ftpack@exp
  4936  0015E0  C017  F009         	movff	___ftmul@sign,___ftpack@sign
  4937  0015E4  EC36  F00D         	call	___ftpack	;wreg free
  4938  0015E8  C005  F00D         	movff	?___ftpack,?___ftmul
  4939  0015EC  C006  F00E         	movff	?___ftpack+1,?___ftmul+1
  4940  0015F0  C007  F00F         	movff	?___ftpack+2,?___ftmul+2
  4941  0015F4                     l928:
  4942  0015F4  FFFF               	dw	65535	; assembler added errata NOP
  4943  0015F6  0012               	return		;funcret
  4944  0015F8  FFFF               	dw	65535	; errata NOP
  4945  0015FA                     __end_of___ftmul:
  4946                           	opt stack 0
  4947                           stkptr	equ	0xFFC
  4948                           tblptru	equ	0xFF8
  4949                           tblptrh	equ	0xFF7
  4950                           tblptrl	equ	0xFF6
  4951                           tablat	equ	0xFF5
  4952                           prodh	equ	0xFF4
  4953                           prodl	equ	0xFF3
  4954                           intcon	equ	0xFF2
  4955                           intcon2	equ	0xFF1
  4956                           postinc0	equ	0xFEE
  4957                           wreg	equ	0xFE8
  4958                           indf2	equ	0xFDF
  4959                           fsr2h	equ	0xFDA
  4960                           fsr2l	equ	0xFD9
  4961                           status	equ	0xFD8
  4962                           
  4963 ;; *************** function _readEEPROM16 *****************
  4964 ;; Defined at:
  4965 ;;		line 32 in file "../eep.h"
  4966 ;; Parameters:    Size  Location     Type
  4967 ;;  addr            1    wreg     unsigned char 
  4968 ;; Auto vars:     Size  Location     Type
  4969 ;;  addr            1   12[COMRAM] unsigned char 
  4970 ;;  ee              2   10[COMRAM] unsigned int 
  4971 ;; Return value:  Size  Location     Type
  4972 ;;                  2    5[COMRAM] unsigned int 
  4973 ;; Registers used:
  4974 ;;		wreg, status,2, status,0, cstack
  4975 ;; Tracked objects:
  4976 ;;		On entry : 0/0
  4977 ;;		On exit  : 0/0
  4978 ;;		Unchanged: 0/0
  4979 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4980 ;;      Params:         2       0       0       0       0       0       0
  4981 ;;      Locals:         3       0       0       0       0       0       0
  4982 ;;      Temps:          3       0       0       0       0       0       0
  4983 ;;      Totals:         8       0       0       0       0       0       0
  4984 ;;Total ram usage:        8 bytes
  4985 ;; Hardware stack levels used:    1
  4986 ;; Hardware stack levels required when called:    4
  4987 ;; This function calls:
  4988 ;;		_readEEPROM
  4989 ;; This function is called by:
  4990 ;;		_EEsetupRead
  4991 ;; This function uses a non-reentrant model
  4992 ;;
  4993                           
  4994                           	psect	text21
  4995  002126                     __ptext21:
  4996                           	opt stack 0
  4997  002126                     _readEEPROM16:
  4998                           	opt stack 0
  4999  002126  FFFF               	dw	65535	; assembler added errata NOP
  5000                           
  5001                           ;incstack = 0
  5002                           ;readEEPROM16@addr stored from wreg
  5003  002128  6E0D               	movwf	readEEPROM16@addr,c
  5004                           
  5005                           ;eep.h: 34: unsigned int ee;;eep.h: 35: ee = (unsigned int)(readEEPROM(addr)) | ((unsign
      +                          ed int)(readEEPROM(addr+1)) << 8);
  5006  00212A  500D               	movf	readEEPROM16@addr,w,c
  5007  00212C  EC3E  F011         	call	_readEEPROM
  5008  002130  6E08               	movwf	??_readEEPROM16& (0+255),c
  5009  002132  280D               	incf	readEEPROM16@addr,w,c
  5010  002134  EC3E  F011         	call	_readEEPROM
  5011  002138  6E09               	movwf	(??_readEEPROM16+1)& (0+255),c
  5012  00213A  5008               	movf	??_readEEPROM16,w,c
  5013  00213C  6E0B               	movwf	readEEPROM16@ee,c
  5014  00213E  C009  F00C         	movff	??_readEEPROM16+1,readEEPROM16@ee+1
  5015                           
  5016                           ;eep.h: 36: return(ee);
  5017  002142  C00B  F006         	movff	readEEPROM16@ee,?_readEEPROM16
  5018  002146  C00C  F007         	movff	readEEPROM16@ee+1,?_readEEPROM16+1
  5019  00214A  0012               	return		;funcret
  5020  00214C  FFFF               	dw	65535	; errata NOP
  5021  00214E                     __end_of_readEEPROM16:
  5022                           	opt stack 0
  5023                           stkptr	equ	0xFFC
  5024                           tblptru	equ	0xFF8
  5025                           tblptrh	equ	0xFF7
  5026                           tblptrl	equ	0xFF6
  5027                           tablat	equ	0xFF5
  5028                           prodh	equ	0xFF4
  5029                           prodl	equ	0xFF3
  5030                           intcon	equ	0xFF2
  5031                           intcon2	equ	0xFF1
  5032                           postinc0	equ	0xFEE
  5033                           wreg	equ	0xFE8
  5034                           indf2	equ	0xFDF
  5035                           fsr2h	equ	0xFDA
  5036                           fsr2l	equ	0xFD9
  5037                           status	equ	0xFD8
  5038                           
  5039 ;; *************** function ___lltoft *****************
  5040 ;; Defined at:
  5041 ;;		line 35 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\lltoft.c"
  5042 ;; Parameters:    Size  Location     Type
  5043 ;;  c               4   12[COMRAM] unsigned long 
  5044 ;; Auto vars:     Size  Location     Type
  5045 ;;  exp             1   20[COMRAM] unsigned char 
  5046 ;; Return value:  Size  Location     Type
  5047 ;;                  3   12[COMRAM] float 
  5048 ;; Registers used:
  5049 ;;		wreg, status,2, status,0, cstack
  5050 ;; Tracked objects:
  5051 ;;		On entry : 3F/0
  5052 ;;		On exit  : 0/0
  5053 ;;		Unchanged: 0/0
  5054 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5055 ;;      Params:         4       0       0       0       0       0       0
  5056 ;;      Locals:         1       0       0       0       0       0       0
  5057 ;;      Temps:          4       0       0       0       0       0       0
  5058 ;;      Totals:         9       0       0       0       0       0       0
  5059 ;;Total ram usage:        9 bytes
  5060 ;; Hardware stack levels used:    1
  5061 ;; Hardware stack levels required when called:    4
  5062 ;; This function calls:
  5063 ;;		___ftpack
  5064 ;; This function is called by:
  5065 ;;		_EEsetupRead
  5066 ;; This function uses a non-reentrant model
  5067 ;;
  5068                           
  5069                           	psect	text22
  5070  001E72                     __ptext22:
  5071                           	opt stack 0
  5072  001E72                     ___lltoft:
  5073                           	opt stack 0
  5074  001E72  FFFF               	dw	65535	; assembler added errata NOP
  5075                           
  5076                           ; BSR set to: 0
  5077                           
  5078                           ;incstack = 0
  5079  001E74  0E8E               	movlw	142
  5080  001E76  6E15               	movwf	___lltoft@exp,c
  5081  001E78  D006               	goto	l4274
  5082  001E7A                     l4272:
  5083                           
  5084                           ; BSR set to: 0
  5085  001E7A  90D8               	bcf	status,0,c
  5086  001E7C  3210               	rrcf	___lltoft@c+3,f,c
  5087  001E7E  320F               	rrcf	___lltoft@c+2,f,c
  5088  001E80  320E               	rrcf	___lltoft@c+1,f,c
  5089  001E82  320D               	rrcf	___lltoft@c,f,c
  5090  001E84  2A15               	incf	___lltoft@exp,f,c
  5091  001E86                     l4274:
  5092  001E86  FFFF               	dw	65535	; assembler added errata NOP
  5093                           
  5094                           ; BSR set to: 0
  5095  001E88  6A11               	clrf	??___lltoft& (0+255),c
  5096  001E8A  6A12               	clrf	(??___lltoft+1)& (0+255),c
  5097  001E8C  6A13               	clrf	(??___lltoft+2)& (0+255),c
  5098  001E8E  5010               	movf	___lltoft@c+3,w,c
  5099  001E90  6E14               	movwf	(??___lltoft+3)& (0+255),c
  5100  001E92  5011               	movf	??___lltoft,w,c
  5101  001E94  1012               	iorwf	??___lltoft+1,w,c
  5102  001E96  1013               	iorwf	??___lltoft+2,w,c
  5103  001E98  1014               	iorwf	??___lltoft+3,w,c
  5104  001E9A  E1EF               	bnz	l4272
  5105                           
  5106                           ; BSR set to: 0
  5107  001E9C  C00D  F005         	movff	___lltoft@c,___ftpack@arg
  5108  001EA0  C00E  F006         	movff	___lltoft@c+1,___ftpack@arg+1
  5109  001EA4  C00F  F007         	movff	___lltoft@c+2,___ftpack@arg+2
  5110  001EA8  C015  F008         	movff	___lltoft@exp,___ftpack@exp
  5111  001EAC  0E00               	movlw	0
  5112  001EAE  6E09               	movwf	___ftpack@sign,c
  5113  001EB0  EC36  F00D         	call	___ftpack	;wreg free
  5114  001EB4  C005  F00D         	movff	?___ftpack,?___lltoft
  5115  001EB8  C006  F00E         	movff	?___ftpack+1,?___lltoft+1
  5116  001EBC  C007  F00F         	movff	?___ftpack+2,?___lltoft+2
  5117  001EC0  0012               	return		;funcret
  5118  001EC2  FFFF               	dw	65535	; errata NOP
  5119  001EC4                     __end_of___lltoft:
  5120                           	opt stack 0
  5121                           stkptr	equ	0xFFC
  5122                           tblptru	equ	0xFF8
  5123                           tblptrh	equ	0xFF7
  5124                           tblptrl	equ	0xFF6
  5125                           tablat	equ	0xFF5
  5126                           prodh	equ	0xFF4
  5127                           prodl	equ	0xFF3
  5128                           intcon	equ	0xFF2
  5129                           intcon2	equ	0xFF1
  5130                           postinc0	equ	0xFEE
  5131                           wreg	equ	0xFE8
  5132                           indf2	equ	0xFDF
  5133                           fsr2h	equ	0xFDA
  5134                           fsr2l	equ	0xFD9
  5135                           status	equ	0xFD8
  5136                           
  5137 ;; *************** function ___fttol *****************
  5138 ;; Defined at:
  5139 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\fttol.c"
  5140 ;; Parameters:    Size  Location     Type
  5141 ;;  f1              3   46[COMRAM] float 
  5142 ;; Auto vars:     Size  Location     Type
  5143 ;;  lval            4   56[COMRAM] unsigned long 
  5144 ;;  exp1            1   60[COMRAM] unsigned char 
  5145 ;;  sign1           1   55[COMRAM] unsigned char 
  5146 ;; Return value:  Size  Location     Type
  5147 ;;                  4   46[COMRAM] long 
  5148 ;; Registers used:
  5149 ;;		wreg, status,2, status,0
  5150 ;; Tracked objects:
  5151 ;;		On entry : 0/0
  5152 ;;		On exit  : 0/0
  5153 ;;		Unchanged: 0/0
  5154 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5155 ;;      Params:         4       0       0       0       0       0       0
  5156 ;;      Locals:         6       0       0       0       0       0       0
  5157 ;;      Temps:          5       0       0       0       0       0       0
  5158 ;;      Totals:        15       0       0       0       0       0       0
  5159 ;;Total ram usage:       15 bytes
  5160 ;; Hardware stack levels used:    1
  5161 ;; Hardware stack levels required when called:    3
  5162 ;; This function calls:
  5163 ;;		Nothing
  5164 ;; This function is called by:
  5165 ;;		_EEsetupRead
  5166 ;; This function uses a non-reentrant model
  5167 ;;
  5168                           
  5169                           	psect	text23
  5170  0016CA                     __ptext23:
  5171                           	opt stack 0
  5172  0016CA                     ___fttol:
  5173                           	opt stack 0
  5174  0016CA  FFFF               	dw	65535	; assembler added errata NOP
  5175                           
  5176                           ;incstack = 0
  5177  0016CC  C031  F033         	movff	___fttol@f1+2,??___fttol
  5178  0016D0  6A34               	clrf	(??___fttol+1)& (0+255),c
  5179  0016D2  6A35               	clrf	(??___fttol+2)& (0+255),c
  5180  0016D4  3430               	rlcf	___fttol@f1+1,w,c
  5181  0016D6  3633               	rlcf	??___fttol& (0+255),f,c
  5182  0016D8  E301               	bnc	u4761
  5183  0016DA  8034               	bsf	(??___fttol+1)& (0+255),0,c
  5184  0016DC                     u4761:
  5185  0016DC  5033               	movf	??___fttol,w,c
  5186  0016DE  6E3D               	movwf	___fttol@exp1,c
  5187  0016E0  503D               	movf	___fttol@exp1,w,c
  5188  0016E2  E106               	bnz	l4234
  5189  0016E4                     u4770:
  5190  0016E4  FFFF               	dw	65535	; assembler added errata NOP
  5191  0016E6  6A2F               	clrf	?___fttol,c
  5192  0016E8  6A30               	clrf	?___fttol+1,c
  5193  0016EA  6A31               	clrf	?___fttol+2,c
  5194  0016EC  6A32               	clrf	?___fttol+3,c
  5195  0016EE  D050               	goto	l944
  5196  0016F0                     l4234:
  5197  0016F0  0E17               	movlw	23
  5198  0016F2  6E33               	movwf	??___fttol& (0+255),c
  5199  0016F4  C02F  F034         	movff	___fttol@f1,??___fttol+1
  5200  0016F8  C030  F035         	movff	___fttol@f1+1,??___fttol+2
  5201  0016FC  C031  F036         	movff	___fttol@f1+2,??___fttol+3
  5202  001700  2833               	incf	??___fttol,w,c
  5203  001702  6E37               	movwf	(??___fttol+4)& (0+255),c
  5204  001704  D005               	goto	u4780
  5205  001706                     u4785:
  5206  001706  FFFF               	dw	65535	; assembler added errata NOP
  5207  001708  90D8               	bcf	status,0,c
  5208  00170A  3236               	rrcf	??___fttol+3,f,c
  5209  00170C  3235               	rrcf	??___fttol+2,f,c
  5210  00170E  3234               	rrcf	??___fttol+1,f,c
  5211  001710                     u4780:
  5212  001710  FFFF               	dw	65535	; assembler added errata NOP
  5213  001712  2E37               	decfsz	(??___fttol+4)& (0+255),f,c
  5214  001714  D7F8               	goto	u4785
  5215  001716  5034               	movf	??___fttol+1,w,c
  5216  001718  6E38               	movwf	___fttol@sign1,c
  5217  00171A  8E30               	bsf	___fttol@f1+1,7,c
  5218  00171C  6A31               	clrf	___fttol@f1+2,c
  5219  00171E  502F               	movf	___fttol@f1,w,c
  5220  001720  6E39               	movwf	___fttol@lval,c
  5221  001722  5030               	movf	___fttol@f1+1,w,c
  5222  001724  6E3A               	movwf	___fttol@lval+1,c
  5223  001726  5031               	movf	___fttol@f1+2,w,c
  5224  001728  6E3B               	movwf	___fttol@lval+2,c
  5225  00172A  6A3C               	clrf	___fttol@lval+3,c
  5226  00172C  0E8E               	movlw	142
  5227  00172E  5E3D               	subwf	___fttol@exp1,f,c
  5228  001730  AE3D               	btfss	___fttol@exp1,7,c
  5229  001732  D00D               	goto	l4254
  5230  001734  503D               	movf	___fttol@exp1,w,c
  5231  001736  0A80               	xorlw	128
  5232  001738  0F8F               	addlw	143
  5233  00173A  E3D4               	bnc	u4770
  5234  00173C                     l4250:
  5235  00173C  FFFF               	dw	65535	; assembler added errata NOP
  5236  00173E  90D8               	bcf	status,0,c
  5237  001740  323C               	rrcf	___fttol@lval+3,f,c
  5238  001742  323B               	rrcf	___fttol@lval+2,f,c
  5239  001744  323A               	rrcf	___fttol@lval+1,f,c
  5240  001746  3239               	rrcf	___fttol@lval,f,c
  5241  001748  3E3D               	incfsz	___fttol@exp1,f,c
  5242  00174A  D7F8               	goto	l4250
  5243  00174C  D00E               	goto	u4820
  5244  00174E                     l4254:
  5245  00174E  FFFF               	dw	65535	; assembler added errata NOP
  5246  001750  0E17               	movlw	23
  5247  001752  643D               	cpfsgt	___fttol@exp1,c
  5248  001754  D007               	goto	l4260
  5249  001756  D7C6               	goto	u4770
  5250  001758                     l4258:
  5251  001758  90D8               	bcf	status,0,c
  5252  00175A  3639               	rlcf	___fttol@lval,f,c
  5253  00175C  363A               	rlcf	___fttol@lval+1,f,c
  5254  00175E  363B               	rlcf	___fttol@lval+2,f,c
  5255  001760  363C               	rlcf	___fttol@lval+3,f,c
  5256  001762  063D               	decf	___fttol@exp1,f,c
  5257  001764                     l4260:
  5258  001764  FFFF               	dw	65535	; assembler added errata NOP
  5259  001766  503D               	movf	___fttol@exp1,w,c
  5260  001768  E1F7               	bnz	l4258
  5261  00176A                     u4820:
  5262  00176A  FFFF               	dw	65535	; assembler added errata NOP
  5263  00176C  5038               	movf	___fttol@sign1,w,c
  5264  00176E  E008               	bz	l4266
  5265  001770  1E3C               	comf	___fttol@lval+3,f,c
  5266  001772  1E3B               	comf	___fttol@lval+2,f,c
  5267  001774  1E3A               	comf	___fttol@lval+1,f,c
  5268  001776  6C39               	negf	___fttol@lval,c
  5269  001778  0E00               	movlw	0
  5270  00177A  223A               	addwfc	___fttol@lval+1,f,c
  5271  00177C  223B               	addwfc	___fttol@lval+2,f,c
  5272  00177E  223C               	addwfc	___fttol@lval+3,f,c
  5273  001780                     l4266:
  5274  001780  C039  F02F         	movff	___fttol@lval,?___fttol
  5275  001784  C03A  F030         	movff	___fttol@lval+1,?___fttol+1
  5276  001788  C03B  F031         	movff	___fttol@lval+2,?___fttol+2
  5277  00178C  C03C  F032         	movff	___fttol@lval+3,?___fttol+3
  5278  001790                     l944:
  5279  001790  FFFF               	dw	65535	; assembler added errata NOP
  5280  001792  0012               	return		;funcret
  5281  001794  FFFF               	dw	65535	; errata NOP
  5282  001796                     __end_of___fttol:
  5283                           	opt stack 0
  5284                           stkptr	equ	0xFFC
  5285                           tblptru	equ	0xFF8
  5286                           tblptrh	equ	0xFF7
  5287                           tblptrl	equ	0xFF6
  5288                           tablat	equ	0xFF5
  5289                           prodh	equ	0xFF4
  5290                           prodl	equ	0xFF3
  5291                           intcon	equ	0xFF2
  5292                           intcon2	equ	0xFF1
  5293                           postinc0	equ	0xFEE
  5294                           wreg	equ	0xFE8
  5295                           indf2	equ	0xFDF
  5296                           fsr2h	equ	0xFDA
  5297                           fsr2l	equ	0xFD9
  5298                           status	equ	0xFD8
  5299                           
  5300 ;; *************** function _EEmbandRead *****************
  5301 ;; Defined at:
  5302 ;;		line 77 in file "../eep.h"
  5303 ;; Parameters:    Size  Location     Type
  5304 ;;		None
  5305 ;; Auto vars:     Size  Location     Type
  5306 ;;		None
  5307 ;; Return value:  Size  Location     Type
  5308 ;;                  1    wreg      void 
  5309 ;; Registers used:
  5310 ;;		wreg, status,2, status,0, cstack
  5311 ;; Tracked objects:
  5312 ;;		On entry : 3F/0
  5313 ;;		On exit  : 0/0
  5314 ;;		Unchanged: 0/0
  5315 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5316 ;;      Params:         0       0       0       0       0       0       0
  5317 ;;      Locals:         0       0       0       0       0       0       0
  5318 ;;      Temps:          0       0       0       0       0       0       0
  5319 ;;      Totals:         0       0       0       0       0       0       0
  5320 ;;Total ram usage:        0 bytes
  5321 ;; Hardware stack levels used:    1
  5322 ;; Hardware stack levels required when called:    4
  5323 ;; This function calls:
  5324 ;;		_readEEPROM
  5325 ;; This function is called by:
  5326 ;;		_ReadStatusFromLCD
  5327 ;;		_main
  5328 ;; This function uses a non-reentrant model
  5329 ;;
  5330                           
  5331                           	psect	text24
  5332  00219C                     __ptext24:
  5333                           	opt stack 0
  5334  00219C                     _EEmbandRead:
  5335                           	opt stack 0
  5336  00219C  FFFF               	dw	65535	; assembler added errata NOP
  5337                           
  5338                           ; BSR set to: 0
  5339                           ;eep.h: 79: band = readEEPROM(26)&0x0F;
  5340                           
  5341                           ;incstack = 0
  5342  00219E  0E1A               	movlw	26
  5343  0021A0  EC3E  F011         	call	_readEEPROM
  5344  0021A4  0B0F               	andlw	15
  5345  0021A6  6E57               	movwf	_band,c	;volatile
  5346                           
  5347                           ;eep.h: 80: aband = readEEPROM(27)&0x01;
  5348  0021A8  0E1B               	movlw	27
  5349  0021AA  EC3E  F011         	call	_readEEPROM
  5350  0021AE  0B01               	andlw	1
  5351  0021B0  0100               	movlb	0	; () banked
  5352  0021B2  6FF1               	movwf	_aband& (0+255),b	;volatile
  5353                           
  5354                           ;eep.h: 81: bypass = readEEPROM(28)&0x01;
  5355  0021B4  0E1C               	movlw	28
  5356  0021B6  EC3E  F011         	call	_readEEPROM
  5357  0021BA  0B01               	andlw	1
  5358  0021BC  6E58               	movwf	_bypass,c	;volatile
  5359  0021BE  0012               	return		;funcret
  5360  0021C0  FFFF               	dw	65535	; errata NOP
  5361  0021C2                     __end_of_EEmbandRead:
  5362                           	opt stack 0
  5363                           stkptr	equ	0xFFC
  5364                           tblptru	equ	0xFF8
  5365                           tblptrh	equ	0xFF7
  5366                           tblptrl	equ	0xFF6
  5367                           tablat	equ	0xFF5
  5368                           prodh	equ	0xFF4
  5369                           prodl	equ	0xFF3
  5370                           intcon	equ	0xFF2
  5371                           intcon2	equ	0xFF1
  5372                           postinc0	equ	0xFEE
  5373                           wreg	equ	0xFE8
  5374                           indf2	equ	0xFDF
  5375                           fsr2h	equ	0xFDA
  5376                           fsr2l	equ	0xFD9
  5377                           status	equ	0xFD8
  5378                           
  5379 ;; *************** function _readEEPROM *****************
  5380 ;; Defined at:
  5381 ;;		line 2 in file "../eep.h"
  5382 ;; Parameters:    Size  Location     Type
  5383 ;;  addr            1    wreg     unsigned char 
  5384 ;; Auto vars:     Size  Location     Type
  5385 ;;  addr            1    4[COMRAM] unsigned char 
  5386 ;; Return value:  Size  Location     Type
  5387 ;;                  1    wreg      unsigned char 
  5388 ;; Registers used:
  5389 ;;		wreg, status,2
  5390 ;; Tracked objects:
  5391 ;;		On entry : 0/0
  5392 ;;		On exit  : 0/0
  5393 ;;		Unchanged: 0/0
  5394 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5395 ;;      Params:         0       0       0       0       0       0       0
  5396 ;;      Locals:         1       0       0       0       0       0       0
  5397 ;;      Temps:          0       0       0       0       0       0       0
  5398 ;;      Totals:         1       0       0       0       0       0       0
  5399 ;;Total ram usage:        1 bytes
  5400 ;; Hardware stack levels used:    1
  5401 ;; Hardware stack levels required when called:    3
  5402 ;; This function calls:
  5403 ;;		Nothing
  5404 ;; This function is called by:
  5405 ;;		_readEEPROM16
  5406 ;;		_EEsetupRead
  5407 ;;		_EEmbandRead
  5408 ;; This function uses a non-reentrant model
  5409 ;;
  5410                           
  5411                           	psect	text25
  5412  00227C                     __ptext25:
  5413                           	opt stack 0
  5414  00227C                     _readEEPROM:
  5415                           	opt stack 0
  5416  00227C  FFFF               	dw	65535	; assembler added errata NOP
  5417                           
  5418                           ;incstack = 0
  5419                           ;readEEPROM@addr stored from wreg
  5420  00227E  6E05               	movwf	readEEPROM@addr,c
  5421                           
  5422                           ;eep.h: 4: EECON1 = 0;
  5423  002280  6AA6               	clrf	4006,c	;volsfr
  5424                           
  5425                           ;eep.h: 5: EEADR = addr;
  5426  002282  C005  FFA9         	movff	readEEPROM@addr,4009	;volatile
  5427                           
  5428                           ;eep.h: 6: EECON1bits.RD = 1;
  5429  002286  80A6               	bsf	4006,0,c	;volsfr
  5430                           
  5431                           ;eep.h: 7: __nop();
  5432  002288  F000               	nop	
  5433                           
  5434                           ;eep.h: 8: __nop();
  5435  00228A  F000               	nop	
  5436                           
  5437                           ;eep.h: 9: __nop();
  5438  00228C  F000               	nop	
  5439                           
  5440                           ;eep.h: 10: __nop();
  5441  00228E  F000               	nop	
  5442                           
  5443                           ;eep.h: 11: return EEDATA;
  5444  002290  50A8               	movf	4008,w,c	;volatile
  5445  002292  0012               	return		;funcret
  5446  002294  FFFF               	dw	65535	; errata NOP
  5447  002296                     __end_of_readEEPROM:
  5448                           	opt stack 0
  5449                           stkptr	equ	0xFFC
  5450                           tblptru	equ	0xFF8
  5451                           tblptrh	equ	0xFF7
  5452                           tblptrl	equ	0xFF6
  5453                           tablat	equ	0xFF5
  5454                           prodh	equ	0xFF4
  5455                           prodl	equ	0xFF3
  5456                           intcon	equ	0xFF2
  5457                           intcon2	equ	0xFF1
  5458                           postinc0	equ	0xFEE
  5459                           wreg	equ	0xFE8
  5460                           indf2	equ	0xFDF
  5461                           fsr2h	equ	0xFDA
  5462                           fsr2l	equ	0xFD9
  5463                           status	equ	0xFD8
  5464                           
  5465 ;; *************** function _Beep *****************
  5466 ;; Defined at:
  5467 ;;		line 79 in file "../digital.h"
  5468 ;; Parameters:    Size  Location     Type
  5469 ;;		None
  5470 ;; Auto vars:     Size  Location     Type
  5471 ;;		None
  5472 ;; Return value:  Size  Location     Type
  5473 ;;                  1    wreg      void 
  5474 ;; Registers used:
  5475 ;;		wreg, status,2, status,0, cstack
  5476 ;; Tracked objects:
  5477 ;;		On entry : 0/0
  5478 ;;		On exit  : 0/0
  5479 ;;		Unchanged: 0/0
  5480 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5481 ;;      Params:         0       0       0       0       0       0       0
  5482 ;;      Locals:         0       0       0       0       0       0       0
  5483 ;;      Temps:          0       0       0       0       0       0       0
  5484 ;;      Totals:         0       0       0       0       0       0       0
  5485 ;;Total ram usage:        0 bytes
  5486 ;; Hardware stack levels used:    1
  5487 ;; Hardware stack levels required when called:    4
  5488 ;; This function calls:
  5489 ;;		_DelayMs
  5490 ;; This function is called by:
  5491 ;;		_ReadStatusFromLCD
  5492 ;;		_main
  5493 ;; This function uses a non-reentrant model
  5494 ;;
  5495                           
  5496                           	psect	text26
  5497  002228                     __ptext26:
  5498                           	opt stack 0
  5499  002228                     _Beep:
  5500                           	opt stack 0
  5501  002228  FFFF               	dw	65535	; assembler added errata NOP
  5502                           
  5503                           ;digital.h: 81: if (!beeper) return;
  5504                           
  5505                           ;incstack = 0
  5506  00222A  0100               	movlb	0	; () banked
  5507  00222C  51EE               	movf	_beeper& (0+255),w,b	;volatile
  5508  00222E  E008               	bz	l340
  5509                           
  5510                           ; BSR set to: 0
  5511                           ;digital.h: 82: LATCbits.LC5 = 1; DelayMs(100);
  5512  002230  8A8B               	bsf	3979,5,c	;volatile
  5513                           
  5514                           ; BSR set to: 0
  5515  002232  0E64               	movlw	100
  5516  002234  ECE1  F010         	call	_DelayMs
  5517                           
  5518                           ;digital.h: 83: LATCbits.LC5 = 0; DelayMs(100);
  5519  002238  9A8B               	bcf	3979,5,c	;volatile
  5520  00223A  0E64               	movlw	100
  5521  00223C  ECE1  F010         	call	_DelayMs
  5522  002240                     l340:
  5523  002240  0012               	return		;funcret
  5524  002242  FFFF               	dw	65535	; errata NOP
  5525  002244                     __end_of_Beep:
  5526                           	opt stack 0
  5527                           stkptr	equ	0xFFC
  5528                           tblptru	equ	0xFF8
  5529                           tblptrh	equ	0xFF7
  5530                           tblptrl	equ	0xFF6
  5531                           tablat	equ	0xFF5
  5532                           prodh	equ	0xFF4
  5533                           prodl	equ	0xFF3
  5534                           intcon	equ	0xFF2
  5535                           intcon2	equ	0xFF1
  5536                           postinc0	equ	0xFEE
  5537                           wreg	equ	0xFE8
  5538                           indf2	equ	0xFDF
  5539                           fsr2h	equ	0xFDA
  5540                           fsr2l	equ	0xFD9
  5541                           status	equ	0xFD8
  5542                           
  5543 ;; *************** function _ProtectCheck *****************
  5544 ;; Defined at:
  5545 ;;		line 199 in file "../digital.h"
  5546 ;; Parameters:    Size  Location     Type
  5547 ;;		None
  5548 ;; Auto vars:     Size  Location     Type
  5549 ;;		None
  5550 ;; Return value:  Size  Location     Type
  5551 ;;                  1    wreg      void 
  5552 ;; Registers used:
  5553 ;;		wreg, status,2, status,0, cstack
  5554 ;; Tracked objects:
  5555 ;;		On entry : 3F/0
  5556 ;;		On exit  : 3F/0
  5557 ;;		Unchanged: 0/0
  5558 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5559 ;;      Params:         0       0       0       0       0       0       0
  5560 ;;      Locals:         0       0       0       0       0       0       0
  5561 ;;      Temps:          0       0       0       0       0       0       0
  5562 ;;      Totals:         0       0       0       0       0       0       0
  5563 ;;Total ram usage:        0 bytes
  5564 ;; Hardware stack levels used:    1
  5565 ;; Hardware stack levels required when called:    8
  5566 ;; This function calls:
  5567 ;;		_PTT_read
  5568 ;;		_SwitchOFF
  5569 ;; This function is called by:
  5570 ;;		_main
  5571 ;; This function uses a non-reentrant model
  5572 ;;
  5573                           
  5574                           	psect	text27
  5575  00143A                     __ptext27:
  5576                           	opt stack 0
  5577  00143A                     _ProtectCheck:
  5578                           	opt stack 0
  5579  00143A  FFFF               	dw	65535	; assembler added errata NOP
  5580                           
  5581                           ; BSR set to: 0
  5582                           
  5583                           ;incstack = 0
  5584  00143C  0004               	clrwdt		;# 
  5585                           
  5586                           ;digital.h: 207: if (frwd >= max_pwr) err |= 0x01;
  5587  00143E  0100               	movlb	0	; () banked
  5588  001440  51E9               	movf	_max_pwr& (0+255),w,b	;volatile
  5589  001442  5C50               	subwf	_frwd,w,c	;volatile
  5590  001444  51EA               	movf	(_max_pwr+1)& (0+255),w,b	;volatile
  5591  001446  5851               	subwfb	_frwd+1,w,c	;volatile
  5592  001448  E301               	bnc	l4334
  5593                           
  5594                           ; BSR set to: 0
  5595  00144A  8054               	bsf	_err,0,c	;volatile
  5596  00144C                     l4334:
  5597                           
  5598                           ; BSR set to: 0
  5599                           ;digital.h: 209: if (refl >= max_ref) err |= 0x02;
  5600  00144C  51E7               	movf	_max_ref& (0+255),w,b	;volatile
  5601  00144E  5C4E               	subwf	_refl,w,c	;volatile
  5602  001450  51E8               	movf	(_max_ref+1)& (0+255),w,b	;volatile
  5603  001452  584F               	subwfb	_refl+1,w,c	;volatile
  5604  001454  E301               	bnc	l4338
  5605                           
  5606                           ; BSR set to: 0
  5607  001456  8254               	bsf	_err,1,c	;volatile
  5608  001458                     l4338:
  5609                           
  5610                           ; BSR set to: 0
  5611                           ;digital.h: 211: if (curr >= max_curr) err |= 0x04;
  5612  001458  51E3               	movf	_max_curr& (0+255),w,b	;volatile
  5613  00145A  5C4C               	subwf	_curr,w,c	;volatile
  5614  00145C  51E4               	movf	(_max_curr+1)& (0+255),w,b	;volatile
  5615  00145E  584D               	subwfb	_curr+1,w,c	;volatile
  5616  001460  E301               	bnc	l4342
  5617                           
  5618                           ; BSR set to: 0
  5619  001462  8454               	bsf	_err,2,c	;volatile
  5620  001464                     l4342:
  5621                           
  5622                           ; BSR set to: 0
  5623                           ;digital.h: 213: if ((curr >= lpferrC) && (frwd <= lpferrP))
  5624  001464  51DB               	movf	_lpferrC& (0+255),w,b	;volatile
  5625  001466  5C4C               	subwf	_curr,w,c	;volatile
  5626  001468  51DC               	movf	(_lpferrC+1)& (0+255),w,b	;volatile
  5627  00146A  584D               	subwfb	_curr+1,w,c	;volatile
  5628  00146C  E30E               	bnc	l403
  5629                           
  5630                           ; BSR set to: 0
  5631  00146E  5050               	movf	_frwd,w,c	;volatile
  5632  001470  5DDD               	subwf	_lpferrP& (0+255),w,b	;volatile
  5633  001472  5051               	movf	_frwd+1,w,c	;volatile
  5634  001474  59DE               	subwfb	(_lpferrP+1)& (0+255),w,b	;volatile
  5635  001476  E309               	bnc	l403
  5636                           
  5637                           ; BSR set to: 0
  5638                           ;digital.h: 214: {;digital.h: 215: if (++elpf >= lpferrR) err |= 0x10;
  5639  001478  4B6C               	infsnz	_elpf& (0+255),f,b	;volatile
  5640  00147A  2B6D               	incf	(_elpf+1)& (0+255),f,b	;volatile
  5641  00147C  51D9               	movf	_lpferrR& (0+255),w,b	;volatile
  5642  00147E  5D6C               	subwf	_elpf& (0+255),w,b	;volatile
  5643  001480  51DA               	movf	(_lpferrR+1)& (0+255),w,b	;volatile
  5644  001482  596D               	subwfb	(_elpf+1)& (0+255),w,b	;volatile
  5645  001484  E304               	bnc	l4350
  5646                           
  5647                           ; BSR set to: 0
  5648  001486  8854               	bsf	_err,4,c	;volatile
  5649  001488  D002               	goto	l4350
  5650  00148A                     l403:
  5651                           
  5652                           ; BSR set to: 0
  5653                           ;digital.h: 217: else elpf = 0;
  5654  00148A  6B6C               	clrf	_elpf& (0+255),b	;volatile
  5655  00148C  6B6D               	clrf	(_elpf+1)& (0+255),b	;volatile
  5656  00148E                     l4350:
  5657  00148E  FFFF               	dw	65535	; assembler added errata NOP
  5658                           
  5659                           ; BSR set to: 0
  5660                           ;digital.h: 219: if (temp >= max_temp) err |= 0x20;
  5661  001490  51E1               	movf	_max_temp& (0+255),w,b	;volatile
  5662  001492  5C4A               	subwf	_temp,w,c	;volatile
  5663  001494  51E2               	movf	(_max_temp+1)& (0+255),w,b	;volatile
  5664  001496  584B               	subwfb	_temp+1,w,c	;volatile
  5665  001498  E301               	bnc	l4354
  5666                           
  5667                           ; BSR set to: 0
  5668  00149A  8A54               	bsf	_err,5,c	;volatile
  5669  00149C                     l4354:
  5670                           
  5671                           ; BSR set to: 0
  5672                           ;digital.h: 221: if (volt >= max_volt) err |= 0x40;
  5673  00149C  51E5               	movf	_max_volt& (0+255),w,b	;volatile
  5674  00149E  5D82               	subwf	_volt& (0+255),w,b	;volatile
  5675  0014A0  51E6               	movf	(_max_volt+1)& (0+255),w,b	;volatile
  5676  0014A2  5983               	subwfb	(_volt+1)& (0+255),w,b	;volatile
  5677  0014A4  E301               	bnc	l4358
  5678                           
  5679                           ; BSR set to: 0
  5680  0014A6  8C54               	bsf	_err,6,c	;volatile
  5681  0014A8                     l4358:
  5682                           
  5683                           ; BSR set to: 0
  5684                           ;digital.h: 223: if (ptt_hold)
  5685  0014A8  51EB               	movf	_ptt_hold& (0+255),w,b	;volatile
  5686  0014AA  E004               	bz	l4364
  5687                           
  5688                           ; BSR set to: 0
  5689                           ;digital.h: 224: {;digital.h: 225: if (ptt_htimer >= ptt_hold) err |= 0x08;
  5690  0014AC  51EB               	movf	_ptt_hold& (0+255),w,b	;volatile
  5691  0014AE  5D88               	subwf	_ptt_htimer& (0+255),w,b	;volatile
  5692  0014B0  E301               	bnc	l4364
  5693                           
  5694                           ; BSR set to: 0
  5695  0014B2  8654               	bsf	_err,3,c	;volatile
  5696  0014B4                     l4364:
  5697                           
  5698                           ; BSR set to: 0
  5699                           ;digital.h: 226: };digital.h: 228: if (err)
  5700  0014B4  5054               	movf	_err,w,c	;volatile
  5701  0014B6  E02B               	bz	l410
  5702                           
  5703                           ; BSR set to: 0
  5704                           ;digital.h: 229: {;digital.h: 230: SwitchOFF();
  5705  0014B8  EC63  F011         	call	_SwitchOFF	;wreg free
  5706                           
  5707                           ; BSR set to: 0
  5708                           ;digital.h: 232: if (!beeper) return;
  5709  0014BC  51EE               	movf	_beeper& (0+255),w,b	;volatile
  5710  0014BE  E02D               	bz	l412
  5711                           
  5712                           ; BSR set to: 0
  5713                           ;digital.h: 233: if (err & 0x20) beepPer = 2500*10;
  5714  0014C0  AA54               	btfss	_err,5,c	;volatile
  5715  0014C2  D004               	goto	l4374
  5716                           
  5717                           ; BSR set to: 0
  5718  0014C4  0E61               	movlw	97
  5719  0014C6  6F65               	movwf	(ProtectCheck@beepPer+1)& (0+255),b
  5720  0014C8  0EA8               	movlw	168
  5721  0014CA  D004               	goto	L2
  5722  0014CC                     l4374:
  5723  0014CC  FFFF               	dw	65535	; assembler added errata NOP
  5724                           
  5725                           ; BSR set to: 0
  5726                           ;digital.h: 234: else beepPer = 2500;
  5727  0014CE  0E09               	movlw	9
  5728  0014D0  6F65               	movwf	(ProtectCheck@beepPer+1)& (0+255),b
  5729  0014D2  0EC4               	movlw	196
  5730  0014D4                     L2:
  5731  0014D4  FFFF               	dw	65535	; assembler added errata NOP
  5732  0014D6  6F64               	movwf	ProtectCheck@beepPer& (0+255),b
  5733                           
  5734                           ; BSR set to: 0
  5735                           ;digital.h: 236: if (bp == 0)
  5736  0014D8  5184               	movf	ProtectCheck@bp& (0+255),w,b
  5737  0014DA  E10B               	bnz	l415
  5738                           
  5739                           ; BSR set to: 0
  5740                           ;digital.h: 237: {;digital.h: 238: LATCbits.LC5 = 1;
  5741  0014DC  8A8B               	bsf	3979,5,c	;volatile
  5742                           
  5743                           ; BSR set to: 0
  5744                           ;digital.h: 239: if (++bpt >= 2500) {bp = 1; bpt = 0;}
  5745  0014DE  4B66               	infsnz	ProtectCheck@bpt& (0+255),f,b
  5746  0014E0  2B67               	incf	(ProtectCheck@bpt+1)& (0+255),f,b
  5747  0014E2  0EC4               	movlw	196
  5748  0014E4  5D66               	subwf	ProtectCheck@bpt& (0+255),w,b
  5749  0014E6  0E09               	movlw	9
  5750  0014E8  5967               	subwfb	(ProtectCheck@bpt+1)& (0+255),w,b
  5751  0014EA  E317               	bnc	l412
  5752                           
  5753                           ; BSR set to: 0
  5754  0014EC  0E01               	movlw	1
  5755  0014EE  6F84               	movwf	ProtectCheck@bp& (0+255),b
  5756  0014F0  D00A               	goto	L3
  5757  0014F2                     l415:
  5758                           
  5759                           ; BSR set to: 0
  5760                           ;digital.h: 241: else;digital.h: 242: {;digital.h: 243: LATCbits.LC5 = 0;
  5761  0014F2  9A8B               	bcf	3979,5,c	;volatile
  5762                           
  5763                           ; BSR set to: 0
  5764                           ;digital.h: 244: if (++bpt >= beepPer) {bp = 0; bpt = 0;}
  5765  0014F4  4B66               	infsnz	ProtectCheck@bpt& (0+255),f,b
  5766  0014F6  2B67               	incf	(ProtectCheck@bpt+1)& (0+255),f,b
  5767  0014F8  5164               	movf	ProtectCheck@beepPer& (0+255),w,b
  5768  0014FA  5D66               	subwf	ProtectCheck@bpt& (0+255),w,b
  5769  0014FC  5165               	movf	(ProtectCheck@beepPer+1)& (0+255),w,b
  5770  0014FE  5967               	subwfb	(ProtectCheck@bpt+1)& (0+255),w,b
  5771  001500  E30C               	bnc	l412
  5772  001502                     u5020:
  5773  001502  FFFF               	dw	65535	; assembler added errata NOP
  5774                           
  5775                           ; BSR set to: 0
  5776  001504  6B84               	clrf	ProtectCheck@bp& (0+255),b
  5777  001506                     L3:
  5778  001506  FFFF               	dw	65535	; assembler added errata NOP
  5779  001508  6B66               	clrf	ProtectCheck@bpt& (0+255),b
  5780  00150A  6B67               	clrf	(ProtectCheck@bpt+1)& (0+255),b
  5781  00150C  D006               	goto	l412
  5782  00150E                     l410:
  5783                           
  5784                           ; BSR set to: 0
  5785                           ;digital.h: 247: else;digital.h: 248: {;digital.h: 249: LATEbits.LE1 = 1;
  5786  00150E  828D               	bsf	3981,1,c	;volatile
  5787                           
  5788                           ; BSR set to: 0
  5789                           ;digital.h: 250: PTT_read();
  5790  001510  EC22  F011         	call	_PTT_read	;wreg free
  5791                           
  5792                           ;digital.h: 252: LATCbits.LC5 = 0; bp = 0; bpt = 0;
  5793  001514  9A8B               	bcf	3979,5,c	;volatile
  5794  001516  0100               	movlb	0	; () banked
  5795  001518  D7F4               	goto	u5020
  5796  00151A                     l412:
  5797  00151A  FFFF               	dw	65535	; assembler added errata NOP
  5798                           
  5799                           ; BSR set to: 0
  5800  00151C  0012               	return		;funcret
  5801  00151E  FFFF               	dw	65535	; errata NOP
  5802  001520                     __end_of_ProtectCheck:
  5803                           	opt stack 0
  5804                           stkptr	equ	0xFFC
  5805                           tblptru	equ	0xFF8
  5806                           tblptrh	equ	0xFF7
  5807                           tblptrl	equ	0xFF6
  5808                           tablat	equ	0xFF5
  5809                           prodh	equ	0xFF4
  5810                           prodl	equ	0xFF3
  5811                           intcon	equ	0xFF2
  5812                           intcon2	equ	0xFF1
  5813                           postinc0	equ	0xFEE
  5814                           wreg	equ	0xFE8
  5815                           indf2	equ	0xFDF
  5816                           fsr2h	equ	0xFDA
  5817                           fsr2l	equ	0xFD9
  5818                           status	equ	0xFD8
  5819                           
  5820 ;; *************** function _SwitchOFF *****************
  5821 ;; Defined at:
  5822 ;;		line 86 in file "../digital.h"
  5823 ;; Parameters:    Size  Location     Type
  5824 ;;		None
  5825 ;; Auto vars:     Size  Location     Type
  5826 ;;		None
  5827 ;; Return value:  Size  Location     Type
  5828 ;;                  1    wreg      void 
  5829 ;; Registers used:
  5830 ;;		None
  5831 ;; Tracked objects:
  5832 ;;		On entry : 3F/0
  5833 ;;		On exit  : 3F/0
  5834 ;;		Unchanged: 3F/0
  5835 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5836 ;;      Params:         0       0       0       0       0       0       0
  5837 ;;      Locals:         0       0       0       0       0       0       0
  5838 ;;      Temps:          0       0       0       0       0       0       0
  5839 ;;      Totals:         0       0       0       0       0       0       0
  5840 ;;Total ram usage:        0 bytes
  5841 ;; Hardware stack levels used:    1
  5842 ;; Hardware stack levels required when called:    3
  5843 ;; This function calls:
  5844 ;;		Nothing
  5845 ;; This function is called by:
  5846 ;;		_ProtectCheck
  5847 ;;		_SetupMode
  5848 ;; This function uses a non-reentrant model
  5849 ;;
  5850                           
  5851                           	psect	text28
  5852  0022C6                     __ptext28:
  5853                           	opt stack 0
  5854  0022C6                     _SwitchOFF:
  5855                           	opt stack 0
  5856  0022C6  FFFF               	dw	65535	; assembler added errata NOP
  5857                           
  5858                           ; BSR set to: 0
  5859                           ;digital.h: 88: LATEbits.LE2 = 0;
  5860                           
  5861                           ; BSR set to: 0
  5862                           ;incstack = 0
  5863  0022C8  948D               	bcf	3981,2,c	;volatile
  5864                           
  5865                           ;digital.h: 89: LATEbits.LE1 = 0;
  5866  0022CA  928D               	bcf	3981,1,c	;volatile
  5867                           
  5868                           ;digital.h: 90: LATCbits.LC4 = 0;
  5869  0022CC  988B               	bcf	3979,4,c	;volatile
  5870                           
  5871                           ;digital.h: 91: LATBbits.LB3 = 0;
  5872  0022CE  968A               	bcf	3978,3,c	;volatile
  5873                           
  5874                           ;digital.h: 93: ptt = 0;
  5875  0022D0  6A56               	clrf	_ptt,c	;volatile
  5876                           
  5877                           ; BSR set to: 0
  5878  0022D2  0012               	return		;funcret
  5879  0022D4  FFFF               	dw	65535	; errata NOP
  5880  0022D6                     __end_of_SwitchOFF:
  5881                           	opt stack 0
  5882                           stkptr	equ	0xFFC
  5883                           tblptru	equ	0xFF8
  5884                           tblptrh	equ	0xFF7
  5885                           tblptrl	equ	0xFF6
  5886                           tablat	equ	0xFF5
  5887                           prodh	equ	0xFF4
  5888                           prodl	equ	0xFF3
  5889                           intcon	equ	0xFF2
  5890                           intcon2	equ	0xFF1
  5891                           postinc0	equ	0xFEE
  5892                           wreg	equ	0xFE8
  5893                           indf2	equ	0xFDF
  5894                           fsr2h	equ	0xFDA
  5895                           fsr2l	equ	0xFD9
  5896                           status	equ	0xFD8
  5897                           
  5898 ;; *************** function _PTT_read *****************
  5899 ;; Defined at:
  5900 ;;		line 125 in file "../digital.h"
  5901 ;; Parameters:    Size  Location     Type
  5902 ;;		None
  5903 ;; Auto vars:     Size  Location     Type
  5904 ;;		None
  5905 ;; Return value:  Size  Location     Type
  5906 ;;                  1    wreg      void 
  5907 ;; Registers used:
  5908 ;;		wreg, status,2, status,0, cstack
  5909 ;; Tracked objects:
  5910 ;;		On entry : 3F/0
  5911 ;;		On exit  : 0/0
  5912 ;;		Unchanged: 0/0
  5913 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5914 ;;      Params:         0       0       0       0       0       0       0
  5915 ;;      Locals:         0       0       0       0       0       0       0
  5916 ;;      Temps:          0       0       0       0       0       0       0
  5917 ;;      Totals:         0       0       0       0       0       0       0
  5918 ;;Total ram usage:        0 bytes
  5919 ;; Hardware stack levels used:    1
  5920 ;; Hardware stack levels required when called:    7
  5921 ;; This function calls:
  5922 ;;		_PTT_OFF
  5923 ;;		_PTT_ON
  5924 ;; This function is called by:
  5925 ;;		_ProtectCheck
  5926 ;; This function uses a non-reentrant model
  5927 ;;
  5928                           
  5929                           	psect	text29
  5930  002244                     __ptext29:
  5931                           	opt stack 0
  5932  002244                     _PTT_read:
  5933                           	opt stack 0
  5934  002244  FFFF               	dw	65535	; assembler added errata NOP
  5935                           
  5936                           ; BSR set to: 0
  5937                           ;digital.h: 127: if (bypass) return;
  5938                           
  5939                           ; BSR set to: 0
  5940                           ;incstack = 0
  5941  002246  5058               	movf	_bypass,w,c	;volatile
  5942  002248  E108               	bnz	l357
  5943                           
  5944                           ; BSR set to: 0
  5945                           ;digital.h: 129: if (!PORTAbits.RA4) PTT_ON();
  5946  00224A  B880               	btfsc	3968,4,c	;volatile
  5947  00224C  D003               	goto	l4326
  5948                           
  5949                           ; BSR set to: 0
  5950  00224E  EC3D  F010         	call	_PTT_ON	;wreg free
  5951  002252  D003               	goto	l357
  5952  002254                     l4326:
  5953  002254  FFFF               	dw	65535	; assembler added errata NOP
  5954                           
  5955                           ; BSR set to: 0
  5956                           ;digital.h: 130: else PTT_OFF();
  5957  002256  EC4B  F011         	call	_PTT_OFF	;wreg free
  5958  00225A                     l357:
  5959  00225A  FFFF               	dw	65535	; assembler added errata NOP
  5960  00225C  0012               	return		;funcret
  5961  00225E  FFFF               	dw	65535	; errata NOP
  5962  002260                     __end_of_PTT_read:
  5963                           	opt stack 0
  5964                           stkptr	equ	0xFFC
  5965                           tblptru	equ	0xFF8
  5966                           tblptrh	equ	0xFF7
  5967                           tblptrl	equ	0xFF6
  5968                           tablat	equ	0xFF5
  5969                           prodh	equ	0xFF4
  5970                           prodl	equ	0xFF3
  5971                           intcon	equ	0xFF2
  5972                           intcon2	equ	0xFF1
  5973                           postinc0	equ	0xFEE
  5974                           wreg	equ	0xFE8
  5975                           indf2	equ	0xFDF
  5976                           fsr2h	equ	0xFDA
  5977                           fsr2l	equ	0xFD9
  5978                           status	equ	0xFD8
  5979                           
  5980 ;; *************** function _PTT_ON *****************
  5981 ;; Defined at:
  5982 ;;		line 96 in file "../digital.h"
  5983 ;; Parameters:    Size  Location     Type
  5984 ;;		None
  5985 ;; Auto vars:     Size  Location     Type
  5986 ;;		None
  5987 ;; Return value:  Size  Location     Type
  5988 ;;                  1    wreg      void 
  5989 ;; Registers used:
  5990 ;;		wreg, status,2, status,0, cstack
  5991 ;; Tracked objects:
  5992 ;;		On entry : 3F/0
  5993 ;;		On exit  : 0/0
  5994 ;;		Unchanged: 0/0
  5995 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5996 ;;      Params:         0       0       0       0       0       0       0
  5997 ;;      Locals:         0       0       0       0       0       0       0
  5998 ;;      Temps:          0       0       0       0       0       0       0
  5999 ;;      Totals:         0       0       0       0       0       0       0
  6000 ;;Total ram usage:        0 bytes
  6001 ;; Hardware stack levels used:    1
  6002 ;; Hardware stack levels required when called:    6
  6003 ;; This function calls:
  6004 ;;		_DelayMs
  6005 ;;		_FreqMeasure
  6006 ;; This function is called by:
  6007 ;;		_PTT_read
  6008 ;; This function uses a non-reentrant model
  6009 ;;
  6010                           
  6011                           	psect	text30
  6012  00207A                     __ptext30:
  6013                           	opt stack 0
  6014  00207A                     _PTT_ON:
  6015                           	opt stack 0
  6016  00207A  FFFF               	dw	65535	; assembler added errata NOP
  6017                           
  6018                           ; BSR set to: 0
  6019                           ;digital.h: 98: if (ptt == 1) return;
  6020                           
  6021                           ;incstack = 0
  6022  00207C  0456               	decf	_ptt,w,c	;volatile
  6023  00207E  E012               	bz	l347
  6024                           
  6025                           ; BSR set to: 0
  6026                           ;digital.h: 99: ptt = 1;
  6027  002080  0E01               	movlw	1
  6028  002082  6E56               	movwf	_ptt,c	;volatile
  6029                           
  6030                           ; BSR set to: 0
  6031                           ;digital.h: 101: LATBbits.LB3 = 1;
  6032  002084  868A               	bsf	3978,3,c	;volatile
  6033                           
  6034                           ; BSR set to: 0
  6035                           ;digital.h: 102: LATCbits.LC4 = 1;
  6036  002086  888B               	bsf	3979,4,c	;volatile
  6037                           
  6038                           ;digital.h: 104: if (aband)
  6039  002088  51F1               	movf	_aband& (0+255),w,b	;volatile
  6040  00208A  E007               	bz	l4226
  6041                           
  6042                           ; BSR set to: 0
  6043                           ;digital.h: 105: {;digital.h: 106: DelayMs(reldel);
  6044  00208C  51F4               	movf	_reldel& (0+255),w,b	;volatile
  6045  00208E  ECE1  F010         	call	_DelayMs
  6046                           
  6047                           ;digital.h: 107: if (!FreqMeasure()) return;
  6048  002092  EC86  F00C         	call	_FreqMeasure	;wreg free
  6049  002096  0900               	iorlw	0
  6050  002098  E005               	bz	l347
  6051  00209A                     l4226:
  6052                           
  6053                           ;digital.h: 108: };digital.h: 109: DelayMs(biasdel);
  6054  00209A  0100               	movlb	0	; () banked
  6055  00209C  51F3               	movf	_biasdel& (0+255),w,b	;volatile
  6056  00209E  ECE1  F010         	call	_DelayMs
  6057                           
  6058                           ;digital.h: 110: LATEbits.LE2 = 1;
  6059  0020A2  848D               	bsf	3981,2,c	;volatile
  6060  0020A4                     l347:
  6061  0020A4  0012               	return		;funcret
  6062  0020A6  FFFF               	dw	65535	; errata NOP
  6063  0020A8                     __end_of_PTT_ON:
  6064                           	opt stack 0
  6065                           stkptr	equ	0xFFC
  6066                           tblptru	equ	0xFF8
  6067                           tblptrh	equ	0xFF7
  6068                           tblptrl	equ	0xFF6
  6069                           tablat	equ	0xFF5
  6070                           prodh	equ	0xFF4
  6071                           prodl	equ	0xFF3
  6072                           intcon	equ	0xFF2
  6073                           intcon2	equ	0xFF1
  6074                           postinc0	equ	0xFEE
  6075                           wreg	equ	0xFE8
  6076                           indf2	equ	0xFDF
  6077                           fsr2h	equ	0xFDA
  6078                           fsr2l	equ	0xFD9
  6079                           status	equ	0xFD8
  6080                           
  6081 ;; *************** function _FreqMeasure *****************
  6082 ;; Defined at:
  6083 ;;		line 19 in file "../digital.h"
  6084 ;; Parameters:    Size  Location     Type
  6085 ;;		None
  6086 ;; Auto vars:     Size  Location     Type
  6087 ;;  tmr             2   29[COMRAM] unsigned int 
  6088 ;;  err             1   28[COMRAM] unsigned char 
  6089 ;;  jj              1   27[COMRAM] unsigned char 
  6090 ;; Return value:  Size  Location     Type
  6091 ;;                  1    wreg      unsigned char 
  6092 ;; Registers used:
  6093 ;;		wreg, status,2, status,0, cstack
  6094 ;; Tracked objects:
  6095 ;;		On entry : 0/0
  6096 ;;		On exit  : 0/0
  6097 ;;		Unchanged: 0/0
  6098 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6099 ;;      Params:         0       0       0       0       0       0       0
  6100 ;;      Locals:         4       0       0       0       0       0       0
  6101 ;;      Temps:          0       0       0       0       0       0       0
  6102 ;;      Totals:         4       0       0       0       0       0       0
  6103 ;;Total ram usage:        4 bytes
  6104 ;; Hardware stack levels used:    1
  6105 ;; Hardware stack levels required when called:    5
  6106 ;; This function calls:
  6107 ;;		_BandDecode
  6108 ;;		___ftge
  6109 ;;		___lwtoft
  6110 ;;		_fabs
  6111 ;; This function is called by:
  6112 ;;		_PTT_ON
  6113 ;; This function uses a non-reentrant model
  6114 ;;
  6115                           
  6116                           	psect	text31
  6117  00190C                     __ptext31:
  6118                           	opt stack 0
  6119  00190C                     _FreqMeasure:
  6120                           	opt stack 0
  6121  00190C  FFFF               	dw	65535	; assembler added errata NOP
  6122                           
  6123                           ;digital.h: 21: unsigned char jj, err;;digital.h: 22: unsigned int tmr;;digital.h: 24: w
      +                          hile(!PORTAbits.RA4)
  6124                           
  6125                           ;incstack = 0
  6126  00190E  D050               	goto	l313
  6127  001910                     l314:
  6128  001910  FFFF               	dw	65535	; assembler added errata NOP
  6129  001912  0004               	clrwdt		;# 
  6130                           
  6131                           ;digital.h: 27: if (PORTCbits.RC0)
  6132  001914  A082               	btfss	3970,0,c	;volatile
  6133  001916  D04C               	goto	l313
  6134                           
  6135                           ;digital.h: 28: {;digital.h: 29: freq = 0; err = 0;
  6136  001918  6A48               	clrf	_freq,c	;volatile
  6137  00191A  6A49               	clrf	_freq+1,c	;volatile
  6138  00191C  6A1D               	clrf	FreqMeasure@err,c
  6139                           
  6140                           ;digital.h: 30: jj = 30;
  6141  00191E  0E1E               	movlw	30
  6142  001920  6E1C               	movwf	FreqMeasure@jj,c
  6143                           
  6144                           ;digital.h: 32: INTCONbits.GIE = 0;
  6145  001922  9EF2               	bcf	intcon,7,c	;volatile
  6146                           
  6147                           ;digital.h: 33: while(jj--)
  6148  001924  D034               	goto	l4116
  6149  001926                     l317:
  6150                           
  6151                           ;digital.h: 34: {;digital.h: 35: TMR1H = 0;
  6152  001926  6ACF               	clrf	4047,c	;volatile
  6153                           
  6154                           ;digital.h: 36: PIR1bits.TMR1IF = 0;
  6155  001928  909E               	bcf	3998,0,c	;volatile
  6156                           
  6157                           ;digital.h: 37: TMR1L = 0;
  6158  00192A  6ACE               	clrf	4046,c	;volatile
  6159                           
  6160                           ;digital.h: 39: _delay((unsigned long)((100)*(40000000/4000000.0)));
  6161  00192C  0EC8               	movlw	200
  6162  00192E                     u5197:
  6163  00192E  FFFF               	dw	65535	; errata NOP
  6164  001930  F000               	nop	
  6165  001932  2EE8               	decfsz	wreg,f,c
  6166  001934  D7FC               	bra	u5197
  6167                           
  6168                           ;digital.h: 40: tmr = (TMR1);
  6169  001936  CFCE F01E          	movff	4046,FreqMeasure@tmr	;volatile
  6170  00193A  CFCF F01F          	movff	4047,FreqMeasure@tmr+1	;volatile
  6171                           
  6172                           ;digital.h: 42: if (fabs(freq - tmr) >= 100) err++;
  6173  00193E  501E               	movf	FreqMeasure@tmr,w,c
  6174  001940  5C48               	subwf	_freq,w,c	;volatile
  6175  001942  6E0D               	movwf	___lwtoft@c,c
  6176  001944  501F               	movf	FreqMeasure@tmr+1,w,c
  6177  001946  5849               	subwfb	_freq+1,w,c	;volatile
  6178  001948  6E0E               	movwf	___lwtoft@c+1,c
  6179  00194A  ECA7  F010         	call	___lwtoft	;wreg free
  6180  00194E  C00D  F010         	movff	?___lwtoft,fabs@d
  6181  001952  C00E  F011         	movff	?___lwtoft+1,fabs@d+1
  6182  001956  C00F  F012         	movff	?___lwtoft+2,fabs@d+2
  6183  00195A  ECBB  F00F         	call	_fabs	;wreg free
  6184  00195E  C010  F013         	movff	?_fabs,___ftge@ff1
  6185  001962  C011  F014         	movff	?_fabs+1,___ftge@ff1+1
  6186  001966  C012  F015         	movff	?_fabs+2,___ftge@ff1+2
  6187  00196A  6A16               	clrf	___ftge@ff2,c
  6188  00196C  0EC8               	movlw	200
  6189  00196E  6E17               	movwf	___ftge@ff2+1,c
  6190  001970  0E42               	movlw	66
  6191  001972  6E18               	movwf	___ftge@ff2+2,c
  6192  001974  ECB4  F00E         	call	___ftge	;wreg free
  6193  001978  E301               	bnc	l4112
  6194  00197A  2A1D               	incf	FreqMeasure@err,f,c
  6195  00197C                     l4112:
  6196                           
  6197                           ;digital.h: 43: if (tmr > freq) freq = tmr;
  6198  00197C  501E               	movf	FreqMeasure@tmr,w,c
  6199  00197E  5C48               	subwf	_freq,w,c	;volatile
  6200  001980  501F               	movf	FreqMeasure@tmr+1,w,c
  6201  001982  5849               	subwfb	_freq+1,w,c	;volatile
  6202  001984  E204               	bc	l4116
  6203  001986  C01E  F048         	movff	FreqMeasure@tmr,_freq	;volatile
  6204  00198A  C01F  F049         	movff	FreqMeasure@tmr+1,_freq+1	;volatile
  6205  00198E                     l4116:
  6206  00198E  FFFF               	dw	65535	; assembler added errata NOP
  6207  001990  061C               	decf	FreqMeasure@jj,f,c
  6208  001992  281C               	incf	FreqMeasure@jj,w,c
  6209  001994  E1C8               	bnz	l317
  6210                           
  6211                           ;digital.h: 44: };digital.h: 45: INTCONbits.GIE = 1;
  6212  001996  8EF2               	bsf	intcon,7,c	;volatile
  6213                           
  6214                           ;digital.h: 46: if (err < 9)
  6215  001998  0E09               	movlw	9
  6216  00199A  601D               	cpfslt	FreqMeasure@err,c
  6217  00199C  D009               	goto	l313
  6218                           
  6219                           ;digital.h: 47: {;digital.h: 49: if (freq >= 100)
  6220  00199E  5049               	movf	_freq+1,w,c	;volatile
  6221  0019A0  E103               	bnz	u4640
  6222  0019A2  0E64               	movlw	100
  6223  0019A4  5C48               	subwf	_freq,w,c	;volatile
  6224  0019A6  E304               	bnc	l313
  6225  0019A8                     u4640:
  6226                           
  6227                           ;digital.h: 50: {;digital.h: 51: BandDecode();
  6228  0019A8  EC81  F00E         	call	_BandDecode	;wreg free
  6229                           
  6230                           ;digital.h: 52: return(1);
  6231  0019AC  0E01               	movlw	1
  6232  0019AE  D004               	goto	l323
  6233  0019B0                     l313:
  6234  0019B0  FFFF               	dw	65535	; assembler added errata NOP
  6235  0019B2  A880               	btfss	3968,4,c	;volatile
  6236  0019B4  D7AD               	goto	l314
  6237                           
  6238                           ;digital.h: 53: };digital.h: 54: };digital.h: 55: };digital.h: 56: };digital.h: 57: retu
      +                          rn(0);
  6239  0019B6  0E00               	movlw	0
  6240  0019B8                     l323:
  6241  0019B8  FFFF               	dw	65535	; assembler added errata NOP
  6242  0019BA  0012               	return		;funcret
  6243  0019BC  FFFF               	dw	65535	; errata NOP
  6244  0019BE                     __end_of_FreqMeasure:
  6245                           	opt stack 0
  6246                           stkptr	equ	0xFFC
  6247                           tblptru	equ	0xFF8
  6248                           tblptrh	equ	0xFF7
  6249                           tblptrl	equ	0xFF6
  6250                           tablat	equ	0xFF5
  6251                           prodh	equ	0xFF4
  6252                           prodl	equ	0xFF3
  6253                           intcon	equ	0xFF2
  6254                           intcon2	equ	0xFF1
  6255                           postinc0	equ	0xFEE
  6256                           wreg	equ	0xFE8
  6257                           indf2	equ	0xFDF
  6258                           fsr2h	equ	0xFDA
  6259                           fsr2l	equ	0xFD9
  6260                           status	equ	0xFD8
  6261                           
  6262 ;; *************** function _fabs *****************
  6263 ;; Defined at:
  6264 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\fabs.c"
  6265 ;; Parameters:    Size  Location     Type
  6266 ;;  d               3   15[COMRAM] unsigned char 
  6267 ;; Auto vars:     Size  Location     Type
  6268 ;;		None
  6269 ;; Return value:  Size  Location     Type
  6270 ;;                  3   15[COMRAM] unsigned char 
  6271 ;; Registers used:
  6272 ;;		wreg, status,2, status,0, cstack
  6273 ;; Tracked objects:
  6274 ;;		On entry : 0/0
  6275 ;;		On exit  : 0/0
  6276 ;;		Unchanged: 0/0
  6277 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6278 ;;      Params:         3       0       0       0       0       0       0
  6279 ;;      Locals:         0       0       0       0       0       0       0
  6280 ;;      Temps:          0       0       0       0       0       0       0
  6281 ;;      Totals:         3       0       0       0       0       0       0
  6282 ;;Total ram usage:        3 bytes
  6283 ;; Hardware stack levels used:    1
  6284 ;; Hardware stack levels required when called:    4
  6285 ;; This function calls:
  6286 ;;		___ftneg
  6287 ;; This function is called by:
  6288 ;;		_FreqMeasure
  6289 ;; This function uses a non-reentrant model
  6290 ;;
  6291                           
  6292                           	psect	text32
  6293  001F76                     __ptext32:
  6294                           	opt stack 0
  6295  001F76                     _fabs:
  6296                           	opt stack 0
  6297  001F76  FFFF               	dw	65535	; assembler added errata NOP
  6298                           
  6299                           ;incstack = 0
  6300  001F78  AE12               	btfss	fabs@d+2,7,c
  6301  001F7A  D00F               	goto	l1243
  6302  001F7C  C010  F005         	movff	fabs@d,___ftneg@f1
  6303  001F80  C011  F006         	movff	fabs@d+1,___ftneg@f1+1
  6304  001F84  C012  F007         	movff	fabs@d+2,___ftneg@f1+2
  6305  001F88  EC05  F011         	call	___ftneg	;wreg free
  6306  001F8C  C005  F010         	movff	?___ftneg,?_fabs
  6307  001F90  C006  F011         	movff	?___ftneg+1,?_fabs+1
  6308  001F94  C007  F012         	movff	?___ftneg+2,?_fabs+2
  6309  001F98  D007               	goto	l1244
  6310  001F9A                     l1243:
  6311  001F9A  FFFF               	dw	65535	; assembler added errata NOP
  6312  001F9C  C010  F010         	movff	fabs@d,?_fabs
  6313  001FA0  C011  F011         	movff	fabs@d+1,?_fabs+1
  6314  001FA4  C012  F012         	movff	fabs@d+2,?_fabs+2
  6315  001FA8                     l1244:
  6316  001FA8  FFFF               	dw	65535	; assembler added errata NOP
  6317  001FAA  0012               	return		;funcret
  6318  001FAC  FFFF               	dw	65535	; errata NOP
  6319  001FAE                     __end_of_fabs:
  6320                           	opt stack 0
  6321                           stkptr	equ	0xFFC
  6322                           tblptru	equ	0xFF8
  6323                           tblptrh	equ	0xFF7
  6324                           tblptrl	equ	0xFF6
  6325                           tablat	equ	0xFF5
  6326                           prodh	equ	0xFF4
  6327                           prodl	equ	0xFF3
  6328                           intcon	equ	0xFF2
  6329                           intcon2	equ	0xFF1
  6330                           postinc0	equ	0xFEE
  6331                           wreg	equ	0xFE8
  6332                           indf2	equ	0xFDF
  6333                           fsr2h	equ	0xFDA
  6334                           fsr2l	equ	0xFD9
  6335                           status	equ	0xFD8
  6336                           
  6337 ;; *************** function ___ftneg *****************
  6338 ;; Defined at:
  6339 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\ftneg.c"
  6340 ;; Parameters:    Size  Location     Type
  6341 ;;  f1              3    4[COMRAM] float 
  6342 ;; Auto vars:     Size  Location     Type
  6343 ;;		None
  6344 ;; Return value:  Size  Location     Type
  6345 ;;                  3    4[COMRAM] float 
  6346 ;; Registers used:
  6347 ;;		wreg, status,2, status,0
  6348 ;; Tracked objects:
  6349 ;;		On entry : 0/0
  6350 ;;		On exit  : 0/0
  6351 ;;		Unchanged: 0/0
  6352 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6353 ;;      Params:         3       0       0       0       0       0       0
  6354 ;;      Locals:         0       0       0       0       0       0       0
  6355 ;;      Temps:          0       0       0       0       0       0       0
  6356 ;;      Totals:         3       0       0       0       0       0       0
  6357 ;;Total ram usage:        3 bytes
  6358 ;; Hardware stack levels used:    1
  6359 ;; Hardware stack levels required when called:    3
  6360 ;; This function calls:
  6361 ;;		Nothing
  6362 ;; This function is called by:
  6363 ;;		_fabs
  6364 ;; This function uses a non-reentrant model
  6365 ;;
  6366                           
  6367                           	psect	text33
  6368  00220A                     __ptext33:
  6369                           	opt stack 0
  6370  00220A                     ___ftneg:
  6371                           	opt stack 0
  6372  00220A  FFFF               	dw	65535	; assembler added errata NOP
  6373                           
  6374                           ;incstack = 0
  6375  00220C  5005               	movf	___ftneg@f1,w,c
  6376  00220E  1006               	iorwf	___ftneg@f1+1,w,c
  6377  002210  1007               	iorwf	___ftneg@f1+2,w,c
  6378  002212  E002               	bz	l933
  6379  002214  0E80               	movlw	128
  6380  002216  1A07               	xorwf	___ftneg@f1+2,f,c
  6381  002218                     l933:
  6382  002218  C005  F005         	movff	___ftneg@f1,?___ftneg
  6383  00221C  C006  F006         	movff	___ftneg@f1+1,?___ftneg+1
  6384  002220  C007  F007         	movff	___ftneg@f1+2,?___ftneg+2
  6385  002224  0012               	return		;funcret
  6386  002226  FFFF               	dw	65535	; errata NOP
  6387  002228                     __end_of___ftneg:
  6388                           	opt stack 0
  6389                           stkptr	equ	0xFFC
  6390                           tblptru	equ	0xFF8
  6391                           tblptrh	equ	0xFF7
  6392                           tblptrl	equ	0xFF6
  6393                           tablat	equ	0xFF5
  6394                           prodh	equ	0xFF4
  6395                           prodl	equ	0xFF3
  6396                           intcon	equ	0xFF2
  6397                           intcon2	equ	0xFF1
  6398                           postinc0	equ	0xFEE
  6399                           wreg	equ	0xFE8
  6400                           indf2	equ	0xFDF
  6401                           fsr2h	equ	0xFDA
  6402                           fsr2l	equ	0xFD9
  6403                           status	equ	0xFD8
  6404                           
  6405 ;; *************** function ___lwtoft *****************
  6406 ;; Defined at:
  6407 ;;		line 28 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\lwtoft.c"
  6408 ;; Parameters:    Size  Location     Type
  6409 ;;  c               2   12[COMRAM] unsigned int 
  6410 ;; Auto vars:     Size  Location     Type
  6411 ;;		None
  6412 ;; Return value:  Size  Location     Type
  6413 ;;                  3   12[COMRAM] float 
  6414 ;; Registers used:
  6415 ;;		wreg, status,2, status,0, cstack
  6416 ;; Tracked objects:
  6417 ;;		On entry : 0/0
  6418 ;;		On exit  : 0/0
  6419 ;;		Unchanged: 0/0
  6420 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6421 ;;      Params:         3       0       0       0       0       0       0
  6422 ;;      Locals:         0       0       0       0       0       0       0
  6423 ;;      Temps:          0       0       0       0       0       0       0
  6424 ;;      Totals:         3       0       0       0       0       0       0
  6425 ;;Total ram usage:        3 bytes
  6426 ;; Hardware stack levels used:    1
  6427 ;; Hardware stack levels required when called:    4
  6428 ;; This function calls:
  6429 ;;		___ftpack
  6430 ;; This function is called by:
  6431 ;;		_FreqMeasure
  6432 ;; This function uses a non-reentrant model
  6433 ;;
  6434                           
  6435                           	psect	text34
  6436  00214E                     __ptext34:
  6437                           	opt stack 0
  6438  00214E                     ___lwtoft:
  6439                           	opt stack 0
  6440  00214E  FFFF               	dw	65535	; assembler added errata NOP
  6441                           
  6442                           ;incstack = 0
  6443  002150  C00D  F005         	movff	___lwtoft@c,___ftpack@arg
  6444  002154  C00E  F006         	movff	___lwtoft@c+1,___ftpack@arg+1
  6445  002158  6A07               	clrf	___ftpack@arg+2,c
  6446  00215A  0E8E               	movlw	142
  6447  00215C  6E08               	movwf	___ftpack@exp,c
  6448  00215E  0E00               	movlw	0
  6449  002160  6E09               	movwf	___ftpack@sign,c
  6450  002162  EC36  F00D         	call	___ftpack	;wreg free
  6451  002166  C005  F00D         	movff	?___ftpack,?___lwtoft
  6452  00216A  C006  F00E         	movff	?___ftpack+1,?___lwtoft+1
  6453  00216E  C007  F00F         	movff	?___ftpack+2,?___lwtoft+2
  6454  002172  0012               	return		;funcret
  6455  002174  FFFF               	dw	65535	; errata NOP
  6456  002176                     __end_of___lwtoft:
  6457                           	opt stack 0
  6458                           stkptr	equ	0xFFC
  6459                           tblptru	equ	0xFF8
  6460                           tblptrh	equ	0xFF7
  6461                           tblptrl	equ	0xFF6
  6462                           tablat	equ	0xFF5
  6463                           prodh	equ	0xFF4
  6464                           prodl	equ	0xFF3
  6465                           intcon	equ	0xFF2
  6466                           intcon2	equ	0xFF1
  6467                           postinc0	equ	0xFEE
  6468                           wreg	equ	0xFE8
  6469                           indf2	equ	0xFDF
  6470                           fsr2h	equ	0xFDA
  6471                           fsr2l	equ	0xFD9
  6472                           status	equ	0xFD8
  6473                           
  6474 ;; *************** function ___ftpack *****************
  6475 ;; Defined at:
  6476 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\float.c"
  6477 ;; Parameters:    Size  Location     Type
  6478 ;;  arg             3    4[COMRAM] unsigned um
  6479 ;;  exp             1    7[COMRAM] unsigned char 
  6480 ;;  sign            1    8[COMRAM] unsigned char 
  6481 ;; Auto vars:     Size  Location     Type
  6482 ;;		None
  6483 ;; Return value:  Size  Location     Type
  6484 ;;                  3    4[COMRAM] float 
  6485 ;; Registers used:
  6486 ;;		wreg, status,2, status,0
  6487 ;; Tracked objects:
  6488 ;;		On entry : 0/0
  6489 ;;		On exit  : 0/0
  6490 ;;		Unchanged: 0/0
  6491 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6492 ;;      Params:         5       0       0       0       0       0       0
  6493 ;;      Locals:         0       0       0       0       0       0       0
  6494 ;;      Temps:          3       0       0       0       0       0       0
  6495 ;;      Totals:         8       0       0       0       0       0       0
  6496 ;;Total ram usage:        8 bytes
  6497 ;; Hardware stack levels used:    1
  6498 ;; Hardware stack levels required when called:    3
  6499 ;; This function calls:
  6500 ;;		Nothing
  6501 ;; This function is called by:
  6502 ;;		___ftadd
  6503 ;;		___ftmul
  6504 ;;		___lltoft
  6505 ;;		___lwtoft
  6506 ;; This function uses a non-reentrant model
  6507 ;;
  6508                           
  6509                           	psect	text35
  6510  001A6C                     __ptext35:
  6511                           	opt stack 0
  6512  001A6C                     ___ftpack:
  6513                           	opt stack 0
  6514  001A6C  FFFF               	dw	65535	; assembler added errata NOP
  6515                           
  6516                           ;incstack = 0
  6517  001A6E  5008               	movf	___ftpack@exp,w,c
  6518  001A70  E004               	bz	u4280
  6519  001A72  5005               	movf	___ftpack@arg,w,c
  6520  001A74  1006               	iorwf	___ftpack@arg+1,w,c
  6521  001A76  1007               	iorwf	___ftpack@arg+2,w,c
  6522  001A78  E10A               	bnz	l3964
  6523  001A7A                     u4280:
  6524  001A7A  6A05               	clrf	?___ftpack,c
  6525  001A7C  6A06               	clrf	?___ftpack+1,c
  6526  001A7E  6A07               	clrf	?___ftpack+2,c
  6527  001A80  D03E               	goto	l847
  6528  001A82                     l3962:
  6529  001A82  FFFF               	dw	65535	; assembler added errata NOP
  6530  001A84  2A08               	incf	___ftpack@exp,f,c
  6531  001A86  90D8               	bcf	status,0,c
  6532  001A88  3207               	rrcf	___ftpack@arg+2,f,c
  6533  001A8A  3206               	rrcf	___ftpack@arg+1,f,c
  6534  001A8C  3205               	rrcf	___ftpack@arg,f,c
  6535  001A8E                     l3964:
  6536  001A8E  6A0A               	clrf	??___ftpack& (0+255),c
  6537  001A90  6A0B               	clrf	(??___ftpack+1)& (0+255),c
  6538  001A92  0EFE               	movlw	254
  6539  001A94  1407               	andwf	___ftpack@arg+2,w,c
  6540  001A96  6E0C               	movwf	(??___ftpack+2)& (0+255),c
  6541  001A98  500A               	movf	??___ftpack,w,c
  6542  001A9A  100B               	iorwf	??___ftpack+1,w,c
  6543  001A9C  100C               	iorwf	??___ftpack+2,w,c
  6544  001A9E  E00B               	bz	l3970
  6545  001AA0  D7F0               	goto	l3962
  6546  001AA2                     l3966:
  6547  001AA2  FFFF               	dw	65535	; assembler added errata NOP
  6548  001AA4  2A08               	incf	___ftpack@exp,f,c
  6549  001AA6  2A05               	incf	___ftpack@arg,f,c
  6550  001AA8  0E00               	movlw	0
  6551  001AAA  2206               	addwfc	___ftpack@arg+1,f,c
  6552  001AAC  2207               	addwfc	___ftpack@arg+2,f,c
  6553  001AAE  90D8               	bcf	status,0,c
  6554  001AB0  3207               	rrcf	___ftpack@arg+2,f,c
  6555  001AB2  3206               	rrcf	___ftpack@arg+1,f,c
  6556  001AB4  3205               	rrcf	___ftpack@arg,f,c
  6557  001AB6                     l3970:
  6558  001AB6  6A0A               	clrf	??___ftpack& (0+255),c
  6559  001AB8  6A0B               	clrf	(??___ftpack+1)& (0+255),c
  6560  001ABA  5007               	movf	___ftpack@arg+2,w,c
  6561  001ABC  6E0C               	movwf	(??___ftpack+2)& (0+255),c
  6562  001ABE  500A               	movf	??___ftpack,w,c
  6563  001AC0  100B               	iorwf	??___ftpack+1,w,c
  6564  001AC2  100C               	iorwf	??___ftpack+2,w,c
  6565  001AC4  E007               	bz	l3974
  6566  001AC6  D7ED               	goto	l3966
  6567  001AC8                     l3972:
  6568  001AC8  FFFF               	dw	65535	; assembler added errata NOP
  6569  001ACA  0608               	decf	___ftpack@exp,f,c
  6570  001ACC  90D8               	bcf	status,0,c
  6571  001ACE  3605               	rlcf	___ftpack@arg,f,c
  6572  001AD0  3606               	rlcf	___ftpack@arg+1,f,c
  6573  001AD2  3607               	rlcf	___ftpack@arg+2,f,c
  6574  001AD4                     l3974:
  6575  001AD4  BE06               	btfsc	___ftpack@arg+1,7,c
  6576  001AD6  D003               	goto	u4320
  6577  001AD8  0E02               	movlw	2
  6578  001ADA  6008               	cpfslt	___ftpack@exp,c
  6579  001ADC  D7F5               	goto	l3972
  6580  001ADE                     u4320:
  6581  001ADE  FFFF               	dw	65535	; assembler added errata NOP
  6582  001AE0  A008               	btfss	___ftpack@exp,0,c
  6583  001AE2  9E06               	bcf	___ftpack@arg+1,7,c
  6584  001AE4  90D8               	bcf	status,0,c
  6585  001AE6  3208               	rrcf	___ftpack@exp,f,c
  6586  001AE8  5008               	movf	___ftpack@exp,w,c
  6587  001AEA  1207               	iorwf	___ftpack@arg+2,f,c
  6588  001AEC  5009               	movf	___ftpack@sign,w,c
  6589  001AEE  E001               	bz	l3988
  6590  001AF0  8E07               	bsf	___ftpack@arg+2,7,c
  6591  001AF2                     l3988:
  6592  001AF2  C005  F005         	movff	___ftpack@arg,?___ftpack
  6593  001AF6  C006  F006         	movff	___ftpack@arg+1,?___ftpack+1
  6594  001AFA  C007  F007         	movff	___ftpack@arg+2,?___ftpack+2
  6595  001AFE                     l847:
  6596  001AFE  FFFF               	dw	65535	; assembler added errata NOP
  6597  001B00  0012               	return		;funcret
  6598  001B02  FFFF               	dw	65535	; errata NOP
  6599  001B04                     __end_of___ftpack:
  6600                           	opt stack 0
  6601                           stkptr	equ	0xFFC
  6602                           tblptru	equ	0xFF8
  6603                           tblptrh	equ	0xFF7
  6604                           tblptrl	equ	0xFF6
  6605                           tablat	equ	0xFF5
  6606                           prodh	equ	0xFF4
  6607                           prodl	equ	0xFF3
  6608                           intcon	equ	0xFF2
  6609                           intcon2	equ	0xFF1
  6610                           postinc0	equ	0xFEE
  6611                           wreg	equ	0xFE8
  6612                           indf2	equ	0xFDF
  6613                           fsr2h	equ	0xFDA
  6614                           fsr2l	equ	0xFD9
  6615                           status	equ	0xFD8
  6616                           
  6617 ;; *************** function ___ftge *****************
  6618 ;; Defined at:
  6619 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\ftge.c"
  6620 ;; Parameters:    Size  Location     Type
  6621 ;;  ff1             3   18[COMRAM] float 
  6622 ;;  ff2             3   21[COMRAM] float 
  6623 ;; Auto vars:     Size  Location     Type
  6624 ;;		None
  6625 ;; Return value:  Size  Location     Type
  6626 ;;		None               void
  6627 ;; Registers used:
  6628 ;;		wreg, status,2, status,0
  6629 ;; Tracked objects:
  6630 ;;		On entry : 0/0
  6631 ;;		On exit  : 0/0
  6632 ;;		Unchanged: 0/0
  6633 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6634 ;;      Params:         6       0       0       0       0       0       0
  6635 ;;      Locals:         0       0       0       0       0       0       0
  6636 ;;      Temps:          3       0       0       0       0       0       0
  6637 ;;      Totals:         9       0       0       0       0       0       0
  6638 ;;Total ram usage:        9 bytes
  6639 ;; Hardware stack levels used:    1
  6640 ;; Hardware stack levels required when called:    3
  6641 ;; This function calls:
  6642 ;;		Nothing
  6643 ;; This function is called by:
  6644 ;;		_FreqMeasure
  6645 ;;		_sqrt
  6646 ;; This function uses a non-reentrant model
  6647 ;;
  6648                           
  6649                           	psect	text36
  6650  001D68                     __ptext36:
  6651                           	opt stack 0
  6652  001D68                     ___ftge:
  6653                           	opt stack 0
  6654  001D68  FFFF               	dw	65535	; assembler added errata NOP
  6655                           
  6656                           ;incstack = 0
  6657  001D6A  AE15               	btfss	___ftge@ff1+2,7,c
  6658  001D6C  D00D               	goto	l4060
  6659  001D6E  6A19               	clrf	??___ftge& (0+255),c
  6660  001D70  6A1A               	clrf	(??___ftge+1)& (0+255),c
  6661  001D72  0E80               	movlw	128
  6662  001D74  6E1B               	movwf	(??___ftge+2)& (0+255),c
  6663  001D76  5013               	movf	___ftge@ff1,w,c
  6664  001D78  5C19               	subwf	??___ftge,w,c
  6665  001D7A  6E13               	movwf	___ftge@ff1,c
  6666  001D7C  5014               	movf	___ftge@ff1+1,w,c
  6667  001D7E  581A               	subwfb	??___ftge+1,w,c
  6668  001D80  6E14               	movwf	___ftge@ff1+1,c
  6669  001D82  5015               	movf	___ftge@ff1+2,w,c
  6670  001D84  581B               	subwfb	??___ftge+2,w,c
  6671  001D86  6E15               	movwf	___ftge@ff1+2,c
  6672  001D88                     l4060:
  6673  001D88  FFFF               	dw	65535	; assembler added errata NOP
  6674  001D8A  AE18               	btfss	___ftge@ff2+2,7,c
  6675  001D8C  D00D               	goto	l4064
  6676  001D8E  6A19               	clrf	??___ftge& (0+255),c
  6677  001D90  6A1A               	clrf	(??___ftge+1)& (0+255),c
  6678  001D92  0E80               	movlw	128
  6679  001D94  6E1B               	movwf	(??___ftge+2)& (0+255),c
  6680  001D96  5016               	movf	___ftge@ff2,w,c
  6681  001D98  5C19               	subwf	??___ftge,w,c
  6682  001D9A  6E16               	movwf	___ftge@ff2,c
  6683  001D9C  5017               	movf	___ftge@ff2+1,w,c
  6684  001D9E  581A               	subwfb	??___ftge+1,w,c
  6685  001DA0  6E17               	movwf	___ftge@ff2+1,c
  6686  001DA2  5018               	movf	___ftge@ff2+2,w,c
  6687  001DA4  581B               	subwfb	??___ftge+2,w,c
  6688  001DA6  6E18               	movwf	___ftge@ff2+2,c
  6689  001DA8                     l4064:
  6690  001DA8  FFFF               	dw	65535	; assembler added errata NOP
  6691  001DAA  0E80               	movlw	128
  6692  001DAC  1A15               	xorwf	___ftge@ff1+2,f,c
  6693  001DAE  1A18               	xorwf	___ftge@ff2+2,f,c
  6694  001DB0  5016               	movf	___ftge@ff2,w,c
  6695  001DB2  5C13               	subwf	___ftge@ff1,w,c
  6696  001DB4  5017               	movf	___ftge@ff2+1,w,c
  6697  001DB6  5814               	subwfb	___ftge@ff1+1,w,c
  6698  001DB8  5018               	movf	___ftge@ff2+2,w,c
  6699  001DBA  5815               	subwfb	___ftge@ff1+2,w,c
  6700  001DBC  E202               	bc	l4070
  6701  001DBE  90D8               	bcf	status,0,c
  6702  001DC0  D001               	goto	l922
  6703  001DC2                     l4070:
  6704  001DC2  80D8               	bsf	status,0,c
  6705  001DC4                     l922:
  6706  001DC4  FFFF               	dw	65535	; assembler added errata NOP
  6707  001DC6  0012               	return		;funcret
  6708  001DC8  FFFF               	dw	65535	; errata NOP
  6709  001DCA                     __end_of___ftge:
  6710                           	opt stack 0
  6711                           stkptr	equ	0xFFC
  6712                           tblptru	equ	0xFF8
  6713                           tblptrh	equ	0xFF7
  6714                           tblptrl	equ	0xFF6
  6715                           tablat	equ	0xFF5
  6716                           prodh	equ	0xFF4
  6717                           prodl	equ	0xFF3
  6718                           intcon	equ	0xFF2
  6719                           intcon2	equ	0xFF1
  6720                           postinc0	equ	0xFEE
  6721                           wreg	equ	0xFE8
  6722                           indf2	equ	0xFDF
  6723                           fsr2h	equ	0xFDA
  6724                           fsr2l	equ	0xFD9
  6725                           status	equ	0xFD8
  6726                           
  6727 ;; *************** function _BandDecode *****************
  6728 ;; Defined at:
  6729 ;;		line 5 in file "../digital.h"
  6730 ;; Parameters:    Size  Location     Type
  6731 ;;		None
  6732 ;; Auto vars:     Size  Location     Type
  6733 ;;		None
  6734 ;; Return value:  Size  Location     Type
  6735 ;;                  1    wreg      void 
  6736 ;; Registers used:
  6737 ;;		wreg, status,2, status,0, cstack
  6738 ;; Tracked objects:
  6739 ;;		On entry : 0/0
  6740 ;;		On exit  : 0/0
  6741 ;;		Unchanged: 0/0
  6742 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6743 ;;      Params:         0       0       0       0       0       0       0
  6744 ;;      Locals:         0       0       0       0       0       0       0
  6745 ;;      Temps:          0       0       0       0       0       0       0
  6746 ;;      Totals:         0       0       0       0       0       0       0
  6747 ;;Total ram usage:        0 bytes
  6748 ;; Hardware stack levels used:    1
  6749 ;; Hardware stack levels required when called:    4
  6750 ;; This function calls:
  6751 ;;		_SetBand
  6752 ;; This function is called by:
  6753 ;;		_FreqMeasure
  6754 ;; This function uses a non-reentrant model
  6755 ;;
  6756                           
  6757                           	psect	text37
  6758  001D02                     __ptext37:
  6759                           	opt stack 0
  6760  001D02                     _BandDecode:
  6761                           	opt stack 0
  6762  001D02  FFFF               	dw	65535	; assembler added errata NOP
  6763                           
  6764                           ;digital.h: 7: if (freq < 200) band = 0;
  6765                           
  6766                           ;incstack = 0
  6767  001D04  5049               	movf	_freq+1,w,c	;volatile
  6768  001D06  E106               	bnz	l2724
  6769  001D08  0EC8               	movlw	200
  6770  001D0A  5C48               	subwf	_freq,w,c	;volatile
  6771  001D0C  E203               	bc	l2724
  6772  001D0E  6A57               	clrf	_band,c	;volatile
  6773  001D10  EF80  F00F         	goto	_SetBand
  6774  001D14                     l2724:
  6775                           
  6776                           ;digital.h: 8: else;digital.h: 9: if ((freq >= 200) && (freq < 400)) band = 1;
  6777  001D14  5049               	movf	_freq+1,w,c	;volatile
  6778  001D16  E103               	bnz	u2300
  6779  001D18  0EC8               	movlw	200
  6780  001D1A  5C48               	subwf	_freq,w,c	;volatile
  6781  001D1C  E307               	bnc	l2730
  6782  001D1E                     u2300:
  6783  001D1E  0E90               	movlw	144
  6784  001D20  5C48               	subwf	_freq,w,c	;volatile
  6785  001D22  0E01               	movlw	1
  6786  001D24  5849               	subwfb	_freq+1,w,c	;volatile
  6787  001D26  E202               	bc	l2730
  6788  001D28  0E01               	movlw	1
  6789  001D2A  D019               	goto	L4
  6790  001D2C                     l2730:
  6791                           
  6792                           ;digital.h: 10: else;digital.h: 11: if ((freq >= 400) && (freq < 1100)) band = 2;
  6793  001D2C  0E90               	movlw	144
  6794  001D2E  5C48               	subwf	_freq,w,c	;volatile
  6795  001D30  0E01               	movlw	1
  6796  001D32  5849               	subwfb	_freq+1,w,c	;volatile
  6797  001D34  E307               	bnc	l2736
  6798  001D36  0E4C               	movlw	76
  6799  001D38  5C48               	subwf	_freq,w,c	;volatile
  6800  001D3A  0E04               	movlw	4
  6801  001D3C  5849               	subwfb	_freq+1,w,c	;volatile
  6802  001D3E  E202               	bc	l2736
  6803  001D40  0E02               	movlw	2
  6804  001D42  D00D               	goto	L4
  6805  001D44                     l2736:
  6806                           
  6807                           ;digital.h: 12: else;digital.h: 13: if ((freq >= 1100) && (freq < 1900)) band = 3;
  6808  001D44  0E4C               	movlw	76
  6809  001D46  5C48               	subwf	_freq,w,c	;volatile
  6810  001D48  0E04               	movlw	4
  6811  001D4A  5849               	subwfb	_freq+1,w,c	;volatile
  6812  001D4C  E307               	bnc	l2742
  6813  001D4E  0E6C               	movlw	108
  6814  001D50  5C48               	subwf	_freq,w,c	;volatile
  6815  001D52  0E07               	movlw	7
  6816  001D54  5849               	subwfb	_freq+1,w,c	;volatile
  6817  001D56  E202               	bc	l2742
  6818  001D58  0E03               	movlw	3
  6819  001D5A  D001               	goto	L4
  6820  001D5C                     l2742:
  6821                           
  6822                           ;digital.h: 14: else band = 4;
  6823  001D5C  0E04               	movlw	4
  6824  001D5E                     L4:
  6825  001D5E  FFFF               	dw	65535	; assembler added errata NOP
  6826  001D60  6E57               	movwf	_band,c	;volatile
  6827                           
  6828                           ;digital.h: 16: SetBand();
  6829  001D62  EF80  F00F         	goto	_SetBand	;wreg free
  6830  001D66  FFFF               	dw	65535	; errata NOP
  6831  001D68                     __end_of_BandDecode:
  6832                           	opt stack 0
  6833                           stkptr	equ	0xFFC
  6834                           tblptru	equ	0xFF8
  6835                           tblptrh	equ	0xFF7
  6836                           tblptrl	equ	0xFF6
  6837                           tablat	equ	0xFF5
  6838                           prodh	equ	0xFF4
  6839                           prodl	equ	0xFF3
  6840                           intcon	equ	0xFF2
  6841                           intcon2	equ	0xFF1
  6842                           postinc0	equ	0xFEE
  6843                           wreg	equ	0xFE8
  6844                           indf2	equ	0xFDF
  6845                           fsr2h	equ	0xFDA
  6846                           fsr2l	equ	0xFD9
  6847                           status	equ	0xFD8
  6848                           
  6849 ;; *************** function _SetBand *****************
  6850 ;; Defined at:
  6851 ;;		line 133 in file "../digital.h"
  6852 ;; Parameters:    Size  Location     Type
  6853 ;;		None
  6854 ;; Auto vars:     Size  Location     Type
  6855 ;;		None
  6856 ;; Return value:  Size  Location     Type
  6857 ;;                  1    wreg      void 
  6858 ;; Registers used:
  6859 ;;		wreg, status,2, status,0
  6860 ;; Tracked objects:
  6861 ;;		On entry : 0/0
  6862 ;;		On exit  : 0/0
  6863 ;;		Unchanged: 0/0
  6864 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6865 ;;      Params:         0       0       0       0       0       0       0
  6866 ;;      Locals:         0       0       0       0       0       0       0
  6867 ;;      Temps:          0       0       0       0       0       0       0
  6868 ;;      Totals:         0       0       0       0       0       0       0
  6869 ;;Total ram usage:        0 bytes
  6870 ;; Hardware stack levels used:    1
  6871 ;; Hardware stack levels required when called:    3
  6872 ;; This function calls:
  6873 ;;		Nothing
  6874 ;; This function is called by:
  6875 ;;		_BandDecode
  6876 ;;		_ReadStatusFromLCD
  6877 ;;		_main
  6878 ;; This function uses a non-reentrant model
  6879 ;;
  6880                           
  6881                           	psect	text38
  6882  001F00                     __ptext38:
  6883                           	opt stack 0
  6884  001F00                     _SetBand:
  6885                           	opt stack 0
  6886  001F00  FFFF               	dw	65535	; assembler added errata NOP
  6887                           
  6888                           ;digital.h: 135: if (band == 1) LATDbits.LD0 = 1;
  6889                           
  6890                           ;incstack = 0
  6891  001F02  0457               	decf	_band,w,c	;volatile
  6892  001F04  E102               	bnz	l362
  6893  001F06  808C               	bsf	3980,0,c	;volatile
  6894  001F08  D001               	goto	l2656
  6895  001F0A                     l362:
  6896                           
  6897                           ;digital.h: 136: else LATDbits.LD0 = 0;
  6898  001F0A  908C               	bcf	3980,0,c	;volatile
  6899  001F0C                     l2656:
  6900  001F0C  FFFF               	dw	65535	; assembler added errata NOP
  6901                           
  6902                           ;digital.h: 137: if (band == 2) LATDbits.LD1 = 1;
  6903  001F0E  0E02               	movlw	2
  6904  001F10  1857               	xorwf	_band,w,c	;volatile
  6905  001F12  E102               	bnz	l364
  6906  001F14  828C               	bsf	3980,1,c	;volatile
  6907  001F16  D001               	goto	l2660
  6908  001F18                     l364:
  6909                           
  6910                           ;digital.h: 138: else LATDbits.LD1 = 0;
  6911  001F18  928C               	bcf	3980,1,c	;volatile
  6912  001F1A                     l2660:
  6913  001F1A  FFFF               	dw	65535	; assembler added errata NOP
  6914                           
  6915                           ;digital.h: 139: if (band == 3) LATDbits.LD2 = 1;
  6916  001F1C  0E03               	movlw	3
  6917  001F1E  1857               	xorwf	_band,w,c	;volatile
  6918  001F20  E102               	bnz	l366
  6919  001F22  848C               	bsf	3980,2,c	;volatile
  6920  001F24  D001               	goto	l2664
  6921  001F26                     l366:
  6922                           
  6923                           ;digital.h: 140: else LATDbits.LD2 = 0;
  6924  001F26  948C               	bcf	3980,2,c	;volatile
  6925  001F28                     l2664:
  6926  001F28  FFFF               	dw	65535	; assembler added errata NOP
  6927                           
  6928                           ;digital.h: 141: if (band == 4) LATDbits.LD3 = 1;
  6929  001F2A  0E04               	movlw	4
  6930  001F2C  1857               	xorwf	_band,w,c	;volatile
  6931  001F2E  E102               	bnz	l368
  6932  001F30  868C               	bsf	3980,3,c	;volatile
  6933  001F32  D001               	goto	l370
  6934  001F34                     l368:
  6935                           
  6936                           ;digital.h: 142: else LATDbits.LD3 = 0;
  6937  001F34  968C               	bcf	3980,3,c	;volatile
  6938  001F36                     l370:
  6939  001F36  FFFF               	dw	65535	; assembler added errata NOP
  6940  001F38  0012               	return		;funcret
  6941  001F3A  FFFF               	dw	65535	; errata NOP
  6942  001F3C                     __end_of_SetBand:
  6943                           	opt stack 0
  6944                           stkptr	equ	0xFFC
  6945                           tblptru	equ	0xFF8
  6946                           tblptrh	equ	0xFF7
  6947                           tblptrl	equ	0xFF6
  6948                           tablat	equ	0xFF5
  6949                           prodh	equ	0xFF4
  6950                           prodl	equ	0xFF3
  6951                           intcon	equ	0xFF2
  6952                           intcon2	equ	0xFF1
  6953                           postinc0	equ	0xFEE
  6954                           wreg	equ	0xFE8
  6955                           indf2	equ	0xFDF
  6956                           fsr2h	equ	0xFDA
  6957                           fsr2l	equ	0xFD9
  6958                           status	equ	0xFD8
  6959                           
  6960 ;; *************** function _PTT_OFF *****************
  6961 ;; Defined at:
  6962 ;;		line 113 in file "../digital.h"
  6963 ;; Parameters:    Size  Location     Type
  6964 ;;		None
  6965 ;; Auto vars:     Size  Location     Type
  6966 ;;		None
  6967 ;; Return value:  Size  Location     Type
  6968 ;;                  1    wreg      void 
  6969 ;; Registers used:
  6970 ;;		wreg, status,2, status,0, cstack
  6971 ;; Tracked objects:
  6972 ;;		On entry : 0/0
  6973 ;;		On exit  : 0/0
  6974 ;;		Unchanged: 0/0
  6975 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6976 ;;      Params:         0       0       0       0       0       0       0
  6977 ;;      Locals:         0       0       0       0       0       0       0
  6978 ;;      Temps:          0       0       0       0       0       0       0
  6979 ;;      Totals:         0       0       0       0       0       0       0
  6980 ;;Total ram usage:        0 bytes
  6981 ;; Hardware stack levels used:    1
  6982 ;; Hardware stack levels required when called:    4
  6983 ;; This function calls:
  6984 ;;		_DelayMs
  6985 ;; This function is called by:
  6986 ;;		_PTT_read
  6987 ;;		_ReadStatusFromLCD
  6988 ;; This function uses a non-reentrant model
  6989 ;;
  6990                           
  6991                           	psect	text39
  6992  002296                     __ptext39:
  6993                           	opt stack 0
  6994  002296                     _PTT_OFF:
  6995                           	opt stack 0
  6996  002296  FFFF               	dw	65535	; assembler added errata NOP
  6997                           
  6998                           ;digital.h: 115: if (ptt == 0) return;
  6999                           
  7000                           ;incstack = 0
  7001  002298  5056               	movf	_ptt,w,c	;volatile
  7002  00229A  E008               	bz	l353
  7003                           
  7004                           ;digital.h: 116: ptt = 0;
  7005  00229C  6A56               	clrf	_ptt,c	;volatile
  7006                           
  7007                           ;digital.h: 118: LATEbits.LE2 = 0;
  7008  00229E  948D               	bcf	3981,2,c	;volatile
  7009                           
  7010                           ;digital.h: 119: LATCbits.LC4 = 0;
  7011  0022A0  988B               	bcf	3979,4,c	;volatile
  7012                           
  7013                           ;digital.h: 120: DelayMs(reldel);
  7014  0022A2  0100               	movlb	0	; () banked
  7015  0022A4  51F4               	movf	_reldel& (0+255),w,b	;volatile
  7016  0022A6  ECE1  F010         	call	_DelayMs
  7017                           
  7018                           ;digital.h: 121: LATBbits.LB3 = 0;
  7019  0022AA  968A               	bcf	3978,3,c	;volatile
  7020  0022AC                     l353:
  7021  0022AC  0012               	return		;funcret
  7022  0022AE  FFFF               	dw	65535	; errata NOP
  7023  0022B0                     __end_of_PTT_OFF:
  7024                           	opt stack 0
  7025                           stkptr	equ	0xFFC
  7026                           tblptru	equ	0xFF8
  7027                           tblptrh	equ	0xFF7
  7028                           tblptrl	equ	0xFF6
  7029                           tablat	equ	0xFF5
  7030                           prodh	equ	0xFF4
  7031                           prodl	equ	0xFF3
  7032                           intcon	equ	0xFF2
  7033                           intcon2	equ	0xFF1
  7034                           postinc0	equ	0xFEE
  7035                           wreg	equ	0xFE8
  7036                           indf2	equ	0xFDF
  7037                           fsr2h	equ	0xFDA
  7038                           fsr2l	equ	0xFD9
  7039                           status	equ	0xFD8
  7040                           
  7041 ;; *************** function _LCDversionSend *****************
  7042 ;; Defined at:
  7043 ;;		line 299 in file "../nextion.h"
  7044 ;; Parameters:    Size  Location     Type
  7045 ;;		None
  7046 ;; Auto vars:     Size  Location     Type
  7047 ;;  rep             1   17[COMRAM] unsigned char 
  7048 ;; Return value:  Size  Location     Type
  7049 ;;                  1    wreg      void 
  7050 ;; Registers used:
  7051 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  7052 ;; Tracked objects:
  7053 ;;		On entry : 0/0
  7054 ;;		On exit  : 0/0
  7055 ;;		Unchanged: 0/0
  7056 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7057 ;;      Params:         0       0       0       0       0       0       0
  7058 ;;      Locals:         1       0       0       0       0       0       0
  7059 ;;      Temps:          0       0       0       0       0       0       0
  7060 ;;      Totals:         1       0       0       0       0       0       0
  7061 ;;Total ram usage:        1 bytes
  7062 ;; Hardware stack levels used:    1
  7063 ;; Hardware stack levels required when called:    5
  7064 ;; This function calls:
  7065 ;;		_CreateBuffTX
  7066 ;;		_SendUSART
  7067 ;; This function is called by:
  7068 ;;		_main
  7069 ;; This function uses a non-reentrant model
  7070 ;;
  7071                           
  7072                           	psect	text40
  7073  0020D2                     __ptext40:
  7074                           	opt stack 0
  7075  0020D2                     _LCDversionSend:
  7076                           	opt stack 0
  7077  0020D2  FFFF               	dw	65535	; assembler added errata NOP
  7078                           
  7079                           ;nextion.h: 301: unsigned char rep = 3;
  7080                           
  7081                           ;incstack = 0
  7082  0020D4  0E03               	movlw	3
  7083  0020D6  6E12               	movwf	LCDversionSend@rep,c
  7084                           
  7085                           ;nextion.h: 302: while(rep--)
  7086  0020D8  D00B               	goto	l3822
  7087  0020DA                     l3818:
  7088                           
  7089                           ;nextion.h: 303: {;nextion.h: 304: CreateBuffTX("version",81); SendUSART();
  7090  0020DA  0E1F               	movlw	low STR_26
  7091  0020DC  6E0C               	movwf	CreateBuffTX@str,c
  7092  0020DE  0E51               	movlw	81
  7093  0020E0  6E0D               	movwf	CreateBuffTX@data,c
  7094  0020E2  6A0E               	clrf	CreateBuffTX@data+1,c
  7095  0020E4  6A0F               	clrf	CreateBuffTX@data+2,c
  7096  0020E6  6A10               	clrf	CreateBuffTX@data+3,c
  7097  0020E8  EC82  F00D         	call	_CreateBuffTX	;wreg free
  7098  0020EC  EC30  F011         	call	_SendUSART	;wreg free
  7099  0020F0                     l3822:
  7100  0020F0  FFFF               	dw	65535	; assembler added errata NOP
  7101  0020F2  0612               	decf	LCDversionSend@rep,f,c
  7102  0020F4  2812               	incf	LCDversionSend@rep,w,c
  7103  0020F6  E1F1               	bnz	l3818
  7104  0020F8  0012               	return		;funcret
  7105  0020FA  FFFF               	dw	65535	; errata NOP
  7106  0020FC                     __end_of_LCDversionSend:
  7107                           	opt stack 0
  7108                           stkptr	equ	0xFFC
  7109                           tblptru	equ	0xFF8
  7110                           tblptrh	equ	0xFF7
  7111                           tblptrl	equ	0xFF6
  7112                           tablat	equ	0xFF5
  7113                           prodh	equ	0xFF4
  7114                           prodl	equ	0xFF3
  7115                           intcon	equ	0xFF2
  7116                           intcon2	equ	0xFF1
  7117                           postinc0	equ	0xFEE
  7118                           wreg	equ	0xFE8
  7119                           indf2	equ	0xFDF
  7120                           fsr2h	equ	0xFDA
  7121                           fsr2l	equ	0xFD9
  7122                           status	equ	0xFD8
  7123                           
  7124 ;; *************** function _SendUSART *****************
  7125 ;; Defined at:
  7126 ;;		line 194 in file "../nextion.h"
  7127 ;; Parameters:    Size  Location     Type
  7128 ;;		None
  7129 ;; Auto vars:     Size  Location     Type
  7130 ;;		None
  7131 ;; Return value:  Size  Location     Type
  7132 ;;                  1    wreg      void 
  7133 ;; Registers used:
  7134 ;;		wreg, status,2, status,0, cstack
  7135 ;; Tracked objects:
  7136 ;;		On entry : 0/0
  7137 ;;		On exit  : 0/0
  7138 ;;		Unchanged: 0/0
  7139 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7140 ;;      Params:         0       0       0       0       0       0       0
  7141 ;;      Locals:         0       0       0       0       0       0       0
  7142 ;;      Temps:          0       0       0       0       0       0       0
  7143 ;;      Totals:         0       0       0       0       0       0       0
  7144 ;;Total ram usage:        0 bytes
  7145 ;; Hardware stack levels used:    1
  7146 ;; Hardware stack levels required when called:    4
  7147 ;; This function calls:
  7148 ;;		_DelayMs
  7149 ;; This function is called by:
  7150 ;;		_SetupMode
  7151 ;;		_LCDpageSelect
  7152 ;;		_LCDversionSend
  7153 ;; This function uses a non-reentrant model
  7154 ;;
  7155                           
  7156                           	psect	text41
  7157  002260                     __ptext41:
  7158                           	opt stack 0
  7159  002260                     _SendUSART:
  7160                           	opt stack 0
  7161  002260  FFFF               	dw	65535	; assembler added errata NOP
  7162                           
  7163                           ;nextion.h: 196: txb = 0; PIE1bits.TXIE = 1;
  7164                           
  7165                           ;incstack = 0
  7166  002262  0100               	movlb	0	; () banked
  7167  002264  6B87               	clrf	_txb& (0+255),b	;volatile
  7168  002266  889D               	bsf	3997,4,c	;volatile
  7169                           
  7170                           ;nextion.h: 197: while(PIE1bits.TXIE) asm("clrwdt");
  7171  002268  D002               	goto	l521
  7172  00226A                     l522:
  7173  00226A  FFFF               	dw	65535	; assembler added errata NOP
  7174  00226C  0004               	clrwdt		;# 
  7175  00226E                     l521:
  7176  00226E  FFFF               	dw	65535	; assembler added errata NOP
  7177  002270  B89D               	btfsc	3997,4,c	;volatile
  7178  002272  D7FB               	goto	l522
  7179                           
  7180                           ;nextion.h: 198: DelayMs(5);
  7181  002274  0E05               	movlw	5
  7182  002276  EFE1  F010         	goto	_DelayMs
  7183  00227A  FFFF               	dw	65535	; errata NOP
  7184  00227C                     __end_of_SendUSART:
  7185                           	opt stack 0
  7186                           stkptr	equ	0xFFC
  7187                           tblptru	equ	0xFF8
  7188                           tblptrh	equ	0xFF7
  7189                           tblptrl	equ	0xFF6
  7190                           tablat	equ	0xFF5
  7191                           prodh	equ	0xFF4
  7192                           prodl	equ	0xFF3
  7193                           intcon	equ	0xFF2
  7194                           intcon2	equ	0xFF1
  7195                           postinc0	equ	0xFEE
  7196                           wreg	equ	0xFE8
  7197                           indf2	equ	0xFDF
  7198                           fsr2h	equ	0xFDA
  7199                           fsr2l	equ	0xFD9
  7200                           status	equ	0xFD8
  7201                           
  7202 ;; *************** function _DelayMs *****************
  7203 ;; Defined at:
  7204 ;;		line 70 in file "../digital.h"
  7205 ;; Parameters:    Size  Location     Type
  7206 ;;  ms              1    wreg     unsigned char 
  7207 ;; Auto vars:     Size  Location     Type
  7208 ;;  ms              1    5[COMRAM] unsigned char 
  7209 ;; Return value:  Size  Location     Type
  7210 ;;                  1    wreg      void 
  7211 ;; Registers used:
  7212 ;;		wreg, status,2, status,0
  7213 ;; Tracked objects:
  7214 ;;		On entry : 0/0
  7215 ;;		On exit  : 0/0
  7216 ;;		Unchanged: 0/0
  7217 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7218 ;;      Params:         0       0       0       0       0       0       0
  7219 ;;      Locals:         1       0       0       0       0       0       0
  7220 ;;      Temps:          1       0       0       0       0       0       0
  7221 ;;      Totals:         2       0       0       0       0       0       0
  7222 ;;Total ram usage:        2 bytes
  7223 ;; Hardware stack levels used:    1
  7224 ;; Hardware stack levels required when called:    3
  7225 ;; This function calls:
  7226 ;;		Nothing
  7227 ;; This function is called by:
  7228 ;;		_Beep
  7229 ;;		_PTT_ON
  7230 ;;		_PTT_OFF
  7231 ;;		_SendUSART
  7232 ;; This function uses a non-reentrant model
  7233 ;;
  7234                           
  7235                           	psect	text42
  7236  0021C2                     __ptext42:
  7237                           	opt stack 0
  7238  0021C2                     _DelayMs:
  7239                           	opt stack 0
  7240  0021C2  FFFF               	dw	65535	; assembler added errata NOP
  7241                           
  7242                           ;incstack = 0
  7243                           ;DelayMs@ms stored from wreg
  7244  0021C4  6E06               	movwf	DelayMs@ms,c
  7245                           
  7246                           ;digital.h: 72: while(ms--)
  7247  0021C6  D00A               	goto	l2756
  7248  0021C8                     l334:
  7249  0021C8  0004               	clrwdt		;# 
  7250                           
  7251                           ;digital.h: 75: _delay((unsigned long)((1)*(40000000/4000.0)));
  7252  0021CA  0E0A               	movlw	10
  7253  0021CC  6E05               	movwf	??_DelayMs& (0+255),c
  7254  0021CE  0EBE               	movlw	190
  7255  0021D0                     u5207:
  7256  0021D0  FFFF               	dw	65535	; errata NOP
  7257  0021D2  2EE8               	decfsz	wreg,f,c
  7258  0021D4  D7FD               	bra	u5207
  7259  0021D6  2E05               	decfsz	??_DelayMs& (0+255),f,c
  7260  0021D8  D7FB               	bra	u5207
  7261  0021DA  D000               	nop2	
  7262  0021DC                     l2756:
  7263  0021DC  FFFF               	dw	65535	; assembler added errata NOP
  7264  0021DE  0606               	decf	DelayMs@ms,f,c
  7265  0021E0  2806               	incf	DelayMs@ms,w,c
  7266  0021E2  E1F2               	bnz	l334
  7267  0021E4  0012               	return		;funcret
  7268  0021E6  FFFF               	dw	65535	; errata NOP
  7269  0021E8                     __end_of_DelayMs:
  7270                           	opt stack 0
  7271                           stkptr	equ	0xFFC
  7272                           tblptru	equ	0xFF8
  7273                           tblptrh	equ	0xFF7
  7274                           tblptrl	equ	0xFF6
  7275                           tablat	equ	0xFF5
  7276                           prodh	equ	0xFF4
  7277                           prodl	equ	0xFF3
  7278                           intcon	equ	0xFF2
  7279                           intcon2	equ	0xFF1
  7280                           postinc0	equ	0xFEE
  7281                           wreg	equ	0xFE8
  7282                           indf2	equ	0xFDF
  7283                           fsr2h	equ	0xFDA
  7284                           fsr2l	equ	0xFD9
  7285                           status	equ	0xFD8
  7286                           
  7287 ;; *************** function _CreateBuffTX *****************
  7288 ;; Defined at:
  7289 ;;		line 24 in file "../nextion.h"
  7290 ;; Parameters:    Size  Location     Type
  7291 ;;  str             1   11[COMRAM] PTR const unsigned char 
  7292 ;;		 -> STR_26(8), STR_25(10), STR_24(10), STR_23(10), 
  7293 ;;		 -> STR_22(4), STR_21(4), STR_20(4), STR_19(5), 
  7294 ;;		 -> STR_18(4), STR_17(4), STR_16(5), STR_15(5), 
  7295 ;;		 -> STR_14(4), STR_13(4), STR_12(4), STR_11(4), 
  7296 ;;		 -> STR_10(4), STR_9(4), STR_8(5), STR_7(5), 
  7297 ;;		 -> STR_6(5), STR_5(5), STR_4(4), STR_3(4), 
  7298 ;;		 -> STR_2(4), STR_1(4), 
  7299 ;;  data            4   12[COMRAM] unsigned long 
  7300 ;; Auto vars:     Size  Location     Type
  7301 ;;		None
  7302 ;; Return value:  Size  Location     Type
  7303 ;;                  1    wreg      void 
  7304 ;; Registers used:
  7305 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  7306 ;; Tracked objects:
  7307 ;;		On entry : 0/0
  7308 ;;		On exit  : 0/0
  7309 ;;		Unchanged: 0/0
  7310 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7311 ;;      Params:         5       0       0       0       0       0       0
  7312 ;;      Locals:         0       0       0       0       0       0       0
  7313 ;;      Temps:          1       0       0       0       0       0       0
  7314 ;;      Totals:         6       0       0       0       0       0       0
  7315 ;;Total ram usage:        6 bytes
  7316 ;; Hardware stack levels used:    1
  7317 ;; Hardware stack levels required when called:    4
  7318 ;; This function calls:
  7319 ;;		_ConvertNumber
  7320 ;; This function is called by:
  7321 ;;		_SendStatusToLCD
  7322 ;;		_SetupMode
  7323 ;;		_LCDpageSelect
  7324 ;;		_LCDversionSend
  7325 ;; This function uses a non-reentrant model
  7326 ;;
  7327                           
  7328                           	psect	text43
  7329  001B04                     __ptext43:
  7330                           	opt stack 0
  7331  001B04                     _CreateBuffTX:
  7332                           	opt stack 0
  7333  001B04  FFFF               	dw	65535	; assembler added errata NOP
  7334                           
  7335                           ;nextion.h: 26: for(tx_len = 0; str[tx_len] != '\0'; tx_len++) buffTX[tx_len] = str[tx_l
      +                          en];
  7336                           
  7337                           ;incstack = 0
  7338  001B06  6A52               	clrf	_tx_len,c	;volatile
  7339  001B08  D00E               	goto	l2966
  7340  001B0A                     l2962:
  7341  001B0A  500C               	movf	CreateBuffTX@str,w,c
  7342  001B0C  2452               	addwf	_tx_len,w,c
  7343  001B0E  6E11               	movwf	??_CreateBuffTX& (0+255),c
  7344  001B10  C011  FFF6         	movff	??_CreateBuffTX,tblptrl
  7345  001B14                     	if	0	;There is only one active tblptr byte
  7346  001B14                     	endif
  7347  001B14                     	if	0	;tblptru may be non-zero
  7348  001B14                     	endif
  7349  001B14                     	if	0	;tblptru may be non-zero
  7350  001B14                     	endif
  7351  001B14  5052               	movf	_tx_len,w,c
  7352  001B16  0F8F               	addlw	low _buffTX
  7353  001B18  6ED9               	movwf	fsr2l,c
  7354  001B1A  6ADA               	clrf	fsr2h,c
  7355  001B1C  0008               	tblrd		*
  7356  001B1E  FFFF               	dw	65535	; errata NOP
  7357  001B20  CFF5 FFDF          	movff	tablat,indf2
  7358  001B24  2A52               	incf	_tx_len,f,c	;volatile
  7359  001B26                     l2966:
  7360  001B26  FFFF               	dw	65535	; assembler added errata NOP
  7361  001B28  500C               	movf	CreateBuffTX@str,w,c
  7362  001B2A  2452               	addwf	_tx_len,w,c
  7363  001B2C  6E11               	movwf	??_CreateBuffTX& (0+255),c
  7364  001B2E  C011  FFF6         	movff	??_CreateBuffTX,tblptrl
  7365  001B32                     	if	0	;There is only one active tblptr byte
  7366  001B32                     	endif
  7367  001B32                     	if	0	;tblptru may be non-zero
  7368  001B32                     	endif
  7369  001B32                     	if	0	;tblptru may be non-zero
  7370  001B32                     	endif
  7371  001B32  0008               	tblrd		*
  7372  001B34  FFFF               	dw	65535	; errata NOP
  7373  001B36  50F5               	movf	tablat,w,c
  7374  001B38  E1E8               	bnz	l2962
  7375                           
  7376                           ;nextion.h: 28: if (data != 0xFFFFFF)
  7377  001B3A  280D               	incf	CreateBuffTX@data,w,c
  7378  001B3C  E105               	bnz	u2760
  7379  001B3E  280E               	incf	CreateBuffTX@data+1,w,c
  7380  001B40  E103               	bnz	u2760
  7381  001B42  280F               	incf	CreateBuffTX@data+2,w,c
  7382  001B44  1010               	iorwf	CreateBuffTX@data+3,w,c
  7383  001B46  E016               	bz	l2978
  7384  001B48                     u2760:
  7385                           
  7386                           ;nextion.h: 29: {;nextion.h: 30: buffTX[tx_len++] = '=';
  7387  001B48  5052               	movf	_tx_len,w,c
  7388  001B4A  0F8F               	addlw	low _buffTX
  7389  001B4C  6ED9               	movwf	fsr2l,c
  7390  001B4E  6ADA               	clrf	fsr2h,c
  7391  001B50  0E3D               	movlw	61
  7392  001B52  6EDF               	movwf	indf2,c
  7393  001B54  2A52               	incf	_tx_len,f,c	;volatile
  7394                           
  7395                           ;nextion.h: 31: ConvertNumber(data, (unsigned char *)&buffTX[tx_len]);
  7396  001B56  C00D  F005         	movff	CreateBuffTX@data,ConvertNumber@number
  7397  001B5A  C00E  F006         	movff	CreateBuffTX@data+1,ConvertNumber@number+1
  7398  001B5E  C00F  F007         	movff	CreateBuffTX@data+2,ConvertNumber@number+2
  7399  001B62  C010  F008         	movff	CreateBuffTX@data+3,ConvertNumber@number+3
  7400  001B66  5052               	movf	_tx_len,w,c
  7401  001B68  0F8F               	addlw	low _buffTX
  7402  001B6A  6E09               	movwf	ConvertNumber@conv,c
  7403  001B6C  EC7E  F009         	call	_ConvertNumber	;wreg free
  7404                           
  7405                           ;nextion.h: 32: tx_len += 6;
  7406  001B70  0E06               	movlw	6
  7407  001B72  2652               	addwf	_tx_len,f,c	;volatile
  7408  001B74                     l2978:
  7409                           
  7410                           ;nextion.h: 33: };nextion.h: 35: buffTX[tx_len++] = 0xFF;
  7411  001B74  5052               	movf	_tx_len,w,c
  7412  001B76  0F8F               	addlw	low _buffTX
  7413  001B78  6ED9               	movwf	fsr2l,c
  7414  001B7A  6ADA               	clrf	fsr2h,c
  7415  001B7C  68DF               	setf	indf2,c
  7416  001B7E  2A52               	incf	_tx_len,f,c	;volatile
  7417                           
  7418                           ;nextion.h: 36: buffTX[tx_len++] = 0xFF;
  7419  001B80  5052               	movf	_tx_len,w,c
  7420  001B82  0F8F               	addlw	low _buffTX
  7421  001B84  6ED9               	movwf	fsr2l,c
  7422  001B86  6ADA               	clrf	fsr2h,c
  7423  001B88  68DF               	setf	indf2,c
  7424  001B8A  2A52               	incf	_tx_len,f,c	;volatile
  7425                           
  7426                           ;nextion.h: 37: buffTX[tx_len] = 0xFF;
  7427  001B8C  5052               	movf	_tx_len,w,c
  7428  001B8E  0F8F               	addlw	low _buffTX
  7429  001B90  6ED9               	movwf	fsr2l,c
  7430  001B92  6ADA               	clrf	fsr2h,c
  7431  001B94  68DF               	setf	indf2,c
  7432  001B96  0CFF               	retlw	255	;funcret
  7433  001B98  FFFF               	dw	65535	; errata NOP
  7434  001B9A                     __end_of_CreateBuffTX:
  7435                           	opt stack 0
  7436                           stkptr	equ	0xFFC
  7437                           tblptru	equ	0xFF8
  7438                           tblptrh	equ	0xFF7
  7439                           tblptrl	equ	0xFF6
  7440                           tablat	equ	0xFF5
  7441                           prodh	equ	0xFF4
  7442                           prodl	equ	0xFF3
  7443                           intcon	equ	0xFF2
  7444                           intcon2	equ	0xFF1
  7445                           postinc0	equ	0xFEE
  7446                           wreg	equ	0xFE8
  7447                           indf2	equ	0xFDF
  7448                           fsr2h	equ	0xFDA
  7449                           fsr2l	equ	0xFD9
  7450                           status	equ	0xFD8
  7451                           
  7452 ;; *************** function _ConvertNumber *****************
  7453 ;; Defined at:
  7454 ;;		line 6 in file "../nextion.h"
  7455 ;; Parameters:    Size  Location     Type
  7456 ;;  number          4    4[COMRAM] unsigned long 
  7457 ;;  conv            1    8[COMRAM] PTR unsigned char 
  7458 ;;		 -> buffTX(64), 
  7459 ;; Auto vars:     Size  Location     Type
  7460 ;;		None
  7461 ;; Return value:  Size  Location     Type
  7462 ;;                  1    wreg      void 
  7463 ;; Registers used:
  7464 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  7465 ;; Tracked objects:
  7466 ;;		On entry : 0/0
  7467 ;;		On exit  : 0/0
  7468 ;;		Unchanged: 0/0
  7469 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7470 ;;      Params:         5       0       0       0       0       0       0
  7471 ;;      Locals:         0       0       0       0       0       0       0
  7472 ;;      Temps:          0       0       0       0       0       0       0
  7473 ;;      Totals:         5       0       0       0       0       0       0
  7474 ;;Total ram usage:        5 bytes
  7475 ;; Hardware stack levels used:    1
  7476 ;; Hardware stack levels required when called:    3
  7477 ;; This function calls:
  7478 ;;		Nothing
  7479 ;; This function is called by:
  7480 ;;		_CreateBuffTX
  7481 ;; This function uses a non-reentrant model
  7482 ;;
  7483                           
  7484                           	psect	text44
  7485  0012FC                     __ptext44:
  7486                           	opt stack 0
  7487  0012FC                     _ConvertNumber:
  7488                           	opt stack 0
  7489  0012FC  FFFF               	dw	65535	; assembler added errata NOP
  7490                           
  7491                           ;nextion.h: 8: conv[0] = 0x30;
  7492                           
  7493                           ;incstack = 0
  7494  0012FE  5009               	movf	ConvertNumber@conv,w,c
  7495  001300  6ED9               	movwf	fsr2l,c
  7496  001302  6ADA               	clrf	fsr2h,c
  7497  001304  0E30               	movlw	48
  7498  001306  6EDF               	movwf	indf2,c
  7499                           
  7500                           ;nextion.h: 9: conv[1] = 0x30;
  7501  001308  5009               	movf	ConvertNumber@conv,w,c
  7502  00130A  6ED9               	movwf	fsr2l,c
  7503  00130C  6ADA               	clrf	fsr2h,c
  7504  00130E  2AD9               	incf	fsr2l,f,c
  7505  001310  0E30               	movlw	48
  7506  001312  6EDF               	movwf	indf2,c
  7507                           
  7508                           ;nextion.h: 10: conv[2] = 0x30;
  7509  001314  5009               	movf	ConvertNumber@conv,w,c
  7510  001316  6ED9               	movwf	fsr2l,c
  7511  001318  6ADA               	clrf	fsr2h,c
  7512  00131A  0E02               	movlw	2
  7513  00131C  26D9               	addwf	fsr2l,f,c
  7514  00131E  0E30               	movlw	48
  7515  001320  6EDF               	movwf	indf2,c
  7516                           
  7517                           ;nextion.h: 11: conv[3] = 0x30;
  7518  001322  5009               	movf	ConvertNumber@conv,w,c
  7519  001324  6ED9               	movwf	fsr2l,c
  7520  001326  6ADA               	clrf	fsr2h,c
  7521  001328  0E03               	movlw	3
  7522  00132A  26D9               	addwf	fsr2l,f,c
  7523  00132C  0E30               	movlw	48
  7524  00132E  6EDF               	movwf	indf2,c
  7525                           
  7526                           ;nextion.h: 12: conv[4] = 0x30;
  7527  001330  5009               	movf	ConvertNumber@conv,w,c
  7528  001332  6ED9               	movwf	fsr2l,c
  7529  001334  6ADA               	clrf	fsr2h,c
  7530  001336  0E04               	movlw	4
  7531  001338  26D9               	addwf	fsr2l,f,c
  7532  00133A  0E30               	movlw	48
  7533  00133C  6EDF               	movwf	indf2,c
  7534                           
  7535                           ;nextion.h: 13: conv[5] = 0x30;
  7536  00133E  5009               	movf	ConvertNumber@conv,w,c
  7537  001340  6ED9               	movwf	fsr2l,c
  7538  001342  6ADA               	clrf	fsr2h,c
  7539  001344  0E05               	movlw	5
  7540  001346  26D9               	addwf	fsr2l,f,c
  7541  001348  0E30               	movlw	48
  7542  00134A  6EDF               	movwf	indf2,c
  7543                           
  7544                           ;nextion.h: 15: while(number > 99999) {number -= 100000; conv[0]++;}
  7545  00134C  D00D               	goto	l2774
  7546  00134E                     l2770:
  7547  00134E  FFFF               	dw	65535	; assembler added errata NOP
  7548  001350  0EA0               	movlw	160
  7549  001352  5E05               	subwf	ConvertNumber@number,f,c
  7550  001354  0E86               	movlw	134
  7551  001356  5A06               	subwfb	ConvertNumber@number+1,f,c
  7552  001358  0E01               	movlw	1
  7553  00135A  5A07               	subwfb	ConvertNumber@number+2,f,c
  7554  00135C  0E00               	movlw	0
  7555  00135E  5A08               	subwfb	ConvertNumber@number+3,f,c
  7556  001360  5009               	movf	ConvertNumber@conv,w,c
  7557  001362  6ED9               	movwf	fsr2l,c
  7558  001364  6ADA               	clrf	fsr2h,c
  7559  001366  2ADF               	incf	indf2,f,c
  7560  001368                     l2774:
  7561  001368  FFFF               	dw	65535	; assembler added errata NOP
  7562  00136A  5008               	movf	ConvertNumber@number+3,w,c
  7563  00136C  E1F0               	bnz	l2770
  7564  00136E  0EA0               	movlw	160
  7565  001370  5C05               	subwf	ConvertNumber@number,w,c
  7566  001372  0E86               	movlw	134
  7567  001374  5806               	subwfb	ConvertNumber@number+1,w,c
  7568  001376  0E01               	movlw	1
  7569  001378  5807               	subwfb	ConvertNumber@number+2,w,c
  7570  00137A  E30E               	bnc	l2780
  7571  00137C  D7E8               	goto	l2770
  7572  00137E                     l2776:
  7573  00137E  FFFF               	dw	65535	; assembler added errata NOP
  7574  001380  0E10               	movlw	16
  7575  001382  5E05               	subwf	ConvertNumber@number,f,c
  7576  001384  0E27               	movlw	39
  7577  001386  5A06               	subwfb	ConvertNumber@number+1,f,c
  7578  001388  0E00               	movlw	0
  7579  00138A  5A07               	subwfb	ConvertNumber@number+2,f,c
  7580  00138C  5A08               	subwfb	ConvertNumber@number+3,f,c
  7581  00138E  5009               	movf	ConvertNumber@conv,w,c
  7582  001390  6ED9               	movwf	fsr2l,c
  7583  001392  6ADA               	clrf	fsr2h,c
  7584  001394  2AD9               	incf	fsr2l,f,c
  7585  001396  2ADF               	incf	indf2,f,c
  7586  001398                     l2780:
  7587  001398  5008               	movf	ConvertNumber@number+3,w,c
  7588  00139A  1007               	iorwf	ConvertNumber@number+2,w,c
  7589  00139C  E1F0               	bnz	l2776
  7590  00139E  0E10               	movlw	16
  7591  0013A0  5C05               	subwf	ConvertNumber@number,w,c
  7592  0013A2  0E27               	movlw	39
  7593  0013A4  5806               	subwfb	ConvertNumber@number+1,w,c
  7594  0013A6  E30F               	bnc	l2786
  7595  0013A8  D7EA               	goto	l2776
  7596  0013AA                     l2782:
  7597  0013AA  FFFF               	dw	65535	; assembler added errata NOP
  7598  0013AC  0EE8               	movlw	232
  7599  0013AE  5E05               	subwf	ConvertNumber@number,f,c
  7600  0013B0  0E03               	movlw	3
  7601  0013B2  5A06               	subwfb	ConvertNumber@number+1,f,c
  7602  0013B4  0E00               	movlw	0
  7603  0013B6  5A07               	subwfb	ConvertNumber@number+2,f,c
  7604  0013B8  5A08               	subwfb	ConvertNumber@number+3,f,c
  7605  0013BA  5009               	movf	ConvertNumber@conv,w,c
  7606  0013BC  6ED9               	movwf	fsr2l,c
  7607  0013BE  6ADA               	clrf	fsr2h,c
  7608  0013C0  0E02               	movlw	2
  7609  0013C2  26D9               	addwf	fsr2l,f,c
  7610  0013C4  2ADF               	incf	indf2,f,c
  7611  0013C6                     l2786:
  7612  0013C6  5008               	movf	ConvertNumber@number+3,w,c
  7613  0013C8  1007               	iorwf	ConvertNumber@number+2,w,c
  7614  0013CA  E1EF               	bnz	l2782
  7615  0013CC  0EE8               	movlw	232
  7616  0013CE  5C05               	subwf	ConvertNumber@number,w,c
  7617  0013D0  0E03               	movlw	3
  7618  0013D2  5806               	subwfb	ConvertNumber@number+1,w,c
  7619  0013D4  E30E               	bnc	l2792
  7620  0013D6  D7E9               	goto	l2782
  7621  0013D8                     l2788:
  7622  0013D8  FFFF               	dw	65535	; assembler added errata NOP
  7623  0013DA  0E64               	movlw	100
  7624  0013DC  5E05               	subwf	ConvertNumber@number,f,c
  7625  0013DE  0E00               	movlw	0
  7626  0013E0  5A06               	subwfb	ConvertNumber@number+1,f,c
  7627  0013E2  5A07               	subwfb	ConvertNumber@number+2,f,c
  7628  0013E4  5A08               	subwfb	ConvertNumber@number+3,f,c
  7629  0013E6  5009               	movf	ConvertNumber@conv,w,c
  7630  0013E8  6ED9               	movwf	fsr2l,c
  7631  0013EA  6ADA               	clrf	fsr2h,c
  7632  0013EC  0E03               	movlw	3
  7633  0013EE  26D9               	addwf	fsr2l,f,c
  7634  0013F0  2ADF               	incf	indf2,f,c
  7635  0013F2                     l2792:
  7636  0013F2  5008               	movf	ConvertNumber@number+3,w,c
  7637  0013F4  1007               	iorwf	ConvertNumber@number+2,w,c
  7638  0013F6  1006               	iorwf	ConvertNumber@number+1,w,c
  7639  0013F8  E1EF               	bnz	l2788
  7640  0013FA  0E64               	movlw	100
  7641  0013FC  5C05               	subwf	ConvertNumber@number,w,c
  7642  0013FE  E30D               	bnc	l2798
  7643  001400  D7EB               	goto	l2788
  7644  001402                     l2794:
  7645  001402  0E0A               	movlw	10
  7646  001404  5E05               	subwf	ConvertNumber@number,f,c
  7647  001406  0E00               	movlw	0
  7648  001408  5A06               	subwfb	ConvertNumber@number+1,f,c
  7649  00140A  5A07               	subwfb	ConvertNumber@number+2,f,c
  7650  00140C  5A08               	subwfb	ConvertNumber@number+3,f,c
  7651  00140E  5009               	movf	ConvertNumber@conv,w,c
  7652  001410  6ED9               	movwf	fsr2l,c
  7653  001412  6ADA               	clrf	fsr2h,c
  7654  001414  0E04               	movlw	4
  7655  001416  26D9               	addwf	fsr2l,f,c
  7656  001418  2ADF               	incf	indf2,f,c
  7657  00141A                     l2798:
  7658  00141A  5008               	movf	ConvertNumber@number+3,w,c
  7659  00141C  1007               	iorwf	ConvertNumber@number+2,w,c
  7660  00141E  1006               	iorwf	ConvertNumber@number+1,w,c
  7661  001420  E1F0               	bnz	l2794
  7662  001422  0E0A               	movlw	10
  7663  001424  5C05               	subwf	ConvertNumber@number,w,c
  7664  001426  E2ED               	bc	l2794
  7665                           
  7666                           ;nextion.h: 20: conv[5] += number;
  7667  001428  5009               	movf	ConvertNumber@conv,w,c
  7668  00142A  6ED9               	movwf	fsr2l,c
  7669  00142C  6ADA               	clrf	fsr2h,c
  7670  00142E  0E05               	movlw	5
  7671  001430  26D9               	addwf	fsr2l,f,c
  7672  001432  5005               	movf	ConvertNumber@number,w,c
  7673  001434  26DF               	addwf	indf2,f,c
  7674  001436  0012               	return		;funcret
  7675  001438  FFFF               	dw	65535	; errata NOP
  7676  00143A                     __end_of_ConvertNumber:
  7677                           	opt stack 0
  7678                           stkptr	equ	0xFFC
  7679                           tblptru	equ	0xFF8
  7680                           tblptrh	equ	0xFF7
  7681                           tblptrl	equ	0xFF6
  7682                           tablat	equ	0xFF5
  7683                           prodh	equ	0xFF4
  7684                           prodl	equ	0xFF3
  7685                           intcon	equ	0xFF2
  7686                           intcon2	equ	0xFF1
  7687                           postinc0	equ	0xFEE
  7688                           wreg	equ	0xFE8
  7689                           indf2	equ	0xFDF
  7690                           fsr2h	equ	0xFDA
  7691                           fsr2l	equ	0xFD9
  7692                           status	equ	0xFD8
  7693                           
  7694 ;; *************** function _DelayS *****************
  7695 ;; Defined at:
  7696 ;;		line 60 in file "../digital.h"
  7697 ;; Parameters:    Size  Location     Type
  7698 ;;  sec             1    wreg     unsigned char 
  7699 ;; Auto vars:     Size  Location     Type
  7700 ;;  sec             1    6[COMRAM] unsigned char 
  7701 ;; Return value:  Size  Location     Type
  7702 ;;                  1    wreg      void 
  7703 ;; Registers used:
  7704 ;;		wreg, status,2, status,0, prodl, prodh
  7705 ;; Tracked objects:
  7706 ;;		On entry : 0/0
  7707 ;;		On exit  : 0/0
  7708 ;;		Unchanged: 0/0
  7709 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7710 ;;      Params:         0       0       0       0       0       0       0
  7711 ;;      Locals:         1       0       0       0       0       0       0
  7712 ;;      Temps:          2       0       0       0       0       0       0
  7713 ;;      Totals:         3       0       0       0       0       0       0
  7714 ;;Total ram usage:        3 bytes
  7715 ;; Hardware stack levels used:    1
  7716 ;; Hardware stack levels required when called:    3
  7717 ;; This function calls:
  7718 ;;		Nothing
  7719 ;; This function is called by:
  7720 ;;		_main
  7721 ;; This function uses a non-reentrant model
  7722 ;;
  7723                           
  7724                           	psect	text45
  7725  001FE4                     __ptext45:
  7726                           	opt stack 0
  7727  001FE4                     _DelayS:
  7728                           	opt stack 0
  7729  001FE4  FFFF               	dw	65535	; assembler added errata NOP
  7730                           
  7731                           ;incstack = 0
  7732                           ;DelayS@sec stored from wreg
  7733  001FE6  6E07               	movwf	DelayS@sec,c
  7734                           
  7735                           ;digital.h: 62: sec *= 10;
  7736  001FE8  0E0A               	movlw	10
  7737  001FEA  0207               	mulwf	DelayS@sec,c
  7738  001FEC  50F3               	movf	prodl,w,c
  7739  001FEE  6E07               	movwf	DelayS@sec,c
  7740                           
  7741                           ;digital.h: 63: while(sec--)
  7742  001FF0  D00E               	goto	l3508
  7743  001FF2                     l328:
  7744  001FF2  0004               	clrwdt		;# 
  7745                           
  7746                           ;digital.h: 66: _delay((unsigned long)((100)*(40000000/4000.0)));
  7747  001FF4  0E04               	movlw	4
  7748  001FF6  6E06               	movwf	(??_DelayS+1)& (0+255),c
  7749  001FF8  0ECF               	movlw	207
  7750  001FFA  6E05               	movwf	??_DelayS& (0+255),c
  7751  001FFC  0EA5               	movlw	165
  7752  001FFE                     u5217:
  7753  001FFE  FFFF               	dw	65535	; errata NOP
  7754  002000  2EE8               	decfsz	wreg,f,c
  7755  002002  D7FD               	bra	u5217
  7756  002004  2E05               	decfsz	??_DelayS& (0+255),f,c
  7757  002006  D7FB               	bra	u5217
  7758  002008  2E06               	decfsz	(??_DelayS+1)& (0+255),f,c
  7759  00200A  D7F9               	bra	u5217
  7760  00200C  D000               	nop2	
  7761  00200E                     l3508:
  7762  00200E  FFFF               	dw	65535	; assembler added errata NOP
  7763  002010  0607               	decf	DelayS@sec,f,c
  7764  002012  2807               	incf	DelayS@sec,w,c
  7765  002014  E1EE               	bnz	l328
  7766  002016  0012               	return		;funcret
  7767  002018  FFFF               	dw	65535	; errata NOP
  7768  00201A                     __end_of_DelayS:
  7769                           	opt stack 0
  7770                           stkptr	equ	0xFFC
  7771                           tblptru	equ	0xFF8
  7772                           tblptrh	equ	0xFF7
  7773                           tblptrl	equ	0xFF6
  7774                           tablat	equ	0xFF5
  7775                           prodh	equ	0xFF4
  7776                           prodl	equ	0xFF3
  7777                           intcon	equ	0xFF2
  7778                           intcon2	equ	0xFF1
  7779                           postinc0	equ	0xFEE
  7780                           wreg	equ	0xFE8
  7781                           indf2	equ	0xFDF
  7782                           fsr2h	equ	0xFDA
  7783                           fsr2l	equ	0xFD9
  7784                           status	equ	0xFD8
  7785                           
  7786 ;; *************** function _ADCmeasure *****************
  7787 ;; Defined at:
  7788 ;;		line 14 in file "../adc.h"
  7789 ;; Parameters:    Size  Location     Type
  7790 ;;		None
  7791 ;; Auto vars:     Size  Location     Type
  7792 ;;		None
  7793 ;; Return value:  Size  Location     Type
  7794 ;;                  1    wreg      void 
  7795 ;; Registers used:
  7796 ;;		wreg, status,2, status,0, cstack
  7797 ;; Tracked objects:
  7798 ;;		On entry : 0/0
  7799 ;;		On exit  : 3F/0
  7800 ;;		Unchanged: 0/0
  7801 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7802 ;;      Params:         0       0       0       0       0       0       0
  7803 ;;      Locals:         0       0       0       0       0       0       0
  7804 ;;      Temps:          0       0       0       0       0       0       0
  7805 ;;      Totals:         0       0       0       0       0       0       0
  7806 ;;Total ram usage:        0 bytes
  7807 ;; Hardware stack levels used:    1
  7808 ;; Hardware stack levels required when called:    4
  7809 ;; This function calls:
  7810 ;;		_ADC
  7811 ;; This function is called by:
  7812 ;;		_main
  7813 ;; This function uses a non-reentrant model
  7814 ;;
  7815                           
  7816                           	psect	text46
  7817  0019BE                     __ptext46:
  7818                           	opt stack 0
  7819  0019BE                     _ADCmeasure:
  7820                           	opt stack 0
  7821  0019BE  FFFF               	dw	65535	; assembler added errata NOP
  7822                           
  7823                           ;adc.h: 17: frwd = ADC(1);
  7824                           
  7825                           ;incstack = 0
  7826  0019C0  0E01               	movlw	1
  7827  0019C2  EC25  F010         	call	_ADC
  7828  0019C6  C005  F050         	movff	?_ADC,_frwd	;volatile
  7829  0019CA  C006  F051         	movff	?_ADC+1,_frwd+1	;volatile
  7830                           
  7831                           ;adc.h: 18: refl = ADC(0);
  7832  0019CE  0E00               	movlw	0
  7833  0019D0  EC25  F010         	call	_ADC
  7834  0019D4  C005  F04E         	movff	?_ADC,_refl	;volatile
  7835  0019D8  C006  F04F         	movff	?_ADC+1,_refl+1	;volatile
  7836                           
  7837                           ;adc.h: 19: curr = ADC(4);
  7838  0019DC  0E04               	movlw	4
  7839  0019DE  EC25  F010         	call	_ADC
  7840  0019E2  C005  F04C         	movff	?_ADC,_curr	;volatile
  7841  0019E6  C006  F04D         	movff	?_ADC+1,_curr+1	;volatile
  7842                           
  7843                           ;adc.h: 20: volt = ADC(5);
  7844  0019EA  0E05               	movlw	5
  7845  0019EC  EC25  F010         	call	_ADC
  7846  0019F0  C005  F082         	movff	?_ADC,_volt	;volatile
  7847  0019F4  C006  F083         	movff	?_ADC+1,_volt+1	;volatile
  7848                           
  7849                           ;adc.h: 22: if (frwd < 10) frwd = 0;
  7850  0019F8  5051               	movf	_frwd+1,w,c	;volatile
  7851  0019FA  E105               	bnz	l3584
  7852  0019FC  0E0A               	movlw	10
  7853  0019FE  5C50               	subwf	_frwd,w,c	;volatile
  7854  001A00  E202               	bc	l3584
  7855  001A02  6A50               	clrf	_frwd,c	;volatile
  7856  001A04  6A51               	clrf	_frwd+1,c	;volatile
  7857  001A06                     l3584:
  7858                           
  7859                           ;adc.h: 23: if (refl < 10) refl = 0;
  7860  001A06  504F               	movf	_refl+1,w,c	;volatile
  7861  001A08  E105               	bnz	l3588
  7862  001A0A  0E0A               	movlw	10
  7863  001A0C  5C4E               	subwf	_refl,w,c	;volatile
  7864  001A0E  E202               	bc	l3588
  7865  001A10  6A4E               	clrf	_refl,c	;volatile
  7866  001A12  6A4F               	clrf	_refl+1,c	;volatile
  7867  001A14                     l3588:
  7868                           
  7869                           ;adc.h: 24: if (curr < 10) curr = 0;
  7870  001A14  504D               	movf	_curr+1,w,c	;volatile
  7871  001A16  E105               	bnz	l3592
  7872  001A18  0E0A               	movlw	10
  7873  001A1A  5C4C               	subwf	_curr,w,c	;volatile
  7874  001A1C  E202               	bc	l3592
  7875  001A1E  6A4C               	clrf	_curr,c	;volatile
  7876  001A20  6A4D               	clrf	_curr+1,c	;volatile
  7877  001A22                     l3592:
  7878                           
  7879                           ;adc.h: 25: if (volt < 10) volt = 0;
  7880  001A22  0100               	movlb	0	; () banked
  7881  001A24  5183               	movf	(_volt+1)& (0+255),w,b	;volatile
  7882  001A26  E105               	bnz	l3596
  7883  001A28  0E0A               	movlw	10
  7884  001A2A  5D82               	subwf	_volt& (0+255),w,b	;volatile
  7885  001A2C  E202               	bc	l3596
  7886                           
  7887                           ; BSR set to: 0
  7888  001A2E  6B82               	clrf	_volt& (0+255),b	;volatile
  7889  001A30  6B83               	clrf	(_volt+1)& (0+255),b	;volatile
  7890  001A32                     l3596:
  7891                           
  7892                           ; BSR set to: 0
  7893                           ;adc.h: 27: if (frwd > fpeak) fpeak = frwd;
  7894  001A32  5050               	movf	_frwd,w,c	;volatile
  7895  001A34  5C46               	subwf	_fpeak,w,c	;volatile
  7896  001A36  5051               	movf	_frwd+1,w,c	;volatile
  7897  001A38  5847               	subwfb	_fpeak+1,w,c	;volatile
  7898  001A3A  E204               	bc	l3600
  7899                           
  7900                           ; BSR set to: 0
  7901  001A3C  C050  F046         	movff	_frwd,_fpeak	;volatile
  7902  001A40  C051  F047         	movff	_frwd+1,_fpeak+1	;volatile
  7903  001A44                     l3600:
  7904                           
  7905                           ; BSR set to: 0
  7906                           ;adc.h: 28: if (refl > rpeak) rpeak = refl;
  7907  001A44  504E               	movf	_refl,w,c	;volatile
  7908  001A46  5D7A               	subwf	_rpeak& (0+255),w,b	;volatile
  7909  001A48  504F               	movf	_refl+1,w,c	;volatile
  7910  001A4A  597B               	subwfb	(_rpeak+1)& (0+255),w,b	;volatile
  7911  001A4C  E204               	bc	l3604
  7912                           
  7913                           ; BSR set to: 0
  7914  001A4E  C04E  F07A         	movff	_refl,_rpeak	;volatile
  7915  001A52  C04F  F07B         	movff	_refl+1,_rpeak+1	;volatile
  7916  001A56                     l3604:
  7917                           
  7918                           ; BSR set to: 0
  7919                           ;adc.h: 29: if (curr > cpeak) cpeak = curr;
  7920  001A56  504C               	movf	_curr,w,c	;volatile
  7921  001A58  5D78               	subwf	_cpeak& (0+255),w,b	;volatile
  7922  001A5A  504D               	movf	_curr+1,w,c	;volatile
  7923  001A5C  5979               	subwfb	(_cpeak+1)& (0+255),w,b	;volatile
  7924  001A5E  E204               	bc	l435
  7925                           
  7926                           ; BSR set to: 0
  7927  001A60  C04C  F078         	movff	_curr,_cpeak	;volatile
  7928  001A64  C04D  F079         	movff	_curr+1,_cpeak+1	;volatile
  7929  001A68                     l435:
  7930                           
  7931                           ; BSR set to: 0
  7932  001A68  0012               	return		;funcret
  7933  001A6A  FFFF               	dw	65535	; errata NOP
  7934  001A6C                     __end_of_ADCmeasure:
  7935                           	opt stack 0
  7936                           stkptr	equ	0xFFC
  7937                           tblptru	equ	0xFF8
  7938                           tblptrh	equ	0xFF7
  7939                           tblptrl	equ	0xFF6
  7940                           tablat	equ	0xFF5
  7941                           prodh	equ	0xFF4
  7942                           prodl	equ	0xFF3
  7943                           intcon	equ	0xFF2
  7944                           intcon2	equ	0xFF1
  7945                           postinc0	equ	0xFEE
  7946                           wreg	equ	0xFE8
  7947                           indf2	equ	0xFDF
  7948                           fsr2h	equ	0xFDA
  7949                           fsr2l	equ	0xFD9
  7950                           status	equ	0xFD8
  7951                           
  7952 ;; *************** function _ADC *****************
  7953 ;; Defined at:
  7954 ;;		line 3 in file "../adc.h"
  7955 ;; Parameters:    Size  Location     Type
  7956 ;;  ch              1    wreg     unsigned char 
  7957 ;; Auto vars:     Size  Location     Type
  7958 ;;  ch              1    8[COMRAM] unsigned char 
  7959 ;; Return value:  Size  Location     Type
  7960 ;;                  2    4[COMRAM] unsigned int 
  7961 ;; Registers used:
  7962 ;;		wreg, status,2, status,0
  7963 ;; Tracked objects:
  7964 ;;		On entry : 0/0
  7965 ;;		On exit  : 0/0
  7966 ;;		Unchanged: 0/0
  7967 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7968 ;;      Params:         2       0       0       0       0       0       0
  7969 ;;      Locals:         1       0       0       0       0       0       0
  7970 ;;      Temps:          2       0       0       0       0       0       0
  7971 ;;      Totals:         5       0       0       0       0       0       0
  7972 ;;Total ram usage:        5 bytes
  7973 ;; Hardware stack levels used:    1
  7974 ;; Hardware stack levels required when called:    3
  7975 ;; This function calls:
  7976 ;;		Nothing
  7977 ;; This function is called by:
  7978 ;;		_ADCmeasure
  7979 ;;		_SlowControl
  7980 ;; This function uses a non-reentrant model
  7981 ;;
  7982                           
  7983                           	psect	text47
  7984  00204A                     __ptext47:
  7985                           	opt stack 0
  7986  00204A                     _ADC:
  7987                           	opt stack 0
  7988  00204A  FFFF               	dw	65535	; assembler added errata NOP
  7989                           
  7990                           ; BSR set to: 0
  7991                           ;incstack = 0
  7992                           ;ADC@ch stored from wreg
  7993  00204C  6E09               	movwf	ADC@ch,c
  7994                           
  7995                           ;adc.h: 5: ADCON0 = 0b10000001 | (ch << 3);
  7996  00204E  3809               	swapf	ADC@ch,w,c
  7997  002050  42E8               	rrncf	wreg,f,c
  7998  002052  0BF8               	andlw	248
  7999  002054  0981               	iorlw	129
  8000  002056  6EC2               	movwf	4034,c	;volatile
  8001                           
  8002                           ;adc.h: 7: _delay((unsigned long)((7)*(40000000/4000000.0)));
  8003  002058  0E11               	movlw	17
  8004  00205A                     u5227:
  8005  00205A  FFFF               	dw	65535	; errata NOP
  8006  00205C  2EE8               	decfsz	wreg,f,c
  8007  00205E  D7FD               	bra	u5227
  8008  002060  D000               	nop2	
  8009                           
  8010                           ;adc.h: 8: ADCON0bits.GODONE = 1;
  8011  002062  84C2               	bsf	4034,2,c	;volatile
  8012  002064                     l422:
  8013  002064  FFFF               	dw	65535	; assembler added errata NOP
  8014  002066  B4C2               	btfsc	4034,2,c	;volatile
  8015  002068  D7FD               	goto	l422
  8016                           
  8017                           ;adc.h: 11: return (((unsigned int)ADRESH) << 8) | ((unsigned int)ADRESL);
  8018  00206A  50C4               	movf	4036,w,c	;volatile
  8019  00206C  6E07               	movwf	??_ADC& (0+255),c
  8020  00206E  50C3               	movf	4035,w,c	;volatile
  8021  002070  6E05               	movwf	?_ADC,c
  8022  002072  C007  F006         	movff	??_ADC,?_ADC+1
  8023  002076  0012               	return		;funcret
  8024  002078  FFFF               	dw	65535	; errata NOP
  8025  00207A                     __end_of_ADC:
  8026                           	opt stack 0
  8027                           stkptr	equ	0xFFC
  8028                           tblptru	equ	0xFF8
  8029                           tblptrh	equ	0xFF7
  8030                           tblptrl	equ	0xFF6
  8031                           tablat	equ	0xFF5
  8032                           prodh	equ	0xFF4
  8033                           prodl	equ	0xFF3
  8034                           intcon	equ	0xFF2
  8035                           intcon2	equ	0xFF1
  8036                           postinc0	equ	0xFEE
  8037                           wreg	equ	0xFE8
  8038                           indf2	equ	0xFDF
  8039                           fsr2h	equ	0xFDA
  8040                           fsr2l	equ	0xFD9
  8041                           status	equ	0xFD8
  8042                           
  8043 ;; *************** function _isr *****************
  8044 ;; Defined at:
  8045 ;;		line 45 in file "../usart.h"
  8046 ;; Parameters:    Size  Location     Type
  8047 ;;		None
  8048 ;; Auto vars:     Size  Location     Type
  8049 ;;  rx              1    3[COMRAM] unsigned char 
  8050 ;; Return value:  Size  Location     Type
  8051 ;;                  1    wreg      void 
  8052 ;; Registers used:
  8053 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  8054 ;; Tracked objects:
  8055 ;;		On entry : 0/0
  8056 ;;		On exit  : 0/0
  8057 ;;		Unchanged: 0/0
  8058 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8059 ;;      Params:         0       0       0       0       0       0       0
  8060 ;;      Locals:         1       0       0       0       0       0       0
  8061 ;;      Temps:          3       0       0       0       0       0       0
  8062 ;;      Totals:         4       0       0       0       0       0       0
  8063 ;;Total ram usage:        4 bytes
  8064 ;; Hardware stack levels used:    1
  8065 ;; Hardware stack levels required when called:    2
  8066 ;; This function calls:
  8067 ;;		_RXstartTIMER
  8068 ;;		_RecieveError
  8069 ;;		i2_RXrestart
  8070 ;;		i2_RXstopTIMER
  8071 ;; This function is called by:
  8072 ;;		Interrupt level 2
  8073 ;; This function uses a non-reentrant model
  8074 ;;
  8075                           
  8076                           	psect	intcode
  8077  000008                     __pintcode:
  8078                           	opt stack 0
  8079  000008                     _isr:
  8080                           	opt stack 0
  8081  000008  FFFF               	dw	65535	; assembler added errata NOP
  8082                           
  8083                           ;incstack = 0
  8084  00000A  8259               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  8085  00000C  CFD9 F002          	movff	fsr2l,??_isr+1
  8086  000010  CFDA F003          	movff	fsr2h,??_isr+2
  8087                           
  8088                           ;usart.h: 47: unsigned char rx;;usart.h: 49: if ((PIR1bits.RCIF) && (PIE1bits.RCIE))
  8089  000014  BA9E               	btfsc	3998,5,c	;volatile
  8090  000016  AA9D               	btfss	3997,5,c	;volatile
  8091  000018  D032               	goto	i2l3868
  8092                           
  8093                           ;usart.h: 50: {;usart.h: 51: RecieveError();
  8094  00001A  ECF4  F010         	call	_RecieveError	;wreg free
  8095                           
  8096                           ;usart.h: 52: rx = RCREG;
  8097  00001E  CFAE F004          	movff	4014,isr@rx	;volatile
  8098                           
  8099                           ;usart.h: 54: if (rxb == 0) RXstartTIMER();
  8100  000022  5053               	movf	_rxb,w,c	;volatile
  8101  000024  E102               	bnz	i2l3850
  8102  000026  EC6B  F011         	call	_RXstartTIMER	;wreg free
  8103  00002A                     i2l3850:
  8104                           
  8105                           ;usart.h: 56: buffRX[rxb] = rx;
  8106  00002A  5053               	movf	_rxb,w,c
  8107  00002C  0FCF               	addlw	low _buffRX
  8108  00002E  6ED9               	movwf	fsr2l,c
  8109  000030  6ADA               	clrf	fsr2h,c
  8110  000032  C004  FFDF         	movff	isr@rx,indf2
  8111                           
  8112                           ;usart.h: 58: if (rxb >= 2)
  8113  000036  0E01               	movlw	1
  8114  000038  6453               	cpfsgt	_rxb,c	;volatile
  8115  00003A  D01A               	goto	i2l3864
  8116                           
  8117                           ;usart.h: 59: {;usart.h: 60: if ((buffRX[rxb] == 0xEE) && (buffRX[rxb-1] == 0xEE) && (bu
      +                          ffRX[rxb-2] == 0xEE))
  8118  00003C  5053               	movf	_rxb,w,c
  8119  00003E  0FCF               	addlw	low _buffRX
  8120  000040  6ED9               	movwf	fsr2l,c
  8121  000042  6ADA               	clrf	fsr2h,c
  8122  000044  0EEE               	movlw	238
  8123  000046  18DE               	xorwf	postinc2,w,c
  8124  000048  E113               	bnz	i2l3864
  8125  00004A  5053               	movf	_rxb,w,c
  8126  00004C  0FCE               	addlw	low (_buffRX+255)
  8127  00004E  6ED9               	movwf	fsr2l,c
  8128  000050  6ADA               	clrf	fsr2h,c
  8129  000052  0EEE               	movlw	238
  8130  000054  18DE               	xorwf	postinc2,w,c
  8131  000056  E10C               	bnz	i2l3864
  8132  000058  5053               	movf	_rxb,w,c
  8133  00005A  0FCD               	addlw	low (_buffRX+254)
  8134  00005C  6ED9               	movwf	fsr2l,c
  8135  00005E  6ADA               	clrf	fsr2h,c
  8136  000060  0EEE               	movlw	238
  8137  000062  18DE               	xorwf	postinc2,w,c
  8138  000064  E105               	bnz	i2l3864
  8139                           
  8140                           ;usart.h: 61: {;usart.h: 62: RXstopTIMER();
  8141  000066  EC78  F011         	call	i2_RXstopTIMER	;wreg free
  8142                           
  8143                           ;usart.h: 63: rx_end = 1;
  8144  00006A  0E01               	movlw	1
  8145  00006C  0100               	movlb	0	; () banked
  8146  00006E  6F86               	movwf	_rx_end& (0+255),b	;volatile
  8147  000070                     i2l3864:
  8148  000070  FFFF               	dw	65535	; assembler added errata NOP
  8149                           
  8150                           ;usart.h: 64: };usart.h: 65: };usart.h: 66: if (++rxb >= 10) RXrestart();
  8151  000072  2A53               	incf	_rxb,f,c	;volatile
  8152  000074  0E09               	movlw	9
  8153  000076  6453               	cpfsgt	_rxb,c	;volatile
  8154  000078  D002               	goto	i2l3868
  8155  00007A  EC7E  F010         	call	i2_RXrestart	;wreg free
  8156  00007E                     i2l3868:
  8157  00007E  FFFF               	dw	65535	; assembler added errata NOP
  8158                           
  8159                           ;usart.h: 67: };usart.h: 69: if ((PIE1bits.TMR2IE) && (PIR1bits.TMR2IF))
  8160  000080  B29D               	btfsc	3997,1,c	;volatile
  8161  000082  A29E               	btfss	3998,1,c	;volatile
  8162  000084  D002               	goto	i2l3874
  8163                           
  8164                           ;usart.h: 70: {;usart.h: 71: RXrestart();
  8165  000086  EC7E  F010         	call	i2_RXrestart	;wreg free
  8166  00008A                     i2l3874:
  8167  00008A  FFFF               	dw	65535	; assembler added errata NOP
  8168                           
  8169                           ;usart.h: 72: };usart.h: 74: if ((PIR1bits.TXIF) && (PIE1bits.TXIE))
  8170  00008C  B89E               	btfsc	3998,4,c	;volatile
  8171  00008E  A89D               	btfss	3997,4,c	;volatile
  8172  000090  D00D               	goto	i2l299
  8173                           
  8174                           ;usart.h: 75: {;usart.h: 76: if (txb <= tx_len) TXREG = buffTX[txb++];
  8175  000092  0100               	movlb	0	; () banked
  8176  000094  5187               	movf	_txb& (0+255),w,b	;volatile
  8177  000096  5C52               	subwf	_tx_len,w,c	;volatile
  8178  000098  E308               	bnc	i2l297
  8179                           
  8180                           ; BSR set to: 0
  8181  00009A  5187               	movf	_txb& (0+255),w,b
  8182  00009C  0F8F               	addlw	low _buffTX
  8183  00009E  6ED9               	movwf	fsr2l,c
  8184  0000A0  6ADA               	clrf	fsr2h,c
  8185  0000A2  50DF               	movf	indf2,w,c
  8186  0000A4  6EAD               	movwf	4013,c	;volatile
  8187                           
  8188                           ; BSR set to: 0
  8189  0000A6  2B87               	incf	_txb& (0+255),f,b	;volatile
  8190  0000A8  D001               	goto	i2l299
  8191  0000AA                     i2l297:
  8192                           
  8193                           ; BSR set to: 0
  8194                           ;usart.h: 77: else PIE1bits.TXIE = 0;
  8195  0000AA  989D               	bcf	3997,4,c	;volatile
  8196  0000AC                     i2l299:
  8197  0000AC  FFFF               	dw	65535	; assembler added errata NOP
  8198  0000AE  C003  FFDA         	movff	??_isr+2,fsr2h
  8199  0000B2  C002  FFD9         	movff	??_isr+1,fsr2l
  8200  0000B6  9259               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  8201  0000B8  0011               	retfie		f
  8202  0000BA  FFFF               	dw	65535	; errata NOP
  8203  0000BC                     __end_of_isr:
  8204                           	opt stack 0
  8205                           stkptr	equ	0xFFC
  8206                           tblptru	equ	0xFF8
  8207                           tblptrh	equ	0xFF7
  8208                           tblptrl	equ	0xFF6
  8209                           tablat	equ	0xFF5
  8210                           prodh	equ	0xFF4
  8211                           prodl	equ	0xFF3
  8212                           intcon	equ	0xFF2
  8213                           intcon2	equ	0xFF1
  8214                           postinc0	equ	0xFEE
  8215                           wreg	equ	0xFE8
  8216                           indf2	equ	0xFDF
  8217                           postinc2	equ	0xFDE
  8218                           fsr2h	equ	0xFDA
  8219                           fsr2l	equ	0xFD9
  8220                           status	equ	0xFD8
  8221                           
  8222 ;; *************** function i2_RXrestart *****************
  8223 ;; Defined at:
  8224 ;;		line 17 in file "../usart.h"
  8225 ;; Parameters:    Size  Location     Type
  8226 ;;		None
  8227 ;; Auto vars:     Size  Location     Type
  8228 ;;		None
  8229 ;; Return value:  Size  Location     Type
  8230 ;;                  1    wreg      void 
  8231 ;; Registers used:
  8232 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  8233 ;; Tracked objects:
  8234 ;;		On entry : 0/0
  8235 ;;		On exit  : 3F/0
  8236 ;;		Unchanged: 0/0
  8237 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8238 ;;      Params:         0       0       0       0       0       0       0
  8239 ;;      Locals:         0       0       0       0       0       0       0
  8240 ;;      Temps:          0       0       0       0       0       0       0
  8241 ;;      Totals:         0       0       0       0       0       0       0
  8242 ;;Total ram usage:        0 bytes
  8243 ;; Hardware stack levels used:    1
  8244 ;; Hardware stack levels required when called:    1
  8245 ;; This function calls:
  8246 ;;		i2_RXstopTIMER
  8247 ;; This function is called by:
  8248 ;;		_isr
  8249 ;; This function uses a non-reentrant model
  8250 ;;
  8251                           
  8252                           	psect	text49
  8253  0020FC                     __ptext49:
  8254                           	opt stack 0
  8255  0020FC                     i2_RXrestart:
  8256                           	opt stack 0
  8257  0020FC  FFFF               	dw	65535	; assembler added errata NOP
  8258                           
  8259                           ;usart.h: 19: RXstopTIMER();
  8260                           
  8261                           ;incstack = 0
  8262  0020FE  EC78  F011         	call	i2_RXstopTIMER	;wreg free
  8263                           
  8264                           ;usart.h: 20: for (rxb = 0; rxb < (10-1); rxb++) buffRX[rxb] = 0x00;
  8265  002102  6A53               	clrf	_rxb,c	;volatile
  8266  002104  D007               	goto	i2l3836
  8267  002106                     i2l3832:
  8268  002106  FFFF               	dw	65535	; assembler added errata NOP
  8269  002108  5053               	movf	_rxb,w,c
  8270  00210A  0FCF               	addlw	low _buffRX
  8271  00210C  6ED9               	movwf	fsr2l,c
  8272  00210E  6ADA               	clrf	fsr2h,c
  8273  002110  6ADF               	clrf	indf2,c
  8274  002112  2A53               	incf	_rxb,f,c	;volatile
  8275  002114                     i2l3836:
  8276  002114  FFFF               	dw	65535	; assembler added errata NOP
  8277  002116  0E08               	movlw	8
  8278  002118  6453               	cpfsgt	_rxb,c	;volatile
  8279  00211A  D7F5               	goto	i2l3832
  8280                           
  8281                           ;usart.h: 21: rx_end = 0; rxb = 0;
  8282  00211C  0100               	movlb	0	; () banked
  8283  00211E  6B86               	clrf	_rx_end& (0+255),b	;volatile
  8284  002120  6A53               	clrf	_rxb,c	;volatile
  8285                           
  8286                           ; BSR set to: 0
  8287  002122  0012               	return		;funcret
  8288  002124  FFFF               	dw	65535	; errata NOP
  8289  002126                     __end_ofi2_RXrestart:
  8290                           	opt stack 0
  8291                           stkptr	equ	0xFFC
  8292                           tblptru	equ	0xFF8
  8293                           tblptrh	equ	0xFF7
  8294                           tblptrl	equ	0xFF6
  8295                           tablat	equ	0xFF5
  8296                           prodh	equ	0xFF4
  8297                           prodl	equ	0xFF3
  8298                           intcon	equ	0xFF2
  8299                           intcon2	equ	0xFF1
  8300                           postinc0	equ	0xFEE
  8301                           wreg	equ	0xFE8
  8302                           indf2	equ	0xFDF
  8303                           postinc2	equ	0xFDE
  8304                           fsr2h	equ	0xFDA
  8305                           fsr2l	equ	0xFD9
  8306                           status	equ	0xFD8
  8307                           
  8308 ;; *************** function i2_RXstopTIMER *****************
  8309 ;; Defined at:
  8310 ;;		line 10 in file "../usart.h"
  8311 ;; Parameters:    Size  Location     Type
  8312 ;;		None
  8313 ;; Auto vars:     Size  Location     Type
  8314 ;;		None
  8315 ;; Return value:  Size  Location     Type
  8316 ;;                  1    wreg      void 
  8317 ;; Registers used:
  8318 ;;		None
  8319 ;; Tracked objects:
  8320 ;;		On entry : 0/0
  8321 ;;		On exit  : 0/0
  8322 ;;		Unchanged: 0/0
  8323 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8324 ;;      Params:         0       0       0       0       0       0       0
  8325 ;;      Locals:         0       0       0       0       0       0       0
  8326 ;;      Temps:          0       0       0       0       0       0       0
  8327 ;;      Totals:         0       0       0       0       0       0       0
  8328 ;;Total ram usage:        0 bytes
  8329 ;; Hardware stack levels used:    1
  8330 ;; This function calls:
  8331 ;;		Nothing
  8332 ;; This function is called by:
  8333 ;;		_isr
  8334 ;;		i2_RXrestart
  8335 ;; This function uses a non-reentrant model
  8336 ;;
  8337                           
  8338                           	psect	text50
  8339  0022F0                     __ptext50:
  8340                           	opt stack 0
  8341  0022F0                     i2_RXstopTIMER:
  8342                           	opt stack 0
  8343  0022F0  FFFF               	dw	65535	; assembler added errata NOP
  8344                           
  8345                           ;usart.h: 12: T2CON = 0;
  8346                           
  8347                           ; BSR set to: 0
  8348                           ;incstack = 0
  8349  0022F2  6ACA               	clrf	4042,c	;volatile
  8350                           
  8351                           ;usart.h: 13: PIE1bits.TMR2IE = 0;
  8352  0022F4  929D               	bcf	3997,1,c	;volatile
  8353  0022F6  0012               	return		;funcret
  8354  0022F8  FFFF               	dw	65535	; errata NOP
  8355  0022FA                     __end_ofi2_RXstopTIMER:
  8356                           	opt stack 0
  8357                           stkptr	equ	0xFFC
  8358                           tblptru	equ	0xFF8
  8359                           tblptrh	equ	0xFF7
  8360                           tblptrl	equ	0xFF6
  8361                           tablat	equ	0xFF5
  8362                           prodh	equ	0xFF4
  8363                           prodl	equ	0xFF3
  8364                           intcon	equ	0xFF2
  8365                           intcon2	equ	0xFF1
  8366                           postinc0	equ	0xFEE
  8367                           wreg	equ	0xFE8
  8368                           indf2	equ	0xFDF
  8369                           postinc2	equ	0xFDE
  8370                           fsr2h	equ	0xFDA
  8371                           fsr2l	equ	0xFD9
  8372                           status	equ	0xFD8
  8373                           
  8374 ;; *************** function _RecieveError *****************
  8375 ;; Defined at:
  8376 ;;		line 25 in file "../usart.h"
  8377 ;; Parameters:    Size  Location     Type
  8378 ;;		None
  8379 ;; Auto vars:     Size  Location     Type
  8380 ;;		None
  8381 ;; Return value:  Size  Location     Type
  8382 ;;                  1    wreg      void 
  8383 ;; Registers used:
  8384 ;;		None
  8385 ;; Tracked objects:
  8386 ;;		On entry : 0/0
  8387 ;;		On exit  : 0/0
  8388 ;;		Unchanged: 0/0
  8389 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8390 ;;      Params:         0       0       0       0       0       0       0
  8391 ;;      Locals:         0       0       0       0       0       0       0
  8392 ;;      Temps:          0       0       0       0       0       0       0
  8393 ;;      Totals:         0       0       0       0       0       0       0
  8394 ;;Total ram usage:        0 bytes
  8395 ;; Hardware stack levels used:    1
  8396 ;; This function calls:
  8397 ;;		Nothing
  8398 ;; This function is called by:
  8399 ;;		_isr
  8400 ;; This function uses a non-reentrant model
  8401 ;;
  8402                           
  8403                           	psect	text51
  8404  0021E8                     __ptext51:
  8405                           	opt stack 0
  8406  0021E8                     _RecieveError:
  8407                           	opt stack 0
  8408  0021E8  FFFF               	dw	65535	; assembler added errata NOP
  8409                           
  8410                           ;usart.h: 28: if (RCSTAbits.OERR)
  8411                           
  8412                           ;incstack = 0
  8413  0021EA  A2AB               	btfss	4011,1,c	;volatile
  8414  0021EC  D002               	goto	i2l283
  8415                           
  8416                           ;usart.h: 29: {;usart.h: 30: RCSTAbits.CREN = 0;
  8417  0021EE  98AB               	bcf	4011,4,c	;volatile
  8418                           
  8419                           ;usart.h: 31: RCSTAbits.CREN = 1;
  8420  0021F0  88AB               	bsf	4011,4,c	;volatile
  8421  0021F2                     i2l283:
  8422  0021F2  FFFF               	dw	65535	; assembler added errata NOP
  8423                           
  8424                           ;usart.h: 32: };usart.h: 34: if (RCSTAbits.FERR)
  8425  0021F4  A4AB               	btfss	4011,2,c	;volatile
  8426  0021F6  D006               	goto	i2l285
  8427                           
  8428                           ;usart.h: 35: {;usart.h: 36: RCREG = RCREG;
  8429  0021F8  CFAE FFAE          	movff	4014,4014	;volatile
  8430                           
  8431                           ;usart.h: 37: RCREG = RCREG;
  8432  0021FC  CFAE FFAE          	movff	4014,4014	;volatile
  8433                           
  8434                           ;usart.h: 38: RCREG = RCREG;
  8435  002200  CFAE FFAE          	movff	4014,4014	;volatile
  8436  002204                     i2l285:
  8437  002204  FFFF               	dw	65535	; assembler added errata NOP
  8438  002206  0012               	return		;funcret
  8439  002208  FFFF               	dw	65535	; errata NOP
  8440  00220A                     __end_of_RecieveError:
  8441                           	opt stack 0
  8442                           stkptr	equ	0xFFC
  8443                           tblptru	equ	0xFF8
  8444                           tblptrh	equ	0xFF7
  8445                           tblptrl	equ	0xFF6
  8446                           tablat	equ	0xFF5
  8447                           prodh	equ	0xFF4
  8448                           prodl	equ	0xFF3
  8449                           intcon	equ	0xFF2
  8450                           intcon2	equ	0xFF1
  8451                           postinc0	equ	0xFEE
  8452                           wreg	equ	0xFE8
  8453                           indf2	equ	0xFDF
  8454                           postinc2	equ	0xFDE
  8455                           fsr2h	equ	0xFDA
  8456                           fsr2l	equ	0xFD9
  8457                           status	equ	0xFD8
  8458                           
  8459 ;; *************** function _RXstartTIMER *****************
  8460 ;; Defined at:
  8461 ;;		line 2 in file "../usart.h"
  8462 ;; Parameters:    Size  Location     Type
  8463 ;;		None
  8464 ;; Auto vars:     Size  Location     Type
  8465 ;;		None
  8466 ;; Return value:  Size  Location     Type
  8467 ;;                  1    wreg      void 
  8468 ;; Registers used:
  8469 ;;		wreg, status,2
  8470 ;; Tracked objects:
  8471 ;;		On entry : 0/0
  8472 ;;		On exit  : 0/0
  8473 ;;		Unchanged: 0/0
  8474 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8475 ;;      Params:         0       0       0       0       0       0       0
  8476 ;;      Locals:         0       0       0       0       0       0       0
  8477 ;;      Temps:          0       0       0       0       0       0       0
  8478 ;;      Totals:         0       0       0       0       0       0       0
  8479 ;;Total ram usage:        0 bytes
  8480 ;; Hardware stack levels used:    1
  8481 ;; This function calls:
  8482 ;;		Nothing
  8483 ;; This function is called by:
  8484 ;;		_isr
  8485 ;; This function uses a non-reentrant model
  8486 ;;
  8487                           
  8488                           	psect	text52
  8489  0022D6                     __ptext52:
  8490                           	opt stack 0
  8491  0022D6                     _RXstartTIMER:
  8492                           	opt stack 0
  8493  0022D6  FFFF               	dw	65535	; assembler added errata NOP
  8494                           
  8495                           ;usart.h: 4: TMR2 = 0;
  8496                           
  8497                           ;incstack = 0
  8498  0022D8  6ACC               	clrf	4044,c	;volatile
  8499                           
  8500                           ;usart.h: 5: T2CON = 0b01111111;
  8501  0022DA  0E7F               	movlw	127
  8502  0022DC  6ECA               	movwf	4042,c	;volatile
  8503                           
  8504                           ;usart.h: 6: PIR1bits.TMR2IF = 0;
  8505  0022DE  929E               	bcf	3998,1,c	;volatile
  8506                           
  8507                           ;usart.h: 7: PIE1bits.TMR2IE = 1;
  8508  0022E0  829D               	bsf	3997,1,c	;volatile
  8509  0022E2  0C7F               	retlw	127	;funcret
  8510  0022E4  FFFF               	dw	65535	; errata NOP
  8511  0022E6                     __end_of_RXstartTIMER:
  8512                           	opt stack 0
  8513                           stkptr	equ	0xFFC
  8514                           tblptru	equ	0xFF8
  8515                           tblptrh	equ	0xFF7
  8516                           tblptrl	equ	0xFF6
  8517                           tablat	equ	0xFF5
  8518                           prodh	equ	0xFF4
  8519                           prodl	equ	0xFF3
  8520                           intcon	equ	0xFF2
  8521                           intcon2	equ	0xFF1
  8522                           postinc0	equ	0xFEE
  8523                           wreg	equ	0xFE8
  8524                           indf2	equ	0xFDF
  8525                           postinc2	equ	0xFDE
  8526                           fsr2h	equ	0xFDA
  8527                           fsr2l	equ	0xFD9
  8528                           status	equ	0xFD8
  8529                           stkptr	equ	0xFFC
  8530                           tblptru	equ	0xFF8
  8531                           tblptrh	equ	0xFF7
  8532                           tblptrl	equ	0xFF6
  8533                           tablat	equ	0xFF5
  8534                           prodh	equ	0xFF4
  8535                           prodl	equ	0xFF3
  8536                           intcon	equ	0xFF2
  8537                           intcon2	equ	0xFF1
  8538                           postinc0	equ	0xFEE
  8539                           wreg	equ	0xFE8
  8540                           indf2	equ	0xFDF
  8541                           postinc2	equ	0xFDE
  8542                           fsr2h	equ	0xFDA
  8543                           fsr2l	equ	0xFD9
  8544                           status	equ	0xFD8
  8545                           
  8546                           	psect	rparam
  8547  0000                     stkptr	equ	0xFFC
  8548                           tblptru	equ	0xFF8
  8549                           tblptrh	equ	0xFF7
  8550                           tblptrl	equ	0xFF6
  8551                           tablat	equ	0xFF5
  8552                           prodh	equ	0xFF4
  8553                           prodl	equ	0xFF3
  8554                           intcon	equ	0xFF2
  8555                           intcon2	equ	0xFF1
  8556                           postinc0	equ	0xFEE
  8557                           wreg	equ	0xFE8
  8558                           indf2	equ	0xFDF
  8559                           postinc2	equ	0xFDE
  8560                           fsr2h	equ	0xFDA
  8561                           fsr2l	equ	0xFD9
  8562                           status	equ	0xFD8
  8563                           
  8564                           	psect	temp
  8565  000059                     btemp:
  8566                           	opt stack 0
  8567  000059                     	ds	1
  8568  0000                     int$flags	set	btemp
  8569  0000                     wtemp8	set	btemp+1
  8570  0000                     ttemp5	set	btemp+1
  8571  0000                     ttemp6	set	btemp+4
  8572  0000                     ttemp7	set	btemp+8
  8573                           stkptr	equ	0xFFC
  8574                           tblptru	equ	0xFF8
  8575                           tblptrh	equ	0xFF7
  8576                           tblptrl	equ	0xFF6
  8577                           tablat	equ	0xFF5
  8578                           prodh	equ	0xFF4
  8579                           prodl	equ	0xFF3
  8580                           intcon	equ	0xFF2
  8581                           intcon2	equ	0xFF1
  8582                           postinc0	equ	0xFEE
  8583                           wreg	equ	0xFE8
  8584                           indf2	equ	0xFDF
  8585                           postinc2	equ	0xFDE
  8586                           fsr2h	equ	0xFDA
  8587                           fsr2l	equ	0xFD9
  8588                           status	equ	0xFD8


Data Sizes:
    Strings     133
    Constant    0
    Data        1
    BSS         138
    Persistent  30
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     69      88
    BANK0           160      6     156
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0

Pointer List with Targets:

    CreateBuffTX@str	PTR const unsigned char  size(1) Largest target is 10
		 -> STR_26(CODE[8]), STR_25(CODE[10]), STR_24(CODE[10]), STR_23(CODE[10]), 
		 -> STR_22(CODE[4]), STR_21(CODE[4]), STR_20(CODE[4]), STR_19(CODE[5]), 
		 -> STR_18(CODE[4]), STR_17(CODE[4]), STR_16(CODE[5]), STR_15(CODE[5]), 
		 -> STR_14(CODE[4]), STR_13(CODE[4]), STR_12(CODE[4]), STR_11(CODE[4]), 
		 -> STR_10(CODE[4]), STR_9(CODE[4]), STR_8(CODE[5]), STR_7(CODE[5]), 
		 -> STR_6(CODE[5]), STR_5(CODE[5]), STR_4(CODE[4]), STR_3(CODE[4]), 
		 -> STR_2(CODE[4]), STR_1(CODE[4]), 

    ConvertNumber@conv	PTR unsigned char  size(1) Largest target is 64
		 -> buffTX(BANK0[64]), 

    writeEEPROM16@data	PTR unsigned char  size(1) Largest target is 10
		 -> buffRX(BANK0[10]), 


Critical Paths under _main in COMRAM

    _main->_EEsetupRead
    _SlowControl->_ADC
    _SendStatusToLCD->_CreateBuffTX
    _ReadStatusFromLCD->_EEsetupRead
    _SetupMode->_LCDpageSelect
    _writeEEPROM16->_writeEEPROM
    _LCDpageSelect->_CreateBuffTX
    _EEsetupRead->___fttol
    _sqrt->___ftsub
    ___ftsub->___ftadd
    ___ftadd->___ftpack
    ___ftmul->___ftpack
    _readEEPROM16->_readEEPROM
    ___lltoft->___ftpack
    ___fttol->_sqrt
    _EEmbandRead->_readEEPROM
    _Beep->_DelayMs
    _PTT_ON->_FreqMeasure
    _FreqMeasure->___ftge
    _fabs->___lwtoft
    ___lwtoft->___ftpack
    ___ftge->_fabs
    _PTT_OFF->_DelayMs
    _LCDversionSend->_CreateBuffTX
    _SendUSART->_DelayMs
    _CreateBuffTX->___lwdiv
    _ADCmeasure->_ADC

Critical Paths under _isr in COMRAM

    None.

Critical Paths under _main in BANK0

    _main->_EEsetupRead
    _ReadStatusFromLCD->_EEsetupRead

Critical Paths under _isr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _isr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _isr in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _isr in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _isr in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _isr in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0   68266
                         _ADCmeasure
                               _Beep
                             _DelayS
                        _EEmbandRead
                        _EEsetupRead
                      _LCDpageSelect
                     _LCDversionSend
                       _ProtectCheck
                  _ReadStatusFromLCD
                    _SendStatusToLCD
                            _SetBand
                        _SlowControl
 ---------------------------------------------------------------------------------
 (1) _SlowControl                                          6     6      0      22
                                              9 COMRAM     6     6      0
                                _ADC
                         _FanControl
                     _PttHoldControl
 ---------------------------------------------------------------------------------
 (2) _PttHoldControl                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _FanControl                                           2     2      0       0
                                              4 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) _SendStatusToLCD                                     12    12      0    4593
                                             17 COMRAM    12    12      0
                       _CreateBuffTX
                          _Tramsmitt
 ---------------------------------------------------------------------------------
 (2) _Tramsmitt                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ReadStatusFromLCD                                    0     0      0   33486
                               _Beep
                        _EEmbandRead
                        _EEsetupRead
                      _LCDpageSelect
                            _PTT_OFF
                          _RXrestart
                            _SetBand
                          _SetupMode
                        _writeEEPROM
 ---------------------------------------------------------------------------------
 (2) _SetupMode                                           17    17      0   11849
                                             19 COMRAM    17    17      0
                       _CreateBuffTX
                      _LCDpageSelect
                          _RXrestart
                          _SendUSART
                          _SwitchOFF
                            ___lldiv
                            ___lwdiv
                        _writeEEPROM
                      _writeEEPROM16
 ---------------------------------------------------------------------------------
 (3) _writeEEPROM16                                        3     0      3     839
                                              7 COMRAM     3     0      3
                        _writeEEPROM
 ---------------------------------------------------------------------------------
 (2) _writeEEPROM                                          3     2      1     599
                                              4 COMRAM     3     2      1
 ---------------------------------------------------------------------------------
 (3) ___lwdiv                                              7     3      4     314
                                              4 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (3) ___lldiv                                             13     5      8     618
                                              4 COMRAM    13     5      8
 ---------------------------------------------------------------------------------
 (3) _LCDpageSelect                                        2     2      0    4750
                                             17 COMRAM     2     2      0
                       _CreateBuffTX
                          _SendUSART
                     _waitAckFromLCD
 ---------------------------------------------------------------------------------
 (4) _waitAckFromLCD                                       1     1      0      24
                                              4 COMRAM     1     1      0
                          _RXrestart
 ---------------------------------------------------------------------------------
 (3) _RXrestart                                            0     0      0       0
                        _RXstopTIMER
 ---------------------------------------------------------------------------------
 (4) _RXstopTIMER                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _EEsetupRead                                         14    14      0   16213
                                             61 COMRAM     8     8      0
                                              0 BANK0      6     6      0
                            ___fttol
                           ___lltoft
                         _readEEPROM
                       _readEEPROM16
                               _sqrt
 ---------------------------------------------------------------------------------
 (3) _sqrt                                                19    16      3   11627
                                             30 COMRAM    16    13      3
                             ___ftge
                            ___ftmul
                            ___ftsub
                           ___lltoft (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftsub                                              6     0      6    5274
                                             24 COMRAM     6     0      6
                            ___ftadd
 ---------------------------------------------------------------------------------
 (5) ___ftadd                                             12     6      6    4858
                                             12 COMRAM    12     6      6
                           ___ftpack
 ---------------------------------------------------------------------------------
 (4) ___ftmul                                             15     9      6    4986
                                             12 COMRAM    14     8      6
                           ___ftpack
 ---------------------------------------------------------------------------------
 (3) _readEEPROM16                                         8     6      2     127
                                              5 COMRAM     8     6      2
                         _readEEPROM
 ---------------------------------------------------------------------------------
 (3) ___lltoft                                             9     5      4    3685
                                             12 COMRAM     9     5      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (3) ___fttol                                             15    11      4     641
                                             46 COMRAM    15    11      4
                           ___lltoft (ARG)
                               _sqrt (ARG)
 ---------------------------------------------------------------------------------
 (2) _EEmbandRead                                          0     0      0      31
                         _readEEPROM
 ---------------------------------------------------------------------------------
 (4) _readEEPROM                                           1     1      0      31
                                              4 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _Beep                                                 0     0      0      22
                            _DelayMs
 ---------------------------------------------------------------------------------
 (1) _ProtectCheck                                         0     0      0    4466
                           _PTT_read
                          _SwitchOFF
 ---------------------------------------------------------------------------------
 (3) _SwitchOFF                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PTT_read                                             0     0      0    4466
                            _PTT_OFF
                             _PTT_ON
 ---------------------------------------------------------------------------------
 (3) _PTT_ON                                               0     0      0    4444
                            _DelayMs
                        _FreqMeasure
 ---------------------------------------------------------------------------------
 (4) _FreqMeasure                                          4     4      0    4422
                                             27 COMRAM     4     4      0
                         _BandDecode
                             ___ftge
                           ___lwtoft
                               _fabs
 ---------------------------------------------------------------------------------
 (5) _fabs                                                 3     0      3     263
                                             15 COMRAM     3     0      3
                            ___ftneg
                           ___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (6) ___ftneg                                              3     0      3     121
                                              4 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (5) ___lwtoft                                             3     0      3    3434
                                             12 COMRAM     3     0      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (6) ___ftpack                                             8     3      5    3313
                                              4 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 (4) ___ftge                                               9     3      6     558
                                             18 COMRAM     9     3      6
                           ___lwtoft (ARG)
                               _fabs (ARG)
 ---------------------------------------------------------------------------------
 (5) _BandDecode                                           0     0      0       0
                            _SetBand
 ---------------------------------------------------------------------------------
 (1) _SetBand                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PTT_OFF                                              0     0      0      22
                            _DelayMs
 ---------------------------------------------------------------------------------
 (1) _LCDversionSend                                       1     1      0    4638
                                             17 COMRAM     1     1      0
                       _CreateBuffTX
                          _SendUSART
 ---------------------------------------------------------------------------------
 (3) _SendUSART                                            0     0      0      22
                            _DelayMs
 ---------------------------------------------------------------------------------
 (4) _DelayMs                                              2     2      0      22
                                              4 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (2) _CreateBuffTX                                         6     1      5    4593
                                             11 COMRAM     6     1      5
                      _ConvertNumber
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (3) _ConvertNumber                                        5     0      5     553
                                              4 COMRAM     5     0      5
 ---------------------------------------------------------------------------------
 (1) _DelayS                                               3     3      0      23
                                              4 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (1) _ADCmeasure                                           0     0      0      22
                                _ADC
 ---------------------------------------------------------------------------------
 (2) _ADC                                                  5     3      2      22
                                              4 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _isr                                                  4     4      0      23
                                              0 COMRAM     4     4      0
                       _RXstartTIMER
                       _RecieveError
                        i2_RXrestart
                      i2_RXstopTIMER
 ---------------------------------------------------------------------------------
 (8) i2_RXrestart                                          0     0      0       0
                      i2_RXstopTIMER
 ---------------------------------------------------------------------------------
 (8) i2_RXstopTIMER                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (8) _RecieveError                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (8) _RXstartTIMER                                         0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ADCmeasure
     _ADC
   _Beep
     _DelayMs
   _DelayS
   _EEmbandRead
     _readEEPROM
   _EEsetupRead
     ___fttol
       ___lltoft (ARG)
         ___ftpack
       _sqrt (ARG)
         ___ftge
           ___lwtoft (ARG)
             ___ftpack
           _fabs (ARG)
             ___ftneg
             ___lwtoft (ARG)
               ___ftpack
         ___ftmul
           ___ftpack
         ___ftsub
           ___ftadd
             ___ftpack
         ___lltoft (ARG)
           ___ftpack
     ___lltoft
       ___ftpack
     _readEEPROM
     _readEEPROM16
       _readEEPROM
     _sqrt
       ___ftge
         ___lwtoft (ARG)
           ___ftpack
         _fabs (ARG)
           ___ftneg
           ___lwtoft (ARG)
             ___ftpack
       ___ftmul
         ___ftpack
       ___ftsub
         ___ftadd
           ___ftpack
       ___lltoft (ARG)
         ___ftpack
   _LCDpageSelect
     _CreateBuffTX
       _ConvertNumber
       ___lwdiv (ARG)
     _SendUSART
       _DelayMs
     _waitAckFromLCD
       _RXrestart
         _RXstopTIMER
   _LCDversionSend
     _CreateBuffTX
       _ConvertNumber
       ___lwdiv (ARG)
     _SendUSART
       _DelayMs
   _ProtectCheck
     _PTT_read
       _PTT_OFF
         _DelayMs
       _PTT_ON
         _DelayMs
         _FreqMeasure
           _BandDecode
             _SetBand
           ___ftge
             ___lwtoft (ARG)
               ___ftpack
             _fabs (ARG)
               ___ftneg
               ___lwtoft (ARG)
                 ___ftpack
           ___lwtoft
             ___ftpack
           _fabs
             ___ftneg
             ___lwtoft (ARG)
               ___ftpack
     _SwitchOFF
   _ReadStatusFromLCD
     _Beep
       _DelayMs
     _EEmbandRead
       _readEEPROM
     _EEsetupRead
       ___fttol
         ___lltoft (ARG)
           ___ftpack
         _sqrt (ARG)
           ___ftge
             ___lwtoft (ARG)
               ___ftpack
             _fabs (ARG)
               ___ftneg
               ___lwtoft (ARG)
                 ___ftpack
           ___ftmul
             ___ftpack
           ___ftsub
             ___ftadd
               ___ftpack
           ___lltoft (ARG)
             ___ftpack
       ___lltoft
         ___ftpack
       _readEEPROM
       _readEEPROM16
         _readEEPROM
       _sqrt
         ___ftge
           ___lwtoft (ARG)
             ___ftpack
           _fabs (ARG)
             ___ftneg
             ___lwtoft (ARG)
               ___ftpack
         ___ftmul
           ___ftpack
         ___ftsub
           ___ftadd
             ___ftpack
         ___lltoft (ARG)
           ___ftpack
     _LCDpageSelect
       _CreateBuffTX
         _ConvertNumber
         ___lwdiv (ARG)
       _SendUSART
         _DelayMs
       _waitAckFromLCD
         _RXrestart
           _RXstopTIMER
     _PTT_OFF
       _DelayMs
     _RXrestart
       _RXstopTIMER
     _SetBand
     _SetupMode
       _CreateBuffTX
         _ConvertNumber
         ___lwdiv (ARG)
       _LCDpageSelect
         _CreateBuffTX
           _ConvertNumber
           ___lwdiv (ARG)
         _SendUSART
           _DelayMs
         _waitAckFromLCD
           _RXrestart
             _RXstopTIMER
       _RXrestart
         _RXstopTIMER
       _SendUSART
         _DelayMs
       _SwitchOFF
       ___lldiv
       ___lwdiv
       _writeEEPROM
       _writeEEPROM16
         _writeEEPROM
     _writeEEPROM
   _SendStatusToLCD
     _CreateBuffTX
       _ConvertNumber
       ___lwdiv (ARG)
     _Tramsmitt
   _SetBand
   _SlowControl
     _ADC
     _FanControl
     _PttHoldControl

 _isr (ROOT)
   _RXstartTIMER
   _RecieveError
   i2_RXrestart
     i2_RXstopTIMER
   i2_RXstopTIMER

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5FF      0       0      16        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       7        0.0%
BANK2              100      0       0       8        0.0%
BITBANK1           100      0       0       5        0.0%
BANK1              100      0       0       6        0.0%
BITBANK0            A0      0       0       3        0.0%
BANK0               A0      6      9C       4       97.5%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     45      58       1       93.6%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      F4       9        0.0%
DATA                 0      0      F4      17        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.00 build -1524193055 
Symbol Table                                                                                   Wed Jan 11 19:48:43 2023

                                                     _BandDecode 1D02  
                                                    __CFG_BOR$ON 000000  
                                                   __CFG_CP0$OFF 000000  
                                                   __CFG_CP1$OFF 000000  
                                                   __CFG_CP2$OFF 000000  
                                                   __CFG_CP3$OFF 000000  
                                                   ___ftadd@exp1 0018  
                                                   ___ftadd@exp2 0017  
                                                  ??_FreqMeasure 001C  
                                                   ___ftadd@sign 0016  
                                                    __CFG_WDT$ON 000000  
                                                            l313 19B0  
                                                            l314 1910  
                                                            l410 150E  
                                                            l323 19B8  
                                                            l403 148A  
                                                            l412 151A  
                                                            l340 2240  
                                                            l317 1926  
                                                            l422 2064  
                                                            l334 21C8  
                                                            l254 1FD4  
                                                            l415 14F2  
                                                            l255 1FD0  
                                                            _ADC 204A  
                                                            l328 1FF2  
                                                            l521 226E  
                                                            l353 22AC  
                                                            l505 184E  
                                                            l441 1694  
                                                            l522 226A  
                                                            l370 1F36  
                                                            l362 1F0A  
                                                            l602 1C06  
                                                            l435 1A68  
                                                            l347 20A4  
                                                            l364 1F18  
                                                            l540 1E32  
                                                            l380 1C8C  
                                                            l357 225A  
                                                            l366 1F26  
                                                            l375 1C90  
                                                            l391 203E  
                                                            l439 16C4  
                                                            l368 1F34  
                                                            l480 1028  
                                                            l529 0A1A  
                                                            l473 0DBA  
                                                            l554 1CFC  
                                                            l490 0F34  
                                                            l482 0E96  
                                                            l387 2044  
                                                            l905 113A  
                                                            l922 1DC4  
                                                            l930 15C6  
                                                            l906 114E  
                                                            l933 2218  
                                                            l847 1AFE  
                                                            l944 1790  
                                                            l928 15F4  
                                                            l882 119A  
                                                   __CFG_CPB$OFF 000000  
                                                   __CFG_CPD$OFF 000000  
                                                            _fan 008D  
                                                            _lcd 0055  
                                                            _med 008C  
                                                            _err 0054  
                                                            _isr 0008  
                                                            _tmp 0060  
                                                            _rxb 0053  
                                                            _ptt 0056  
                                                            _txb 0087  
                                                   __CFG_BORV$27 000000  
                                                            wreg 000FE8  
                                                     _FanControl 1C1A  
                                               CreateBuffTX@data 000D  
                                                           ?_ADC 0005  
                                                   __CFG_LVP$OFF 000000  
                                               ??_LCDversionSend 0012  
                                                           l1049 1E12  
                                                           l1243 1F9A  
                                                           l1244 1FA8  
                                                           l3014 1E5A  
                                                           l4000 107C  
                                                           l3016 1E60  
                                                           l1196 11C2  
                                                           l3140 1CB6  
                                                           l4030 10EA  
                                                           l4006 10A2  
                                                           l1198 12F6  
                                                           l4112 197C  
                                                           l4040 1118  
                                                           l4032 10F2  
                                                           l3144 1CCC  
                                                           l3136 1CA0  
                                                           l3240 1DDC  
                                                           l4042 1122  
                                                           l3170 1BC2  
                                                           l3242 1DE6  
                                                           l4060 1D88  
                                                           l4116 198E  
                                                           l4140 155E  
                                                           l4052 1174  
                                                           l4028 10DE  
                                                           l3148 1CE2  
                                                           l3156 1CF2  
                                                           l3180 1BF8  
                                                           l3252 1E08  
                                                           l3324 1C44  
                                                           l4070 1DC2  
                                                           l3334 1C5C  
                                                           l3600 1A44  
                                                           l4064 1DA8  
                                                           l4136 153C  
                                                           l3168 1BB4  
                                                           l2730 1D2C  
                                                           l4226 209A  
                                                           l4250 173C  
                                                           l4234 16F0  
                                                           l2714 20B2  
                                                           l3338 1C78  
                                                           l3604 1A56  
                                                           l3508 200E  
                                                           l2660 1F1A  
                                                           l2724 1D14  
                                                           l4260 1764  
                                                           l3356 2034  
                                                           l2742 1D5C  
                                                           l4326 2254  
                                                           l4350 148E  
                                                           l4342 1464  
                                                           l4334 144C  
                                                           l4254 174E  
                                                           l4174 1F4A  
                                                           l2718 20C0  
                                                           l4510 18DA  
                                                           l2664 1F28  
                                                           l2656 1F0C  
                                                           l2736 1D44  
                                                           l4272 1E7A  
                                                           l3480 0A58  
                                                           l3464 0A16  
                                                           l4440 180A  
                                                           l4416 17C2  
                                                           l4408 17AE  
                                                           l3632 1698  
                                                           l4520 18F4  
                                                           l2770 134E  
                                                           l4354 149C  
                                                           l4338 1458  
                                                           l4266 1780  
                                                           l4258 1758  
                                                           l4274 1E86  
                                                           l4450 1830  
                                                           l4426 17DE  
                                                           l3714 0F22  
                                                           l3650 0DCE  
                                                           l4514 18E8  
                                                           l4506 18CC  
                                                           l2780 1398  
                                                           l2756 21DC  
                                                           l4364 14B4  
                                                           l4196 1202  
                                                           l3476 0A42  
                                                           l3740 1004  
                                                           l4508 18D4  
                                                           l2782 13AA  
                                                           l2774 1368  
                                                           l3822 20F0  
                                                           l4374 14CC  
                                                           l4358 14A8  
                                                           l3726 0F72  
                                                           l3654 0DDA  
                                                           l3646 0DBE  
                                                           l3592 1A22  
                                                           l3584 1A06  
                                                           l2792 13F2  
                                                           l2776 137E  
                                                           l2794 1402  
                                                           l2786 13C6  
                                                           l2962 1B0A  
                                                           l3818 20DA  
                                                           l3682 0E72  
                                                           l3666 0E02  
                                                           l3596 1A32  
                                                           l3588 1A14  
                                                           l2788 13D8  
                                                           l3676 0E6A  
                                                           l2798 141A  
                                                           l2966 1B26  
                                                           l3686 0E84  
                                                           l2978 1B74  
                                                           l3970 1AB6  
                                                           l3962 1A82  
                                                           l3698 0EB8  
                                                           l3972 1AC8  
                                                           l3964 1A8E  
                                                           l3974 1AD4  
                                                           l3966 1AA2  
                                                           l3988 1AF2  
                                                           ?_isr 0001  
                                                           STR_1 064A  
                                                           STR_2 064E  
                                                           STR_3 067A  
                                                           STR_4 0676  
                                                           STR_5 0645  
                                                           STR_6 0627  
                                                           STR_7 063B  
                                                           STR_8 0636  
                                                           STR_9 066E  
                                                           u3010 1BC8  
                                                           u2300 1D1E  
                                                           _LATA 000F89  
                                                           _LATB 000F8A  
                                                           _LATC 000F8B  
                                                           _LATD 000F8C  
                                                           _LATE 000F8D  
                                                           u3130 1DEC  
                                                           u5020 1502  
                                                           u3270 202E  
                                                           u4320 1ADE  
                                                           u5040 17A6  
                                                           u4420 1094  
                                                           u2830 1E66  
                                                           u5207 21D0  
                                                           u4351 1040  
                                                           u2760 1B48  
                                                           u4280 1A7A  
                                                           u4520 1128  
                                                           u5217 1FFE  
                                                           u4361 1054  
                                                           u4450 10BE  
                                                           u5227 205A  
                                                           u3900 0F72  
                                                           u4390 106E  
                                                           u4640 19A8  
                                                           u3840 0EB8  
                                                           u3665 163A  
                                                           u4490 10F8  
                                                           u3770 0E02  
                                                           u3915 0F7E  
                                                           u4820 176A  
                                                           u5197 192E  
                                                           u4661 1532  
                                                           u3925 0F9A  
                                                           u3685 16A6  
                                                           u3855 0EC6  
                                                           u4761 16DC  
                                                           u4681 154C  
                                                           u3785 0E10  
                                                           u4770 16E4  
                                                           u4690 1554  
                                                           u4780 1710  
                                                           u4785 1706  
                                                           _TMR0 000FD6  
                                                           _TMR1 000FCE  
                                                           _TMR2 000FCC  
                                                           _Beep 2228  
                                                   __CFG_PWRT$ON 000000  
                                            __size_of_ADCmeasure 00AE  
                                                   __CFG_STVR$ON 000000  
                                                           _band 0057  
                                                           _fabs 1F76  
                                                           _elpf 006C  
                                                           _main 1854  
                                                           _freq 0048  
                                                  FreqMeasure@jj 001C  
                                                           _maxf 008E  
                                                           _curr 004C  
                                                   ___ftpack@arg 0005  
                                                           _frwd 0050  
                                                           _logo 00ED  
                                                           _refl 004E  
                                                   ___ftpack@exp 0008  
                                                           _temp 004A  
                                                           fsr2h 000FDA  
                                                           indf2 000FDF  
                                                           fsr2l 000FD9  
                                                           btemp 0059  
                                                           _sqrt 11A0  
                                                           _volt 0082  
                                                __end_of_PTT_OFF 22B0  
                                                           prodh 000FF4  
                                                           prodl 000FF3  
                                                           start 00BC  
                                                __end_of_DelayMs 21E8  
                                                   ___param_bank 000000  
                                                    _writeEEPROM 1FAE  
                                                   ___ftmul@sign 0017  
                                                          ??_ADC 0007  
                                                          ADC@ch 0009  
                                                __end_of_SetBand 1F3C  
                                                   ___fttol@exp1 003D  
                                                   ___fttol@lval 0039  
                                                          ??_isr 0001  
                                                  ?_readEEPROM16 0006  
                                                          ?_Beep 0001  
                                                  __CFG_OSCS$OFF 000000  
                                                          ?_fabs 0010  
                                             writeEEPROM@address 0006  
                                                          ?_main 0001  
                                                          _EEADR 000FA9  
                                                __end_of___ftadd 11A0  
                                                          STR_10 0652  
                                                          STR_11 0682  
                                                          STR_20 066A  
                                                          STR_12 065E  
                                                          STR_21 067E  
                                                          STR_13 0672  
                                                          STR_22 0666  
                                                          STR_14 0662  
                                                          STR_15 0631  
                                                          STR_23 0601  
                                                          STR_16 062C  
                                                          STR_24 060B  
                                                          STR_17 065A  
                                                          STR_25 0615  
                                                          STR_18 0656  
                                                          STR_26 061F  
                                                          STR_19 0640  
                                                          _CMCON 000FB4  
                                                __end_of___ftneg 2228  
                                                __end_of___lldiv 1C1A  
                                                          ?_sqrt 001F  
                                                __end_of___ftmul 15FA  
                                                          _T0CON 000FD5  
                                                          _T1CON 000FCD  
                                                __end_of___ftsub 1F76  
                                                __end_of___fttol 1796  
                                                          _T2CON 000FCA  
                                                          _T3CON 000FB1  
                                                 __CFG_DEBUG$OFF 000000  
                                                __end_of___lwdiv 1E1E  
                                                          i2l283 21F2  
                                                          i2l285 2204  
                                                          i2l297 00AA  
                                                          i2l299 00AC  
                                                          _RCREG 000FAE  
                                                          _RCSTA 000FAB  
                                                          _TMR1H 000FCF  
                                                          _TMR1L 000FCE  
                                                          _TMR3H 000FB3  
                                                          _TMR3L 000FB2  
                                                          _SPBRG 000FAF  
                                                          _PORTA 000F80  
                                                          _PORTB 000F81  
                                                          _PORTC 000F82  
                                                          _PORTD 000F83  
                                                          _PORTE 000F84  
                                                          _TRISA 000F92  
                                                          _TRISB 000F93  
                                                          _TRISC 000F94  
                                                          _TRISD 000F95  
                                                          _TRISE 000F96  
                                                ??i2_RXstopTIMER 0001  
                                                          _TXREG 000FAD  
                                                          _TXSTA 000FAC  
                                              LCDpageSelect@page 0013  
                                                  __CFG_WRT0$OFF 000000  
                                                  __CFG_WRT1$OFF 000000  
                                                  __CFG_WRT2$OFF 000000  
                                                  ??_RXstopTIMER 0005  
                                                  __CFG_WRT3$OFF 000000  
                                                   ___lltoft@exp 0015  
                                                 __CFG_EBTR0$OFF 000000  
                                                 __CFG_EBTR1$OFF 000000  
                                                 __CFG_EBTR2$OFF 000000  
                                                 __CFG_EBTR3$OFF 000000  
                                                ??_ConvertNumber 000A  
                                                  __CFG_WRTB$OFF 000000  
                                                  __CFG_WRTC$OFF 000000  
                                                  __CFG_WRTD$OFF 000000  
                                                          _aband 00F1  
                                                 __CFG_EBTRB$OFF 000000  
                                                          _cpeak 0078  
                                           __end_of_CreateBuffTX 1B9A  
                                                          _fpeak 0046  
                                            __end_of_FreqMeasure 19BE  
                                                          fabs@d 0010  
                                                 FreqMeasure@err 001D  
                                                 FreqMeasure@tmr 001E  
                                                          _hystF 00EF  
                                                          _tempM 0070  
                                                          _hystT 00F0  
                                                          _rpeak 007A  
                                                  ___ftpack@sign 0009  
                                                          _voltM 006E  
                                                          isr@rx 0004  
                                         __size_of_LCDpageSelect 006C  
                                                          tablat 000FF5  
                                                   ?_EEmbandRead 0001  
                                        __size_of_waitAckFromLCD 0054  
                                               __end_of_PTT_read 2260  
                                                          ttemp5 005A  
                                                          sqrt@a 001F  
                                                          ttemp6 005D  
                                                          ttemp7 0061  
                                                          sqrt@i 0028  
                                                          sqrt@q 0029  
                                                          sqrt@x 002C  
                                                          sqrt@z 0025  
                                                          status 000FD8  
                                                          wtemp8 005A  
                                                  ?_RXstartTIMER 0001  
                                                   __end_of_Beep 2244  
                                                __initialization 1EC4  
                                                   __end_of_fabs 1FAE  
                                                   __end_of_main 190C  
                                                    ?_BandDecode 0001  
                                                   __end_of_sqrt 12FC  
                                                 ??_readEEPROM16 0008  
                                                         ??_Beep 0007  
                                                 __CFG_OSC$HSPLL 000000  
                                                         ??_fabs 0013  
                                                         ??_main 0046  
                                                  ___fttol@sign1 0038  
                                                         ??_sqrt 0022  
                                                  __activetblptr 000001  
                                        __size_of_PttHoldControl 0030  
                                                    ?_FanControl 0001  
                                                         _ADCON0 000FC2  
                                                         _ADCON1 000FC1  
                                                  ?_RecieveError 0001  
                                         __size_of_writeEEPROM16 0026  
                                                   ?_EEsetupRead 0001  
                                                         _ADRESH 000FC4  
                                                         _ADRESL 000FC3  
                                                         _EEDATA 000FA8  
                                                         _EECON1 000FA6  
                                                         _EECON2 000FA7  
                                                      ??_PTT_OFF 0007  
                                               __end_of___ftpack 1B04  
                                               __end_of___lltoft 1EC4  
                                                         i2l3832 2106  
                                                         i2l3850 002A  
                                                         i2l3836 2114  
                                                         i2l3864 0070  
                                                         _INTCON 000FF2  
                                                         i2l3874 008A  
                                                         i2l3868 007E  
                                            ProtectCheck@beepPer 0064  
                                                      ??_DelayMs 0005  
                                               __end_of___lwtoft 2176  
                                            __end_of_RXstopTIMER 22F0  
                                                 __CFG_WDTPS$128 000000  
                                                         _WDTCON 000FD1  
                                                 ??_RXstartTIMER 0001  
                                                         _STKPTR 000FFC  
                                                         _PTT_ON 207A  
                                             __size_of_RXrestart 002A  
                                                         _DelayS 1FE4  
                                                      ??_SetBand 0005  
                                             __size_of_SendUSART 001C  
                                                         ___ftge 1D68  
                                                         _beeper 00EE  
                                                      ??___ftadd 0013  
                                                      ??___ftneg 0008  
                                                      ??___lldiv 000D  
                                                      ??___ftmul 0013  
                                                      ??___ftsub 001F  
                                                      ??___fttol 0033  
                                                         _buffRX 00CF  
                                                         _buffTX 008F  
                                                         _fanptt 00F2  
                                                      ??___lwdiv 0009  
                                                   ??_ADCmeasure 000A  
                                                         _bstate 008A  
                                                  _LCDpageSelect 1C96  
                                                         _bypass 0058  
                                                         _cvtout 0068  
                                                         clear_0 1EDC  
                                                         clear_1 1EE8  
                                                         _frtout 006A  
                                                         _reldel 00F4  
                                                         _sensor 00EC  
                                                         _rx_end 0086  
                                                         _tx_len 0052  
                                          ___ftmul@f3_as_product 0018  
                                                    _FreqMeasure 190C  
                                             __size_of_SetupMode 03E6  
                                                   __mediumconst 0000  
                                                         tblptrh 000FF7  
                                                         tblptrl 000FF6  
                                                         tblptru 000FF8  
                                                 ??_RecieveError 0001  
                                                   ?i2_RXrestart 0001  
                                             __size_of_Tramsmitt 0016  
                                                  ??_SlowControl 000A  
                                            __size_of_BandDecode 0066  
                                             __size_of_SwitchOFF 0010  
                                                     __accesstop 0060  
                                        __end_of__initialization 1EEE  
                                             __end_of_ADCmeasure 1A6C  
                                                     ___ftadd@f1 000D  
                                                     ___ftadd@f2 0010  
                                                     ___ftge@ff1 0013  
                                                     ___ftge@ff2 0016  
                                                  ___rparam_used 000001  
                                                writeEEPROM@data 0005  
                                                     ___ftneg@f1 0005  
                                                     ___ftmul@f1 000D  
                                                     ___ftmul@f2 0010  
                                                     ___ftsub@f1 0019  
                                                     ___ftsub@f2 001C  
                                                     ___fttol@f1 002F  
                                                 __pcstackCOMRAM 0001  
                                            __size_of_FanControl 007C  
                                                  _writeEEPROM16 2176  
                                                   __pidataBANK0 22FC  
                                                     ___lltoft@c 000D  
                                                 ?_LCDpageSelect 0001  
                                                     ___lwtoft@c 000D  
                                          __size_of_CreateBuffTX 0096  
                                                      ?_PTT_read 0001  
                                              __end_of_RXrestart 20D2  
                                              _ReadStatusFromLCD 1796  
                                                    _RXstopTIMER 22E6  
                                              __end_of_SendUSART 227C  
                                             ?_ReadStatusFromLCD 0001  
                                                     __pbssBANK0 0060  
                                           __end_of_readEEPROM16 214E  
                                                 _waitAckFromLCD 1E1E  
                                            ??_ReadStatusFromLCD 0046  
                                                     __pnvCOMRAM 0057  
                                                        ?_PTT_ON 0001  
                                           __size_of_EEmbandRead 0026  
                                                        ?_DelayS 0001  
                                            __end_of_SlowControl 16CA  
                                              __end_of_SetupMode 0A6E  
                                       __size_of_SendStatusToLCD 0282  
                                                   ?_writeEEPROM 0005  
                                                 ?_writeEEPROM16 0008  
                                                        ?___ftge 0013  
                                                   _CreateBuffTX 1B04  
                                              __end_of_Tramsmitt 22C6  
                                                        _CCP1CON 000FBD  
                                                      ?___ftpack 0005  
                                              __end_of_SwitchOFF 22D6  
                                                      ?___lltoft 000D  
                                      __end_of_ReadStatusFromLCD 1854  
                                                      ?___lwtoft 000D  
                                              waitAckFromLCD@ack 0005  
                                           __end_of_RXstartTIMER 22E6  
                                                     ??_PTT_read 0020  
                                                 _PttHoldControl 201A  
                                         __end_of_waitAckFromLCD 1E72  
                                                        _PTT_OFF 2296  
                                                        _DelayMs 21C2  
                                           __size_of_EEsetupRead 033E  
                                                     _bstate_old 0089  
                                                     _readEEPROM 227C  
                                                __size_of_PTT_ON 002E  
                                                __size_of_DelayS 0036  
                                                        _SetBand 1F00  
                                                        __Hparam 0000  
                                                        __Lparam 0000  
                                                ??_LCDpageSelect 0012  
                                                   ??_BandDecode 0005  
                                           __end_of_RecieveError 220A  
                                                __size_of___ftge 0062  
                                                        ___ftadd 102E  
                                                        ___ftneg 220A  
                                                        ___lldiv 1B9A  
                                                        ___ftmul 1520  
                                                        ___ftsub 1F3C  
                                                        ___fttol 16CA  
                                                        ___lwdiv 1DCA  
                                                   __psmallconst 0600  
                                                        _biasdel 00F3  
                                                        __pcinit 1EC4  
                                                     ??___ftpack 000A  
                                                        __ramtop 0600  
                                                     ??___lltoft 0011  
                                                        __ptext0 1854  
                                                        __ptext1 15FA  
                                                        __ptext2 201A  
                                                        __ptext3 1C1A  
                                                        __ptext4 0DAC  
                                                        __ptext5 22B0  
                                                        __ptext6 1796  
                                                        __ptext7 0688  
                                                        __ptext8 2176  
                                                        __ptext9 1FAE  
                                         __end_of_PttHoldControl 204A  
                                                     ??___lwtoft 0010  
                                                   __size_of_ADC 0030  
                                                    SetupMode@lW 0022  
                                                    SetupMode@pW 001E  
                                                    SetupMode@rW 0020  
                                                        _err_old 00FB  
                                                        _max_ref 00E7  
                                                        _max_pwr 00E9  
                                                   __size_of_isr 00B4  
                                                        _lpferrC 00DB  
                                                        _lpferrP 00DD  
                                                        _lpferrR 00D9  
                                                   ??_FanControl 0005  
                                          __end_ofi2_RXstopTIMER 22FA  
                                          __end_of_ConvertNumber 143A  
                                                ?_waitAckFromLCD 0001  
                                                      DelayS@sec 0007  
                                           end_of_initialization 1EEE  
                                                      DelayMs@ms 0006  
                                                    _SlowControl 15FA  
                                             __end_of_BandDecode 1D68  
                                           __size_ofi2_RXrestart 002A  
                                                  ?_ProtectCheck 0001  
                                                ??_writeEEPROM16 000B  
                                                ___lldiv@divisor 0009  
                                                ___lldiv@counter 0011  
                                        __size_of_LCDversionSend 002A  
                                                      _RCSTAbits 000FAB  
                                                        postinc0 000FEE  
                                                        postinc2 000FDE  
                                             __end_of_FanControl 1C96  
                                              ??_SendStatusToLCD 0012  
                                              ConvertNumber@conv 0009  
                                                      _PORTAbits 000F80  
                                                      _PORTCbits 000F82  
                                                ?_PttHoldControl 0001  
                                     __size_of_ReadStatusFromLCD 00BE  
                                                   ?_FreqMeasure 0001  
                                          __size_of_readEEPROM16 0028  
                                                     _ptt_htimer 0088  
                                                CreateBuffTX@str 000C  
                                                 ??_ProtectCheck 0020  
                                                    ?_readEEPROM 0001  
                                                PttHoldControl@t 0085  
                                                  EEsetupRead@lW 00F9  
                                                  EEsetupRead@pW 00F5  
                                                  EEsetupRead@rW 00F7  
                                                 __end_of_PTT_ON 20A8  
                                                 __end_of_DelayS 201A  
                                                    ___ftmul@exp 0016  
                                          __size_of_RXstartTIMER 0010  
                                           __size_of_writeEEPROM 0036  
                                                 __end_of___ftge 1DCA  
                                                   _readEEPROM16 2126  
                                         writeEEPROM@INTCON_SAVE 0007  
                                            start_initialization 1EC4  
                                                    __end_of_ADC 207A  
                                                   ?_RXstopTIMER 0001  
                                              __size_of_PTT_read 001C  
                                                    __end_of_isr 00BC  
                                                      _RXrestart 20A8  
                                                      _SendUSART 2260  
                                                       ??_PTT_ON 0020  
                                                       ??_DelayS 0005  
                                          __size_of_RecieveError 0022  
                                                   _RXstartTIMER 22D6  
                                                       ??___ftge 0019  
                                                      _SetupMode 0688  
                                                    __pdataBANK0 00FB  
                                                      _Tramsmitt 22B0  
                                            __size_of_readEEPROM 001A  
                                              __size_of___ftpack 0098  
                                              __size_of___lltoft 0052  
                                                    __pbssCOMRAM 0046  
                                                      _SwitchOFF 22C6  
                                              __size_of___lwtoft 0028  
                                                  __pcstackBANK0 00F5  
                                                     ?_RXrestart 0001  
                                                   _RecieveError 21E8  
                                                       ?_PTT_OFF 0001  
                                                  ??_EEmbandRead 0006  
                                                     ?_SendUSART 0001  
                                                       ?_DelayMs 0001  
                                                      __pnvBANK0 00D9  
                                                       ?_SetBand 0001  
                                                 _LCDversionSend 20D2  
                                               ___lwdiv@dividend 0005  
                                                      __pintcode 0008  
                                                      _cpeak_old 0072  
                                                       ?___ftadd 000D  
                                                     ?_SetupMode 0001  
                                                       ?___ftneg 0005  
                                                       ?___lldiv 0005  
                                                       ?___ftmul 000D  
                                                       ?___ftsub 0019  
                                                       ?___fttol 002F  
                                                       ?___lwdiv 0005  
                                                      _fpeak_old 0076  
                                                     ?_Tramsmitt 0001  
                                           __end_of_ProtectCheck 1520  
                                                    __smallconst 0600  
                                               ??_waitAckFromLCD 0005  
                                                     ?_SwitchOFF 0001  
                                                  SetupMode@eadr 0024  
                                           __size_of_FreqMeasure 00B2  
                                                  ??_EEsetupRead 003E  
                                               readEEPROM16@addr 000D  
                                               ___lwdiv@quotient 0009  
                                                   ?_SlowControl 0001  
                                         __end_of_LCDversionSend 20FC  
                                                       _LATBbits 000F8A  
                                                       _LATCbits 000F8B  
                                                       _LATDbits 000F8C  
                                                       _LATEbits 000F8D  
                                                _SendStatusToLCD 0DAC  
                                                       _PIE1bits 000F9D  
                                            __end_of_EEmbandRead 21C2  
                                                       _PIR1bits 000F9E  
                                                       _PIR2bits 000FA1  
                                                      _rpeak_old 0074  
                                               ??_PttHoldControl 0005  
                                          __end_of_LCDpageSelect 1D02  
                                                     _ADCON0bits 000FC2  
                                                       _PTT_read 2244  
                                                      _volt_view 0080  
                                                  ??i2_RXrestart 0001  
                                                    ??_RXrestart 0005  
                                                LCDpageSelect@tt 0012  
                                                    _INTCON2bits 000FF1  
                                           __size_of_RXstopTIMER 000A  
                                               __size_of_PTT_OFF 001A  
                                                    ??_SendUSART 0007  
                                                   ??_readEEPROM 0005  
                                               __size_of_DelayMs 0026  
                                                ?_LCDversionSend 0001  
                                            __end_of_EEsetupRead 0DAC  
                                                     _EECON1bits 000FA6  
                                                       __Hrparam 0000  
                                               __size_of_SetBand 003C  
                                                       __Lrparam 0000  
                                          __end_of_writeEEPROM16 219C  
                                                   __Lsmallconst 0600  
                                         __size_ofi2_RXstopTIMER 000A  
                                                    ??_SetupMode 0014  
                                               __size_of___ftadd 0172  
                                                     _ADCmeasure 19BE  
                                               __size_of___ftneg 001E  
                                         __size_of_ConvertNumber 013E  
                                               __size_of___lldiv 0080  
                                               __size_of___ftmul 00DA  
                                               __size_of___ftsub 003A  
                                               __size_of___fttol 00CC  
                                               __size_of___lwdiv 0054  
                                                       ___ftpack 1A6C  
                                                       ___lltoft 1E72  
                                                    ??_Tramsmitt 0005  
                                                       ___lwtoft 214E  
                                                       _band_old 008B  
                                             __end_of_readEEPROM 2296  
                                                    ??_SwitchOFF 0005  
                                                ___lwdiv@divisor 0007  
                                                ___lwdiv@counter 000B  
                                                       __ptext10 1DCA  
                                                       __ptext11 1B9A  
                                                       __ptext20 1520  
                                                       __ptext12 1C96  
                                                       __ptext21 2126  
                                                       __ptext13 1E1E  
                                                       __ptext30 207A  
                                                       __ptext22 1E72  
                                                       __ptext14 20A8  
                                                       __ptext31 190C  
                                                       __ptext23 16CA  
                                                       __ptext15 22E6  
                                                       __ptext40 20D2  
                                                       __ptext32 1F76  
                                                       __ptext24 219C  
                                                       __ptext16 0A6E  
                                                       __ptext41 2260  
                                                       __ptext33 220A  
                                                       __ptext25 227C  
                                                       __ptext17 11A0  
                                                       __ptext50 22F0  
                                                       __ptext42 21C2  
                                                       __ptext34 214E  
                                                       __ptext26 2228  
                                                       __ptext18 1F3C  
                                                       __ptext51 21E8  
                                                       __ptext43 1B04  
                                                       __ptext35 1A6C  
                                                       __ptext27 143A  
                                                       __ptext19 102E  
                                                       __ptext52 22D6  
                                                       __ptext44 12FC  
                                                       __ptext36 1D68  
                                                       __ptext28 22C6  
                                                       __ptext45 1FE4  
                                                       __ptext37 1D02  
                                                       __ptext29 2244  
                                                       __ptext46 19BE  
                                                       __ptext38 1F00  
                                                       __ptext47 204A  
                                                       __ptext39 2296  
                                                       __ptext49 20FC  
                                        __end_of_SendStatusToLCD 102E  
                                                  __size_of_Beep 001C  
                                                    _EEmbandRead 219C  
                                                       _max_tFAN 00DF  
                                                       _max_curr 00E3  
                                                  __size_of_fabs 0038  
                                                       _max_temp 00E1  
                                                  __size_of_main 00B8  
                                                       _max_volt 00E5  
                                            __end_ofi2_RXrestart 2126  
                                                  __size_of_sqrt 015C  
                                                  ??_writeEEPROM 0006  
                                                       _temp_old 007C  
                                                  ?_CreateBuffTX 000C  
                                                       int$flags 0059  
                                                       _ptt_hold 00EB  
                                          __size_of_ProtectCheck 00E6  
                                                       _volt_old 007E  
                                                ProtectCheck@bpt 0066  
                                                     _INTCONbits 000FF2  
                                                  i2_RXstopTIMER 22F0  
                                                    _EEsetupRead 0A6E  
                                                  _ConvertNumber 12FC  
                                                       intlevel2 22FA  
                                              LCDversionSend@rep 0012  
                                               ___lldiv@dividend 0005  
                                           __size_of_SlowControl 00D0  
                                                   _ProtectCheck 143A  
                                                 readEEPROM16@ee 000B  
                                                 ??_CreateBuffTX 0011  
                                                 readEEPROM@addr 0005  
                                            ConvertNumber@number 0005  
                                                 ProtectCheck@bp 0084  
                                                    ?_ADCmeasure 0001  
                                            __end_of_writeEEPROM 1FE4  
                                               ___lldiv@quotient 000D  
                                                 ?i2_RXstopTIMER 0001  
                                                    i2_RXrestart 20FC  
                                                 ?_ConvertNumber 0005  
                                               ?_SendStatusToLCD 0001  
                                              writeEEPROM16@addr 0008  
                                              writeEEPROM16@data 000A  
