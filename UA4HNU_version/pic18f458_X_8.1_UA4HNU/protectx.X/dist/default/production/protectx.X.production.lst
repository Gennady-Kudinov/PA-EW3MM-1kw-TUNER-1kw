

Microchip Technology PIC18 PRO Macro Assembler V2.00 build -1524193055 
                                                                                               Fri Mar 08 13:00:36 2024

Microchip Technology Omniscient Code Generator v2.00 (PRO mode) build 20180527130849
     1                           	processor	18F458
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	pm
     5                           	psect	eeprom_data,global,class=EEDATA,delta=1,noexec
     6                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     7                           	psect	nvCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     8                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
     9                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
    10                           	psect	cinit,global,reloc=2,class=CODE,delta=1
    11                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    12                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    13                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    14                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    15                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    16                           	psect	text0,global,reloc=2,class=CODE,delta=1
    17                           	psect	text1,global,reloc=2,class=CODE,delta=1
    18                           	psect	text2,global,reloc=2,class=CODE,delta=1
    19                           	psect	text3,global,reloc=2,class=CODE,delta=1
    20                           	psect	text4,global,reloc=2,class=CODE,delta=1
    21                           	psect	text5,global,reloc=2,class=CODE,delta=1
    22                           	psect	text6,global,reloc=2,class=CODE,delta=1
    23                           	psect	text7,global,reloc=2,class=CODE,delta=1
    24                           	psect	text8,global,reloc=2,class=CODE,delta=1
    25                           	psect	text9,global,reloc=2,class=CODE,delta=1
    26                           	psect	text10,global,reloc=2,class=CODE,delta=1,group=1
    27                           	psect	text11,global,reloc=2,class=CODE,delta=1,group=1
    28                           	psect	text12,global,reloc=2,class=CODE,delta=1
    29                           	psect	text13,global,reloc=2,class=CODE,delta=1
    30                           	psect	text14,global,reloc=2,class=CODE,delta=1
    31                           	psect	text15,global,reloc=2,class=CODE,delta=1
    32                           	psect	text16,global,reloc=2,class=CODE,delta=1
    33                           	psect	text17,global,reloc=2,class=CODE,delta=1,group=1
    34                           	psect	text18,global,reloc=2,class=CODE,delta=1,group=1
    35                           	psect	text19,global,reloc=2,class=CODE,delta=1,group=1
    36                           	psect	text20,global,reloc=2,class=CODE,delta=1,group=1
    37                           	psect	text21,global,reloc=2,class=CODE,delta=1
    38                           	psect	text22,global,reloc=2,class=CODE,delta=1,group=1
    39                           	psect	text23,global,reloc=2,class=CODE,delta=1,group=1
    40                           	psect	text24,global,reloc=2,class=CODE,delta=1
    41                           	psect	text25,global,reloc=2,class=CODE,delta=1
    42                           	psect	text26,global,reloc=2,class=CODE,delta=1
    43                           	psect	text27,global,reloc=2,class=CODE,delta=1
    44                           	psect	text28,global,reloc=2,class=CODE,delta=1
    45                           	psect	text29,global,reloc=2,class=CODE,delta=1
    46                           	psect	text30,global,reloc=2,class=CODE,delta=1
    47                           	psect	text31,global,reloc=2,class=CODE,delta=1
    48                           	psect	text32,global,reloc=2,class=CODE,delta=1
    49                           	psect	text33,global,reloc=2,class=CODE,delta=1,group=2
    50                           	psect	text34,global,reloc=2,class=CODE,delta=1,group=1
    51                           	psect	text35,global,reloc=2,class=CODE,delta=1,group=1
    52                           	psect	text36,global,reloc=2,class=CODE,delta=1,group=1
    53                           	psect	text37,global,reloc=2,class=CODE,delta=1,group=1
    54                           	psect	text38,global,reloc=2,class=CODE,delta=1
    55                           	psect	text39,global,reloc=2,class=CODE,delta=1
    56                           	psect	text40,global,reloc=2,class=CODE,delta=1
    57                           	psect	text41,global,reloc=2,class=CODE,delta=1
    58                           	psect	text42,global,reloc=2,class=CODE,delta=1
    59                           	psect	text43,global,reloc=2,class=CODE,delta=1
    60                           	psect	text44,global,reloc=2,class=CODE,delta=1
    61                           	psect	text45,global,reloc=2,class=CODE,delta=1
    62                           	psect	text46,global,reloc=2,class=CODE,delta=1
    63                           	psect	text47,global,reloc=2,class=CODE,delta=1
    64                           	psect	text48,global,reloc=2,class=CODE,delta=1
    65                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    66                           	psect	text50,global,reloc=2,class=CODE,delta=1
    67                           	psect	text51,global,reloc=2,class=CODE,delta=1
    68                           	psect	text52,global,reloc=2,class=CODE,delta=1
    69                           	psect	text53,global,reloc=2,class=CODE,delta=1
    70                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    71                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    72                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    73  0000                     
    74                           ; Version 2.00
    75                           ; Generated 27/05/2018 GMT
    76                           ; 
    77                           ; Copyright Â© 2018, Microchip Technology Inc. and its subsidiaries ("Microchip")
    78                           ; All rights reserved.
    79                           ; 
    80                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    81                           ; 
    82                           ; Redistribution and use in source and binary forms, with or without modification, are
    83                           ; permitted provided that the following conditions are met:
    84                           ; 
    85                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    86                           ;        conditions and the following disclaimer.
    87                           ; 
    88                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    89                           ;        of conditions and the following disclaimer in the documentation and/or other
    90                           ;        materials provided with the distribution.
    91                           ; 
    92                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    93                           ;        software without specific prior written permission.
    94                           ; 
    95                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    96                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    97                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    98                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    99                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   100                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   101                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   102                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   103                           ; 
   104                           ; 
   105                           ; Code-generator required, PIC18F458 Definitions
   106                           ; 
   107                           ; SFR Addresses
   108  0000                     
   109                           	psect	eeprom_data
   110  F00000  7E 04 82 00 72 01 F4 01 	db	126,4,130,0,114,1,244,1	;# 
   111  F00008  41 00 2D 00 C8 00 64 00 	db	65,0,45,0,200,0,100,0	;# 
   112  F00010  32 00 0A 05 05 0A 0A 00 	db	50,0,10,5,5,10,10,0	;# 
   113  F00018  01 01 00 01 00 00 00 00 	db	1,1,0,1,0,0,0,0	;# 
   114                           
   115                           	psect	idataBANK0
   116  0023DA                     __pidataBANK0:
   117                           	opt stack 0
   118                           
   119                           ;initializer for _err_old
   120  0023DA  FF                 	db	255
   121                           
   122                           	psect	nvCOMRAM
   123  000057                     __pnvCOMRAM:
   124                           	opt stack 0
   125  000057                     _band:
   126                           	opt stack 0
   127  000057                     	ds	1
   128  000058                     _bypass:
   129                           	opt stack 0
   130  000058                     	ds	1
   131                           
   132                           	psect	nvBANK0
   133  0000D9                     __pnvBANK0:
   134                           	opt stack 0
   135  0000D9                     _lpferrR:
   136                           	opt stack 0
   137  0000D9                     	ds	2
   138  0000DB                     _lpferrC:
   139                           	opt stack 0
   140  0000DB                     	ds	2
   141  0000DD                     _lpferrP:
   142                           	opt stack 0
   143  0000DD                     	ds	2
   144  0000DF                     _max_tFAN:
   145                           	opt stack 0
   146  0000DF                     	ds	2
   147  0000E1                     _max_temp:
   148                           	opt stack 0
   149  0000E1                     	ds	2
   150  0000E3                     _max_curr:
   151                           	opt stack 0
   152  0000E3                     	ds	2
   153  0000E5                     _max_volt:
   154                           	opt stack 0
   155  0000E5                     	ds	2
   156  0000E7                     _max_ref:
   157                           	opt stack 0
   158  0000E7                     	ds	2
   159  0000E9                     _max_pwr:
   160                           	opt stack 0
   161  0000E9                     	ds	2
   162  0000EB                     _ptt_hold:
   163                           	opt stack 0
   164  0000EB                     	ds	1
   165  0000EC                     _sensor:
   166                           	opt stack 0
   167  0000EC                     	ds	1
   168  0000ED                     _logo:
   169                           	opt stack 0
   170  0000ED                     	ds	1
   171  0000EE                     _beeper:
   172                           	opt stack 0
   173  0000EE                     	ds	1
   174  0000EF                     _hystF:
   175                           	opt stack 0
   176  0000EF                     	ds	1
   177  0000F0                     _hystT:
   178                           	opt stack 0
   179  0000F0                     	ds	1
   180  0000F1                     _aband:
   181                           	opt stack 0
   182  0000F1                     	ds	1
   183  0000F2                     _ant:
   184                           	opt stack 0
   185  0000F2                     	ds	1
   186  0000F3                     _fanptt:
   187                           	opt stack 0
   188  0000F3                     	ds	1
   189  0000F4                     _biasdel:
   190                           	opt stack 0
   191  0000F4                     	ds	1
   192  0000F5                     _reldel:
   193                           	opt stack 0
   194  0000F5                     	ds	1
   195  0000                     _TMR0	set	4054
   196  0000                     _TMR1	set	4046
   197  0000                     _INTCON2bits	set	4081
   198  0000                     _WDTCON	set	4049
   199  0000                     _T3CON	set	4017
   200  0000                     _T1CON	set	4045
   201  0000                     _SPBRG	set	4015
   202  0000                     _TXSTA	set	4012
   203  0000                     _RCSTA	set	4011
   204  0000                     _LATE	set	3981
   205  0000                     _LATD	set	3980
   206  0000                     _LATC	set	3979
   207  0000                     _LATB	set	3978
   208  0000                     _LATA	set	3977
   209  0000                     _PORTE	set	3972
   210  0000                     _PORTD	set	3971
   211  0000                     _PORTC	set	3970
   212  0000                     _PORTB	set	3969
   213  0000                     _PORTA	set	3968
   214  0000                     _TRISE	set	3990
   215  0000                     _TRISD	set	3989
   216  0000                     _TRISC	set	3988
   217  0000                     _TRISB	set	3987
   218  0000                     _TRISA	set	3986
   219  0000                     _ADCON1	set	4033
   220  0000                     _CCP1CON	set	4029
   221  0000                     _CMCON	set	4020
   222  0000                     _STKPTR	set	4092
   223  0000                     _T0CON	set	4053
   224  0000                     _TMR3L	set	4018
   225  0000                     _TMR3H	set	4019
   226  0000                     _PIR2bits	set	4001
   227  0000                     _ADRESL	set	4035
   228  0000                     _ADRESH	set	4036
   229  0000                     _ADCON0bits	set	4034
   230  0000                     _ADCON0	set	4034
   231  0000                     _LATDbits	set	3980
   232  0000                     _LATBbits	set	3978
   233  0000                     _LATEbits	set	3981
   234  0000                     _LATCbits	set	3979
   235  0000                     _PORTAbits	set	3968
   236  0000                     _TMR1L	set	4046
   237  0000                     _TMR1H	set	4047
   238  0000                     _INTCONbits	set	4082
   239  0000                     _PORTCbits	set	3970
   240  0000                     _TXREG	set	4013
   241  0000                     _RCREG	set	4014
   242  0000                     _RCSTAbits	set	4011
   243  0000                     _PIE1bits	set	3997
   244  0000                     _PIR1bits	set	3998
   245  0000                     _T2CON	set	4042
   246  0000                     _TMR2	set	4044
   247  0000                     _EECON2	set	4007
   248  0000                     _INTCON	set	4082
   249  0000                     _EEDATA	set	4008
   250  0000                     _EECON1bits	set	4006
   251  0000                     _EEADR	set	4009
   252  0000                     _EECON1	set	4006
   253                           
   254                           	psect	smallconst
   255  000600                     __psmallconst:
   256                           	opt stack 0
   257  000600  00                 	db	0
   258  000601                     STR_25:
   259  000601  70                 	db	112	;'p'
   260  000602  61                 	db	97	;'a'
   261  000603  67                 	db	103	;'g'
   262  000604  65                 	db	101	;'e'
   263  000605  20                 	db	32
   264  000606  73                 	db	115	;'s'
   265  000607  65                 	db	101	;'e'
   266  000608  74                 	db	116	;'t'
   267  000609  75                 	db	117	;'u'
   268  00060A  70                 	db	112	;'p'
   269  00060B  31                 	db	49	;'1'
   270  00060C  00                 	db	0
   271  00060D                     STR_23:
   272  00060D  70                 	db	112	;'p'
   273  00060E  61                 	db	97	;'a'
   274  00060F  67                 	db	103	;'g'
   275  000610  65                 	db	101	;'e'
   276  000611  20                 	db	32
   277  000612  6D                 	db	109	;'m'
   278  000613  61                 	db	97	;'a'
   279  000614  69                 	db	105	;'i'
   280  000615  6E                 	db	110	;'n'
   281  000616  00                 	db	0
   282  000617                     STR_24:
   283  000617  70                 	db	112	;'p'
   284  000618  61                 	db	97	;'a'
   285  000619  67                 	db	103	;'g'
   286  00061A  65                 	db	101	;'e'
   287  00061B  20                 	db	32
   288  00061C  6C                 	db	108	;'l'
   289  00061D  6F                 	db	111	;'o'
   290  00061E  67                 	db	103	;'g'
   291  00061F  6F                 	db	111	;'o'
   292  000620  00                 	db	0
   293  000621                     STR_26:
   294  000621  76                 	db	118	;'v'
   295  000622  65                 	db	101	;'e'
   296  000623  72                 	db	114	;'r'
   297  000624  73                 	db	115	;'s'
   298  000625  69                 	db	105	;'i'
   299  000626  6F                 	db	111	;'o'
   300  000627  6E                 	db	110	;'n'
   301  000628  00                 	db	0
   302  000629                     STR_6:
   303  000629  6D                 	db	109	;'m'
   304  00062A  72                 	db	114	;'r'
   305  00062B  65                 	db	101	;'e'
   306  00062C  66                 	db	102	;'f'
   307  00062D  00                 	db	0
   308  00062E                     STR_16:
   309  00062E  6D                 	db	109	;'m'
   310  00062F  74                 	db	116	;'t'
   311  000630  66                 	db	102	;'f'
   312  000631  68                 	db	104	;'h'
   313  000632  00                 	db	0
   314  000633                     STR_15:
   315  000633  6D                 	db	109	;'m'
   316  000634  74                 	db	116	;'t'
   317  000635  70                 	db	112	;'p'
   318  000636  68                 	db	104	;'h'
   319  000637  00                 	db	0
   320  000638                     STR_8:
   321  000638  6D                 	db	109	;'m'
   322  000639  76                 	db	118	;'v'
   323  00063A  6F                 	db	111	;'o'
   324  00063B  6C                 	db	108	;'l'
   325  00063C  00                 	db	0
   326  00063D                     STR_7:
   327  00063D  6D                 	db	109	;'m'
   328  00063E  63                 	db	99	;'c'
   329  00063F  75                 	db	117	;'u'
   330  000640  72                 	db	114	;'r'
   331  000641  00                 	db	0
   332  000642                     STR_19:
   333  000642  6D                 	db	109	;'m'
   334  000643  70                 	db	112	;'p'
   335  000644  74                 	db	116	;'t'
   336  000645  74                 	db	116	;'t'
   337  000646  00                 	db	0
   338  000647                     STR_5:
   339  000647  6D                 	db	109	;'m'
   340  000648  66                 	db	102	;'f'
   341  000649  72                 	db	114	;'r'
   342  00064A  77                 	db	119	;'w'
   343  00064B  00                 	db	0
   344  00064C                     STR_1:
   345  00064C  66                 	db	102	;'f'
   346  00064D  72                 	db	114	;'r'
   347  00064E  56                 	db	86	;'V'
   348  00064F  00                 	db	0
   349  000650                     STR_2:
   350  000650  63                 	db	99	;'c'
   351  000651  76                 	db	118	;'v'
   352  000652  56                 	db	86	;'V'
   353  000653  00                 	db	0
   354  000654                     STR_10:
   355  000654  6D                 	db	109	;'m'
   356  000655  6C                 	db	108	;'l'
   357  000656  63                 	db	99	;'c'
   358  000657  00                 	db	0
   359  000658                     STR_18:
   360  000658  6D                 	db	109	;'m'
   361  000659  62                 	db	98	;'b'
   362  00065A  64                 	db	100	;'d'
   363  00065B  00                 	db	0
   364  00065C                     STR_17:
   365  00065C  6D                 	db	109	;'m'
   366  00065D  72                 	db	114	;'r'
   367  00065E  64                 	db	100	;'d'
   368  00065F  00                 	db	0
   369  000660                     STR_12:
   370  000660  6D                 	db	109	;'m'
   371  000661  68                 	db	104	;'h'
   372  000662  65                 	db	101	;'e'
   373  000663  00                 	db	0
   374  000664                     STR_14:
   375  000664  6D                 	db	109	;'m'
   376  000665  74                 	db	116	;'t'
   377  000666  66                 	db	102	;'f'
   378  000667  00                 	db	0
   379  000668                     STR_22:
   380  000668  6D                 	db	109	;'m'
   381  000669  6C                 	db	108	;'l'
   382  00066A  67                 	db	103	;'g'
   383  00066B  00                 	db	0
   384  00066C                     STR_20:
   385  00066C  6D                 	db	109	;'m'
   386  00066D  62                 	db	98	;'b'
   387  00066E  70                 	db	112	;'p'
   388  00066F  00                 	db	0
   389  000670                     STR_9:
   390  000670  6D                 	db	109	;'m'
   391  000671  6C                 	db	108	;'l'
   392  000672  70                 	db	112	;'p'
   393  000673  00                 	db	0
   394  000674                     STR_13:
   395  000674  6D                 	db	109	;'m'
   396  000675  74                 	db	116	;'t'
   397  000676  70                 	db	112	;'p'
   398  000677  00                 	db	0
   399  000678                     STR_4:
   400  000678  65                 	db	101	;'e'
   401  000679  72                 	db	114	;'r'
   402  00067A  72                 	db	114	;'r'
   403  00067B  00                 	db	0
   404  00067C                     STR_3:
   405  00067C  74                 	db	116	;'t'
   406  00067D  62                 	db	98	;'b'
   407  00067E  73                 	db	115	;'s'
   408  00067F  00                 	db	0
   409  000680                     STR_21:
   410  000680  6D                 	db	109	;'m'
   411  000681  74                 	db	116	;'t'
   412  000682  73                 	db	115	;'s'
   413  000683  00                 	db	0
   414  000684                     STR_11:
   415  000684  6D                 	db	109	;'m'
   416  000685  72                 	db	114	;'r'
   417  000686  74                 	db	116	;'t'
   418  000687  00                 	db	0
   419                           
   420                           ; #config settings
   421  000688  00                 	db	0	; dummy byte at the end
   422  0000                     
   423                           	psect	cinit
   424  001FBA                     __pcinit:
   425                           	opt stack 0
   426  001FBA                     start_initialization:
   427                           	opt stack 0
   428  001FBA                     __initialization:
   429                           	opt stack 0
   430                           
   431                           ; Initialize objects allocated to BANK0 (1 bytes)
   432                           ; load TBLPTR registers with __pidataBANK0
   433  001FBA  0EDA               	movlw	low __pidataBANK0
   434  001FBC  6EF6               	movwf	tblptrl,c
   435  001FBE  0E23               	movlw	high __pidataBANK0
   436  001FC0  6EF7               	movwf	tblptrh,c
   437  001FC2  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   438  001FC4  6EF8               	movwf	tblptru,c
   439  001FC6  0009               	tblrd		*+	;fetch initializer
   440  001FC8  CFF5 F0FC          	movff	tablat,__pdataBANK0
   441                           
   442                           ; Clear objects allocated to BANK0 (121 bytes)
   443  001FCC  EE00  F060         	lfsr	0,__pbssBANK0
   444  001FD0  0E79               	movlw	121
   445  001FD2                     clear_0:
   446  001FD2  6AEE               	clrf	postinc0,c
   447  001FD4  06E8               	decf	wreg,f,c
   448  001FD6  E1FD               	bnz	clear_0
   449                           
   450                           ; Clear objects allocated to COMRAM (17 bytes)
   451  001FD8  EE00  F046         	lfsr	0,__pbssCOMRAM
   452  001FDC  0E11               	movlw	17
   453  001FDE                     clear_1:
   454  001FDE  6AEE               	clrf	postinc0,c
   455  001FE0  06E8               	decf	wreg,f,c
   456  001FE2  E1FD               	bnz	clear_1
   457  001FE4                     end_of_initialization:
   458                           	opt stack 0
   459  001FE4                     __end_of__initialization:
   460                           	opt stack 0
   461  001FE4  9059               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   462  001FE6  9259               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   463  001FE8  0E00               	movlw	low (__Lsmallconst shr (0+16))
   464  001FEA  6EF8               	movwf	tblptru,c
   465  001FEC  0E06               	movlw	high __Lsmallconst
   466  001FEE  6EF7               	movwf	tblptrh,c
   467  001FF0  0100               	movlb	0
   468  001FF2  EF45  F00C         	goto	_main	;jump to C main() function
   469                           tblptru	equ	0xFF8
   470                           tblptrh	equ	0xFF7
   471                           tblptrl	equ	0xFF6
   472                           tablat	equ	0xFF5
   473                           postinc0	equ	0xFEE
   474                           wreg	equ	0xFE8
   475                           
   476                           	psect	bssCOMRAM
   477  000046                     __pbssCOMRAM:
   478                           	opt stack 0
   479  000046                     _fpeak:
   480                           	opt stack 0
   481  000046                     	ds	2
   482  000048                     _freq:
   483                           	opt stack 0
   484  000048                     	ds	2
   485  00004A                     _temp:
   486                           	opt stack 0
   487  00004A                     	ds	2
   488  00004C                     _curr:
   489                           	opt stack 0
   490  00004C                     	ds	2
   491  00004E                     _refl:
   492                           	opt stack 0
   493  00004E                     	ds	2
   494  000050                     _frwd:
   495                           	opt stack 0
   496  000050                     	ds	2
   497  000052                     _tx_len:
   498                           	opt stack 0
   499  000052                     	ds	1
   500  000053                     _rxb:
   501                           	opt stack 0
   502  000053                     	ds	1
   503  000054                     _err:
   504                           	opt stack 0
   505  000054                     	ds	1
   506  000055                     _lcd:
   507                           	opt stack 0
   508  000055                     	ds	1
   509  000056                     _ptt:
   510                           	opt stack 0
   511  000056                     	ds	1
   512                           tblptru	equ	0xFF8
   513                           tblptrh	equ	0xFF7
   514                           tblptrl	equ	0xFF6
   515                           tablat	equ	0xFF5
   516                           postinc0	equ	0xFEE
   517                           wreg	equ	0xFE8
   518                           
   519                           	psect	bssBANK0
   520  000060                     __pbssBANK0:
   521                           	opt stack 0
   522  000060                     _tmp:
   523                           	opt stack 0
   524  000060                     	ds	4
   525  000064                     ProtectCheck@beepPer:
   526                           	opt stack 0
   527  000064                     	ds	2
   528  000066                     ProtectCheck@bpt:
   529                           	opt stack 0
   530  000066                     	ds	2
   531  000068                     _cvtout:
   532                           	opt stack 0
   533  000068                     	ds	2
   534  00006A                     _frtout:
   535                           	opt stack 0
   536  00006A                     	ds	2
   537  00006C                     _elpf:
   538                           	opt stack 0
   539  00006C                     	ds	2
   540  00006E                     _voltM:
   541                           	opt stack 0
   542  00006E                     	ds	2
   543  000070                     _tempM:
   544                           	opt stack 0
   545  000070                     	ds	2
   546  000072                     _cpeak_old:
   547                           	opt stack 0
   548  000072                     	ds	2
   549  000074                     _rpeak_old:
   550                           	opt stack 0
   551  000074                     	ds	2
   552  000076                     _fpeak_old:
   553                           	opt stack 0
   554  000076                     	ds	2
   555  000078                     _cpeak:
   556                           	opt stack 0
   557  000078                     	ds	2
   558  00007A                     _rpeak:
   559                           	opt stack 0
   560  00007A                     	ds	2
   561  00007C                     _temp_old:
   562                           	opt stack 0
   563  00007C                     	ds	2
   564  00007E                     _volt_old:
   565                           	opt stack 0
   566  00007E                     	ds	2
   567  000080                     _volt_view:
   568                           	opt stack 0
   569  000080                     	ds	2
   570  000082                     _volt:
   571                           	opt stack 0
   572  000082                     	ds	2
   573  000084                     ProtectCheck@bp:
   574                           	opt stack 0
   575  000084                     	ds	1
   576  000085                     PttHoldControl@t:
   577                           	opt stack 0
   578  000085                     	ds	1
   579  000086                     _rx_end:
   580                           	opt stack 0
   581  000086                     	ds	1
   582  000087                     _txb:
   583                           	opt stack 0
   584  000087                     	ds	1
   585  000088                     _ptt_htimer:
   586                           	opt stack 0
   587  000088                     	ds	1
   588  000089                     _bstate_old:
   589                           	opt stack 0
   590  000089                     	ds	1
   591  00008A                     _bstate:
   592                           	opt stack 0
   593  00008A                     	ds	1
   594  00008B                     _band_old:
   595                           	opt stack 0
   596  00008B                     	ds	1
   597  00008C                     _med:
   598                           	opt stack 0
   599  00008C                     	ds	1
   600  00008D                     _fan:
   601                           	opt stack 0
   602  00008D                     	ds	1
   603  00008E                     _maxf:
   604                           	opt stack 0
   605  00008E                     	ds	1
   606  00008F                     _buffTX:
   607                           	opt stack 0
   608  00008F                     	ds	64
   609  0000CF                     _buffRX:
   610                           	opt stack 0
   611  0000CF                     	ds	10
   612                           tblptru	equ	0xFF8
   613                           tblptrh	equ	0xFF7
   614                           tblptrl	equ	0xFF6
   615                           tablat	equ	0xFF5
   616                           postinc0	equ	0xFEE
   617                           wreg	equ	0xFE8
   618                           
   619                           	psect	dataBANK0
   620  0000FC                     __pdataBANK0:
   621                           	opt stack 0
   622  0000FC                     _err_old:
   623                           	opt stack 0
   624  0000FC                     	ds	1
   625                           tblptru	equ	0xFF8
   626                           tblptrh	equ	0xFF7
   627                           tblptrl	equ	0xFF6
   628                           tablat	equ	0xFF5
   629                           postinc0	equ	0xFEE
   630                           wreg	equ	0xFE8
   631                           
   632                           	psect	cstackBANK0
   633  0000F6                     __pcstackBANK0:
   634                           	opt stack 0
   635  0000F6                     EEsetupRead@pW:
   636                           	opt stack 0
   637                           
   638                           ; 2 bytes @ 0x0
   639  0000F6                     	ds	2
   640  0000F8                     EEsetupRead@rW:
   641                           	opt stack 0
   642                           
   643                           ; 2 bytes @ 0x2
   644  0000F8                     	ds	2
   645  0000FA                     EEsetupRead@lW:
   646                           	opt stack 0
   647                           
   648                           ; 2 bytes @ 0x4
   649  0000FA                     	ds	2
   650                           tblptru	equ	0xFF8
   651                           tblptrh	equ	0xFF7
   652                           tblptrl	equ	0xFF6
   653                           tablat	equ	0xFF5
   654                           postinc0	equ	0xFEE
   655                           wreg	equ	0xFE8
   656                           
   657                           	psect	cstackCOMRAM
   658  000001                     __pcstackCOMRAM:
   659                           	opt stack 0
   660  000001                     ??_isr:
   661  000001                     
   662                           ; 1 bytes @ 0x0
   663  000001                     	ds	3
   664  000004                     isr@rx:
   665                           	opt stack 0
   666                           
   667                           ; 1 bytes @ 0x3
   668  000004                     	ds	1
   669  000005                     ??_DelayS:
   670  000005                     ??_DelayMs:
   671  000005                     ??_FanControl:
   672  000005                     ?_ADC:
   673                           	opt stack 0
   674  000005                     ?___lwdiv:
   675                           	opt stack 0
   676  000005                     ?___ftpack:
   677                           	opt stack 0
   678  000005                     ?___ftneg:
   679                           	opt stack 0
   680  000005                     ?___lldiv:
   681                           	opt stack 0
   682  000005                     readEEPROM@addr:
   683                           	opt stack 0
   684  000005                     writeEEPROM@data:
   685                           	opt stack 0
   686  000005                     SetBand@bb:
   687                           	opt stack 0
   688  000005                     AntennaSelect@ant:
   689                           	opt stack 0
   690  000005                     waitAckFromLCD@ack:
   691                           	opt stack 0
   692  000005                     ___lwdiv@dividend:
   693                           	opt stack 0
   694  000005                     ___ftpack@arg:
   695                           	opt stack 0
   696  000005                     ___ftneg@f1:
   697                           	opt stack 0
   698  000005                     ConvertNumber@number:
   699                           	opt stack 0
   700  000005                     ___lldiv@dividend:
   701                           	opt stack 0
   702                           
   703                           ; 4 bytes @ 0x4
   704  000005                     	ds	1
   705  000006                     ?_readEEPROM16:
   706                           	opt stack 0
   707  000006                     writeEEPROM@address:
   708                           	opt stack 0
   709  000006                     DelayMs@ms:
   710                           	opt stack 0
   711                           
   712                           ; 1 bytes @ 0x5
   713  000006                     	ds	1
   714  000007                     ??_ADC:
   715  000007                     writeEEPROM@INTCON_SAVE:
   716                           	opt stack 0
   717  000007                     DelayS@sec:
   718                           	opt stack 0
   719  000007                     ___lwdiv@divisor:
   720                           	opt stack 0
   721                           
   722                           ; 2 bytes @ 0x6
   723  000007                     	ds	1
   724  000008                     ??_readEEPROM16:
   725  000008                     ___ftpack@exp:
   726                           	opt stack 0
   727  000008                     writeEEPROM16@addr:
   728                           	opt stack 0
   729                           
   730                           ; 2 bytes @ 0x7
   731  000008                     	ds	1
   732  000009                     ADC@ch:
   733                           	opt stack 0
   734  000009                     ConvertNumber@conv:
   735                           	opt stack 0
   736  000009                     ___ftpack@sign:
   737                           	opt stack 0
   738  000009                     ___lwdiv@quotient:
   739                           	opt stack 0
   740  000009                     ___lldiv@divisor:
   741                           	opt stack 0
   742                           
   743                           ; 4 bytes @ 0x8
   744  000009                     	ds	1
   745  00000A                     ??___ftpack:
   746  00000A                     ??_SlowControl:
   747  00000A                     writeEEPROM16@data:
   748                           	opt stack 0
   749                           
   750                           ; 1 bytes @ 0x9
   751  00000A                     	ds	1
   752  00000B                     ___lwdiv@counter:
   753                           	opt stack 0
   754  00000B                     readEEPROM16@ee:
   755                           	opt stack 0
   756                           
   757                           ; 2 bytes @ 0xA
   758  00000B                     	ds	1
   759  00000C                     CreateBuffTX@str:
   760                           	opt stack 0
   761                           
   762                           ; 1 bytes @ 0xB
   763  00000C                     	ds	1
   764  00000D                     ?___ftadd:
   765                           	opt stack 0
   766  00000D                     ?___ftmul:
   767                           	opt stack 0
   768  00000D                     ?___lltoft:
   769                           	opt stack 0
   770  00000D                     ?___lwtoft:
   771                           	opt stack 0
   772  00000D                     readEEPROM16@addr:
   773                           	opt stack 0
   774  00000D                     ___lwtoft@c:
   775                           	opt stack 0
   776  00000D                     ___ftadd@f1:
   777                           	opt stack 0
   778  00000D                     ___ftmul@f1:
   779                           	opt stack 0
   780  00000D                     CreateBuffTX@data:
   781                           	opt stack 0
   782  00000D                     ___lldiv@quotient:
   783                           	opt stack 0
   784  00000D                     ___lltoft@c:
   785                           	opt stack 0
   786                           
   787                           ; 4 bytes @ 0xC
   788  00000D                     	ds	3
   789  000010                     ?_fabs:
   790                           	opt stack 0
   791  000010                     ___ftadd@f2:
   792                           	opt stack 0
   793  000010                     ___ftmul@f2:
   794                           	opt stack 0
   795  000010                     fabs@d:
   796                           	opt stack 0
   797                           
   798                           ; 3 bytes @ 0xF
   799  000010                     	ds	1
   800  000011                     ??_CreateBuffTX:
   801  000011                     ??___lltoft:
   802  000011                     ___lldiv@counter:
   803                           	opt stack 0
   804                           
   805                           ; 1 bytes @ 0x10
   806  000011                     	ds	1
   807  000012                     ??_SendStatusToLCD:
   808  000012                     LCDpageSelect@tt:
   809                           	opt stack 0
   810  000012                     LCDversionSend@rep:
   811                           	opt stack 0
   812                           
   813                           ; 1 bytes @ 0x11
   814  000012                     	ds	1
   815  000013                     ??___ftadd:
   816  000013                     ??___ftmul:
   817  000013                     LCDpageSelect@page:
   818                           	opt stack 0
   819  000013                     ___ftge@ff1:
   820                           	opt stack 0
   821                           
   822                           ; 3 bytes @ 0x12
   823  000013                     	ds	1
   824  000014                     ??_SetupMode:
   825                           
   826                           ; 1 bytes @ 0x13
   827  000014                     	ds	1
   828  000015                     ___lltoft@exp:
   829                           	opt stack 0
   830                           
   831                           ; 1 bytes @ 0x14
   832  000015                     	ds	1
   833  000016                     ___ftadd@sign:
   834                           	opt stack 0
   835  000016                     ___ftmul@exp:
   836                           	opt stack 0
   837  000016                     ___ftge@ff2:
   838                           	opt stack 0
   839                           
   840                           ; 3 bytes @ 0x15
   841  000016                     	ds	1
   842  000017                     ___ftadd@exp2:
   843                           	opt stack 0
   844  000017                     ___ftmul@sign:
   845                           	opt stack 0
   846                           
   847                           ; 1 bytes @ 0x16
   848  000017                     	ds	1
   849  000018                     ___ftadd@exp1:
   850                           	opt stack 0
   851  000018                     ___ftmul@f3_as_product:
   852                           	opt stack 0
   853                           
   854                           ; 3 bytes @ 0x17
   855  000018                     	ds	1
   856  000019                     ??___ftge:
   857  000019                     ?___ftsub:
   858                           	opt stack 0
   859  000019                     ___ftsub@f1:
   860                           	opt stack 0
   861                           
   862                           ; 3 bytes @ 0x18
   863  000019                     	ds	3
   864  00001C                     FreqMeasure@jj:
   865                           	opt stack 0
   866  00001C                     ___ftsub@f2:
   867                           	opt stack 0
   868                           
   869                           ; 3 bytes @ 0x1B
   870  00001C                     	ds	1
   871  00001D                     FreqMeasure@err:
   872                           	opt stack 0
   873                           
   874                           ; 1 bytes @ 0x1C
   875  00001D                     	ds	1
   876  00001E                     FreqMeasure@tmr:
   877                           	opt stack 0
   878  00001E                     SetupMode@pW:
   879                           	opt stack 0
   880                           
   881                           ; 2 bytes @ 0x1D
   882  00001E                     	ds	1
   883  00001F                     ?_sqrt:
   884                           	opt stack 0
   885  00001F                     sqrt@a:
   886                           	opt stack 0
   887                           
   888                           ; 3 bytes @ 0x1E
   889  00001F                     	ds	1
   890  000020                     SetupMode@rW:
   891                           	opt stack 0
   892                           
   893                           ; 2 bytes @ 0x1F
   894  000020                     	ds	2
   895  000022                     ??_sqrt:
   896  000022                     SetupMode@lW:
   897                           	opt stack 0
   898                           
   899                           ; 2 bytes @ 0x21
   900  000022                     	ds	2
   901  000024                     SetupMode@eadr:
   902                           	opt stack 0
   903                           
   904                           ; 1 bytes @ 0x23
   905  000024                     	ds	1
   906  000025                     sqrt@z:
   907                           	opt stack 0
   908                           
   909                           ; 3 bytes @ 0x24
   910  000025                     	ds	3
   911  000028                     sqrt@i:
   912                           	opt stack 0
   913                           
   914                           ; 1 bytes @ 0x27
   915  000028                     	ds	1
   916  000029                     sqrt@q:
   917                           	opt stack 0
   918                           
   919                           ; 3 bytes @ 0x28
   920  000029                     	ds	3
   921  00002C                     sqrt@x:
   922                           	opt stack 0
   923                           
   924                           ; 3 bytes @ 0x2B
   925  00002C                     	ds	3
   926  00002F                     ?___fttol:
   927                           	opt stack 0
   928  00002F                     ___fttol@f1:
   929                           	opt stack 0
   930                           
   931                           ; 3 bytes @ 0x2E
   932  00002F                     	ds	4
   933  000033                     ??___fttol:
   934                           
   935                           ; 1 bytes @ 0x32
   936  000033                     	ds	5
   937  000038                     ___fttol@sign1:
   938                           	opt stack 0
   939                           
   940                           ; 1 bytes @ 0x37
   941  000038                     	ds	1
   942  000039                     ___fttol@lval:
   943                           	opt stack 0
   944                           
   945                           ; 4 bytes @ 0x38
   946  000039                     	ds	4
   947  00003D                     ___fttol@exp1:
   948                           	opt stack 0
   949                           
   950                           ; 1 bytes @ 0x3C
   951  00003D                     	ds	1
   952  00003E                     ??_EEsetupRead:
   953                           
   954                           ; 1 bytes @ 0x3D
   955  00003E                     	ds	8
   956  000046                     tblptru	equ	0xFF8
   957                           tblptrh	equ	0xFF7
   958                           tblptrl	equ	0xFF6
   959                           tablat	equ	0xFF5
   960                           postinc0	equ	0xFEE
   961                           wreg	equ	0xFE8
   962                           
   963                           ; 1 bytes @ 0x45
   964 ;;
   965 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   966 ;;
   967 ;; *************** function _main *****************
   968 ;; Defined at:
   969 ;;		line 71 in file "../main.c"
   970 ;; Parameters:    Size  Location     Type
   971 ;;		None
   972 ;; Auto vars:     Size  Location     Type
   973 ;;		None
   974 ;; Return value:  Size  Location     Type
   975 ;;                  1    wreg      void 
   976 ;; Registers used:
   977 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   978 ;; Tracked objects:
   979 ;;		On entry : 0/0
   980 ;;		On exit  : 3F/0
   981 ;;		Unchanged: 0/0
   982 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   983 ;;      Params:         0       0       0       0       0       0       0
   984 ;;      Locals:         0       0       0       0       0       0       0
   985 ;;      Temps:          0       0       0       0       0       0       0
   986 ;;      Totals:         0       0       0       0       0       0       0
   987 ;;Total ram usage:        0 bytes
   988 ;; Hardware stack levels required when called:    9
   989 ;; This function calls:
   990 ;;		_ADCmeasure
   991 ;;		_AntennaSelect
   992 ;;		_Beep
   993 ;;		_DelayS
   994 ;;		_EEmbandRead
   995 ;;		_EEsetupRead
   996 ;;		_LCDpageSelect
   997 ;;		_LCDversionSend
   998 ;;		_ProtectCheck
   999 ;;		_ReadStatusFromLCD
  1000 ;;		_SendStatusToLCD
  1001 ;;		_SetBand
  1002 ;;		_SlowControl
  1003 ;; This function is called by:
  1004 ;;		Startup code after reset
  1005 ;; This function uses a non-reentrant model
  1006 ;;
  1007                           
  1008                           	psect	text0
  1009  00188A                     __ptext0:
  1010                           	opt stack 0
  1011  00188A                     _main:
  1012                           	opt stack 0
  1013  00188A  FFFF               	dw	65535	; assembler added errata NOP
  1014                           
  1015                           ;main.c: 73: (INTCONbits.GIE = 0);
  1016                           
  1017                           ;incstack = 0
  1018  00188C  9EF2               	bcf	intcon,7,c	;volatile
  1019                           
  1020                           ;main.c: 74: STKPTR = 0x00;
  1021  00188E  6AFC               	clrf	stkptr,c	;volatile
  1022                           
  1023                           ;main.c: 76: CMCON = 0x07;
  1024  001890  0E07               	movlw	7
  1025  001892  6EB4               	movwf	4020,c	;volatile
  1026                           
  1027                           ;main.c: 77: CCP1CON = 0x00;
  1028  001894  6ABD               	clrf	4029,c	;volatile
  1029                           
  1030                           ;main.c: 79: ADCON0 = 0b10000000;
  1031  001896  0E80               	movlw	128
  1032  001898  6EC2               	movwf	4034,c	;volatile
  1033                           
  1034                           ;main.c: 80: ADCON1 = 0b11001001;
  1035  00189A  0EC9               	movlw	201
  1036  00189C  6EC1               	movwf	4033,c	;volatile
  1037                           
  1038                           ;main.c: 82: TRISA = 0b00111111;
  1039  00189E  0E3F               	movlw	63
  1040  0018A0  6E92               	movwf	3986,c	;volatile
  1041                           
  1042                           ;main.c: 83: TRISB = 0b11000000;
  1043  0018A2  0EC0               	movlw	192
  1044  0018A4  6E93               	movwf	3987,c	;volatile
  1045                           
  1046                           ;main.c: 84: TRISC = 0b10000001;
  1047  0018A6  0E81               	movlw	129
  1048  0018A8  6E94               	movwf	3988,c	;volatile
  1049                           
  1050                           ;main.c: 85: TRISD = 0b00000000;
  1051  0018AA  6A95               	clrf	3989,c	;volatile
  1052                           
  1053                           ;main.c: 86: TRISE = 0b00000001;
  1054  0018AC  0E01               	movlw	1
  1055  0018AE  6E96               	movwf	3990,c	;volatile
  1056                           
  1057                           ;main.c: 88: PORTA = 0x00; PORTB = 0x00; PORTC = 0x00; PORTD = 0x00; PORTE = 0x00;
  1058  0018B0  6A80               	clrf	3968,c	;volatile
  1059  0018B2  6A81               	clrf	3969,c	;volatile
  1060  0018B4  6A82               	clrf	3970,c	;volatile
  1061  0018B6  6A83               	clrf	3971,c	;volatile
  1062  0018B8  6A84               	clrf	3972,c	;volatile
  1063                           
  1064                           ;main.c: 89: LATA = 0x00; LATB = 0x00; LATC = 0x00; LATD = 0x00; LATE = 0x00;
  1065  0018BA  6A89               	clrf	3977,c	;volatile
  1066  0018BC  6A8A               	clrf	3978,c	;volatile
  1067  0018BE  6A8B               	clrf	3979,c	;volatile
  1068  0018C0  6A8C               	clrf	3980,c	;volatile
  1069  0018C2  6A8D               	clrf	3981,c	;volatile
  1070                           
  1071                           ;main.c: 91: RCSTA = 0b10010000;
  1072  0018C4  0E90               	movlw	144
  1073  0018C6  6EAB               	movwf	4011,c	;volatile
  1074                           
  1075                           ;main.c: 92: TXSTA = 0b00100100;
  1076  0018C8  0E24               	movlw	36
  1077  0018CA  6EAC               	movwf	4012,c	;volatile
  1078                           
  1079                           ;main.c: 93: SPBRG = 21;
  1080  0018CC  0E15               	movlw	21
  1081  0018CE  6EAF               	movwf	4015,c	;volatile
  1082                           
  1083                           ;main.c: 95: T0CON = 0b10000000;
  1084  0018D0  0E80               	movlw	128
  1085  0018D2  6ED5               	movwf	4053,c	;volatile
  1086                           
  1087                           ;main.c: 97: T1CON = 0b10000111;
  1088  0018D4  0E87               	movlw	135
  1089  0018D6  6ECD               	movwf	4045,c	;volatile
  1090                           
  1091                           ;main.c: 99: T3CON = 0b10110001;
  1092  0018D8  0EB1               	movlw	177
  1093  0018DA  6EB1               	movwf	4017,c	;volatile
  1094                           
  1095                           ;main.c: 101: WDTCON = 0x1;
  1096  0018DC  0E01               	movlw	1
  1097  0018DE  6ED1               	movwf	4049,c	;volatile
  1098                           
  1099                           ;main.c: 103: INTCON2bits.RBPU = 1;
  1100  0018E0  8EF1               	bsf	intcon2,7,c	;volatile
  1101                           
  1102                           ;main.c: 105: PIE1bits.RCIE = 1;
  1103  0018E2  8A9D               	bsf	3997,5,c	;volatile
  1104                           
  1105                           ;main.c: 106: INTCONbits.PEIE = 1;
  1106  0018E4  8CF2               	bsf	intcon,6,c	;volatile
  1107                           
  1108                           ;main.c: 107: INTCONbits.GIE = 1;
  1109  0018E6  8EF2               	bsf	intcon,7,c	;volatile
  1110                           
  1111                           ;main.c: 109: EEsetupRead();
  1112  0018E8  EC38  F005         	call	_EEsetupRead	;wreg free
  1113                           
  1114                           ; BSR set to: 0
  1115                           ;main.c: 110: EEmbandRead();
  1116  0018EC  EC6A  F010         	call	_EEmbandRead	;wreg free
  1117                           
  1118                           ; BSR set to: 0
  1119                           ;main.c: 112: if (logo)
  1120  0018F0  51ED               	movf	_logo& (0+255),w,b	;volatile
  1121  0018F2  E00A               	bz	l4632
  1122                           
  1123                           ; BSR set to: 0
  1124                           ;main.c: 113: {;main.c: 114: if (!LCDpageSelect(0xA1)) {asm("reset");}
  1125  0018F4  0EA1               	movlw	161
  1126  0018F6  ECF9  F00E         	call	_LCDpageSelect
  1127  0018FA  0900               	iorlw	0
  1128  0018FC  E101               	bnz	l4630
  1129  0018FE  00FF               	reset		;# 
  1130  001900                     l4630:
  1131                           
  1132                           ;main.c: 115: DelayS(3);
  1133  001900  0E03               	movlw	3
  1134  001902  EC4F  F010         	call	_DelayS
  1135                           
  1136                           ;main.c: 116: }
  1137  001906  D003               	goto	l4634
  1138  001908                     l4632:
  1139                           
  1140                           ; BSR set to: 0
  1141                           ;main.c: 117: else DelayS(1);
  1142  001908  0E01               	movlw	1
  1143  00190A  EC4F  F010         	call	_DelayS
  1144  00190E                     l4634:
  1145  00190E  FFFF               	dw	65535	; assembler added errata NOP
  1146                           
  1147                           ;main.c: 119: if (!LCDpageSelect(0xA0)) {asm("reset");}
  1148  001910  0EA0               	movlw	160
  1149  001912  ECF9  F00E         	call	_LCDpageSelect
  1150  001916  0900               	iorlw	0
  1151  001918  E101               	bnz	l4638
  1152  00191A  00FF               	reset		;# 
  1153  00191C                     l4638:
  1154                           
  1155                           ;main.c: 121: LCDversionSend();
  1156  00191C  ECDF  F010         	call	_LCDversionSend	;wreg free
  1157                           
  1158                           ;main.c: 123: SetBand();
  1159  001920  EC7B  F00E         	call	_SetBand	;wreg free
  1160                           
  1161                           ;main.c: 124: AntennaSelect(band >> 3);
  1162  001924  3857               	swapf	_band,w,c	;volatile
  1163  001926  46E8               	rlncf	wreg,f,c
  1164  001928  0B1F               	andlw	31
  1165  00192A  ECBB  F011         	call	_AntennaSelect
  1166                           
  1167                           ;main.c: 125: Beep();
  1168  00192E  EC77  F011         	call	_Beep	;wreg free
  1169  001932                     l4646:
  1170  001932  FFFF               	dw	65535	; assembler added errata NOP
  1171                           
  1172                           ;main.c: 128: {;main.c: 129: ADCmeasure();
  1173  001934  ECFE  F00C         	call	_ADCmeasure	;wreg free
  1174                           
  1175                           ; BSR set to: 0
  1176                           ;main.c: 130: ProtectCheck();
  1177  001938  EC26  F00A         	call	_ProtectCheck	;wreg free
  1178                           
  1179                           ; BSR set to: 0
  1180                           ;main.c: 132: SlowControl();
  1181  00193C  EC77  F00B         	call	_SlowControl	;wreg free
  1182                           
  1183                           ;main.c: 134: SendStatusToLCD();
  1184  001940  ECD7  F006         	call	_SendStatusToLCD	;wreg free
  1185                           
  1186                           ; BSR set to: 0
  1187                           ;main.c: 135: ReadStatusFromLCD();
  1188  001944  EC99  F00A         	call	_ReadStatusFromLCD	;wreg free
  1189  001948  D7F4               	goto	l4646
  1190  00194A                     __end_of_main:
  1191                           	opt stack 0
  1192                           stkptr	equ	0xFFC
  1193                           tblptru	equ	0xFF8
  1194                           tblptrh	equ	0xFF7
  1195                           tblptrl	equ	0xFF6
  1196                           tablat	equ	0xFF5
  1197                           intcon	equ	0xFF2
  1198                           intcon2	equ	0xFF1
  1199                           postinc0	equ	0xFEE
  1200                           wreg	equ	0xFE8
  1201                           
  1202 ;; *************** function _SlowControl *****************
  1203 ;; Defined at:
  1204 ;;		line 32 in file "../adc.h"
  1205 ;; Parameters:    Size  Location     Type
  1206 ;;		None
  1207 ;; Auto vars:     Size  Location     Type
  1208 ;;		None
  1209 ;; Return value:  Size  Location     Type
  1210 ;;                  1    wreg      void 
  1211 ;; Registers used:
  1212 ;;		wreg, status,2, status,0, cstack
  1213 ;; Tracked objects:
  1214 ;;		On entry : 3F/0
  1215 ;;		On exit  : 3F/0
  1216 ;;		Unchanged: 0/0
  1217 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1218 ;;      Params:         0       0       0       0       0       0       0
  1219 ;;      Locals:         0       0       0       0       0       0       0
  1220 ;;      Temps:          6       0       0       0       0       0       0
  1221 ;;      Totals:         6       0       0       0       0       0       0
  1222 ;;Total ram usage:        6 bytes
  1223 ;; Hardware stack levels used:    1
  1224 ;; Hardware stack levels required when called:    4
  1225 ;; This function calls:
  1226 ;;		_ADC
  1227 ;;		_FanControl
  1228 ;;		_PttHoldControl
  1229 ;; This function is called by:
  1230 ;;		_main
  1231 ;; This function uses a non-reentrant model
  1232 ;;
  1233                           
  1234                           	psect	text1
  1235  0016EE                     __ptext1:
  1236                           	opt stack 0
  1237  0016EE                     _SlowControl:
  1238                           	opt stack 0
  1239  0016EE  FFFF               	dw	65535	; assembler added errata NOP
  1240                           
  1241                           ; BSR set to: 0
  1242                           ;adc.h: 34: if (!PIR2bits.TMR3IF) return;
  1243                           
  1244                           ; BSR set to: 0
  1245                           ;incstack = 0
  1246  0016F0  A2A1               	btfss	4001,1,c	;volatile
  1247  0016F2  D062               	goto	l458
  1248                           
  1249                           ; BSR set to: 0
  1250                           ;adc.h: 35: ((void)(TMR3H=((0x0BFF)>>8),TMR3L=((0x0BFF)&0xFF)));
  1251  0016F4  0E0B               	movlw	11
  1252  0016F6  6EB3               	movwf	4019,c	;volatile
  1253                           
  1254                           ; BSR set to: 0
  1255  0016F8  68B2               	setf	4018,c	;volatile
  1256                           
  1257                           ; BSR set to: 0
  1258                           ;adc.h: 36: PIR2bits.TMR3IF = 0;
  1259  0016FA  92A1               	bcf	4001,1,c	;volatile
  1260                           
  1261                           ; BSR set to: 0
  1262                           ;adc.h: 38: PttHoldControl();
  1263  0016FC  EC83  F010         	call	_PttHoldControl	;wreg free
  1264                           
  1265                           ; BSR set to: 0
  1266                           ;adc.h: 39: FanControl();
  1267  001700  ECBB  F00E         	call	_FanControl	;wreg free
  1268                           
  1269                           ; BSR set to: 0
  1270                           ;adc.h: 41: voltM += volt;
  1271  001704  5182               	movf	_volt& (0+255),w,b	;volatile
  1272  001706  276E               	addwf	_voltM& (0+255),f,b	;volatile
  1273  001708  5183               	movf	(_volt+1)& (0+255),w,b	;volatile
  1274  00170A  236F               	addwfc	(_voltM+1)& (0+255),f,b	;volatile
  1275                           
  1276                           ; BSR set to: 0
  1277                           ;adc.h: 42: tempM += ADC(3);
  1278  00170C  0E03               	movlw	3
  1279  00170E  EC9B  F010         	call	_ADC
  1280  001712  5005               	movf	?_ADC,w,c
  1281  001714  0100               	movlb	0	; () banked
  1282  001716  2770               	addwf	_tempM& (0+255),f,b	;volatile
  1283  001718  5006               	movf	?_ADC+1,w,c
  1284  00171A  2371               	addwfc	(_tempM+1)& (0+255),f,b	;volatile
  1285                           
  1286                           ; BSR set to: 0
  1287                           ;adc.h: 44: if (++med & 0x10)
  1288  00171C  2B8C               	incf	_med& (0+255),f,b	;volatile
  1289  00171E  A98C               	btfss	_med& (0+255),4,b	;volatile
  1290  001720  D04B               	goto	l458
  1291                           
  1292                           ; BSR set to: 0
  1293                           ;adc.h: 45: {;adc.h: 47: temp = tempM >> 4;
  1294  001722  C070  F00A         	movff	_tempM,??_SlowControl	;volatile
  1295  001726  C071  F00B         	movff	_tempM+1,??_SlowControl+1	;volatile
  1296  00172A  0E04               	movlw	4
  1297  00172C  6E0C               	movwf	(??_SlowControl+2)& (0+255),c
  1298  00172E                     u3885:
  1299  00172E  FFFF               	dw	65535	; assembler added errata NOP
  1300  001730  90D8               	bcf	status,0,c
  1301  001732  320B               	rrcf	??_SlowControl+1,f,c
  1302  001734  320A               	rrcf	??_SlowControl,f,c
  1303  001736  2E0C               	decfsz	(??_SlowControl+2)& (0+255),f,c
  1304  001738  D7FA               	goto	u3885
  1305  00173A  C00A  F04A         	movff	??_SlowControl,_temp	;volatile
  1306  00173E  C00B  F04B         	movff	??_SlowControl+1,_temp+1	;volatile
  1307                           
  1308                           ;adc.h: 48: if (temp >= (560 - sensor)) temp = (temp - (560 - sensor)) >> 1;
  1309  001742  0E30               	movlw	48
  1310  001744  6E0A               	movwf	??_SlowControl& (0+255),c
  1311  001746  0E02               	movlw	2
  1312  001748  6E0B               	movwf	(??_SlowControl+1)& (0+255),c
  1313  00174A  51EC               	movf	_sensor& (0+255),w,b	;volatile
  1314  00174C  5E0A               	subwf	??_SlowControl,f,c
  1315  00174E  0E00               	movlw	0
  1316  001750  5A0B               	subwfb	??_SlowControl+1,f,c
  1317  001752  500A               	movf	??_SlowControl,w,c
  1318  001754  5C4A               	subwf	_temp,w,c	;volatile
  1319  001756  500B               	movf	??_SlowControl+1,w,c
  1320  001758  584B               	subwfb	_temp+1,w,c	;volatile
  1321  00175A  E316               	bnc	l460
  1322                           
  1323                           ; BSR set to: 0
  1324  00175C  0ED0               	movlw	208
  1325  00175E  6E0A               	movwf	??_SlowControl& (0+255),c
  1326  001760  0EFD               	movlw	253
  1327  001762  6E0B               	movwf	(??_SlowControl+1)& (0+255),c
  1328  001764  51EC               	movf	_sensor& (0+255),w,b	;volatile
  1329  001766  244A               	addwf	_temp,w,c	;volatile
  1330  001768  6E0C               	movwf	(??_SlowControl+2)& (0+255),c
  1331  00176A  0E00               	movlw	0
  1332  00176C  204B               	addwfc	_temp+1,w,c	;volatile
  1333  00176E  6E0D               	movwf	(??_SlowControl+3)& (0+255),c
  1334  001770  500A               	movf	??_SlowControl,w,c
  1335  001772  260C               	addwf	??_SlowControl+2,f,c
  1336  001774  500B               	movf	??_SlowControl+1,w,c
  1337  001776  220D               	addwfc	??_SlowControl+3,f,c
  1338  001778  90D8               	bcf	status,0,c
  1339  00177A  300D               	rrcf	??_SlowControl+3,w,c
  1340  00177C  6E0E               	movwf	(??_SlowControl+4)& (0+255),c
  1341  00177E  300C               	rrcf	??_SlowControl+2,w,c
  1342  001780  6E4A               	movwf	_temp,c	;volatile
  1343  001782  C00E  F04B         	movff	??_SlowControl+4,_temp+1	;volatile
  1344  001786  D002               	goto	l3736
  1345  001788                     l460:
  1346                           
  1347                           ; BSR set to: 0
  1348                           ;adc.h: 49: else temp = 0;
  1349  001788  6A4A               	clrf	_temp,c	;volatile
  1350  00178A  6A4B               	clrf	_temp+1,c	;volatile
  1351  00178C                     l3736:
  1352  00178C  FFFF               	dw	65535	; assembler added errata NOP
  1353                           
  1354                           ; BSR set to: 0
  1355                           ;adc.h: 51: volt_view = voltM >> 4;
  1356  00178E  C06E  F00A         	movff	_voltM,??_SlowControl	;volatile
  1357  001792  C06F  F00B         	movff	_voltM+1,??_SlowControl+1	;volatile
  1358  001796  0E04               	movlw	4
  1359  001798  6E0C               	movwf	(??_SlowControl+2)& (0+255),c
  1360  00179A                     u3905:
  1361  00179A  FFFF               	dw	65535	; assembler added errata NOP
  1362  00179C  90D8               	bcf	status,0,c
  1363  00179E  320B               	rrcf	??_SlowControl+1,f,c
  1364  0017A0  320A               	rrcf	??_SlowControl,f,c
  1365  0017A2  2E0C               	decfsz	(??_SlowControl+2)& (0+255),f,c
  1366  0017A4  D7FA               	goto	u3905
  1367  0017A6  C00A  F080         	movff	??_SlowControl,_volt_view	;volatile
  1368  0017AA  C00B  F081         	movff	??_SlowControl+1,_volt_view+1	;volatile
  1369                           
  1370                           ; BSR set to: 0
  1371                           ;adc.h: 53: med = 0; tempM = 0; voltM = 0;
  1372  0017AE  6B8C               	clrf	_med& (0+255),b	;volatile
  1373                           
  1374                           ; BSR set to: 0
  1375  0017B0  6B70               	clrf	_tempM& (0+255),b	;volatile
  1376  0017B2  6B71               	clrf	(_tempM+1)& (0+255),b	;volatile
  1377                           
  1378                           ; BSR set to: 0
  1379  0017B4  6B6E               	clrf	_voltM& (0+255),b	;volatile
  1380  0017B6  6B6F               	clrf	(_voltM+1)& (0+255),b	;volatile
  1381  0017B8                     l458:
  1382  0017B8  FFFF               	dw	65535	; assembler added errata NOP
  1383                           
  1384                           ; BSR set to: 0
  1385  0017BA  0012               	return		;funcret
  1386  0017BC  FFFF               	dw	65535	; errata NOP
  1387  0017BE                     __end_of_SlowControl:
  1388                           	opt stack 0
  1389                           stkptr	equ	0xFFC
  1390                           tblptru	equ	0xFF8
  1391                           tblptrh	equ	0xFF7
  1392                           tblptrl	equ	0xFF6
  1393                           tablat	equ	0xFF5
  1394                           intcon	equ	0xFF2
  1395                           intcon2	equ	0xFF1
  1396                           postinc0	equ	0xFEE
  1397                           wreg	equ	0xFE8
  1398                           status	equ	0xFD8
  1399                           
  1400 ;; *************** function _PttHoldControl *****************
  1401 ;; Defined at:
  1402 ;;		line 219 in file "../digital.h"
  1403 ;; Parameters:    Size  Location     Type
  1404 ;;		None
  1405 ;; Auto vars:     Size  Location     Type
  1406 ;;		None
  1407 ;; Return value:  Size  Location     Type
  1408 ;;                  1    wreg      void 
  1409 ;; Registers used:
  1410 ;;		wreg, status,2, status,0
  1411 ;; Tracked objects:
  1412 ;;		On entry : 3F/0
  1413 ;;		On exit  : 3F/0
  1414 ;;		Unchanged: 0/0
  1415 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1416 ;;      Params:         0       0       0       0       0       0       0
  1417 ;;      Locals:         0       0       0       0       0       0       0
  1418 ;;      Temps:          0       0       0       0       0       0       0
  1419 ;;      Totals:         0       0       0       0       0       0       0
  1420 ;;Total ram usage:        0 bytes
  1421 ;; Hardware stack levels used:    1
  1422 ;; Hardware stack levels required when called:    3
  1423 ;; This function calls:
  1424 ;;		Nothing
  1425 ;; This function is called by:
  1426 ;;		_SlowControl
  1427 ;; This function uses a non-reentrant model
  1428 ;;
  1429                           
  1430                           	psect	text2
  1431  002106                     __ptext2:
  1432                           	opt stack 0
  1433  002106                     _PttHoldControl:
  1434                           	opt stack 0
  1435  002106  FFFF               	dw	65535	; assembler added errata NOP
  1436                           
  1437                           ; BSR set to: 0
  1438                           ;digital.h: 221: static unsigned char t = 0;;digital.h: 223: if (ptt_hold == 0) return;
  1439                           
  1440                           ; BSR set to: 0
  1441                           ;incstack = 0
  1442  002108  51EB               	movf	_ptt_hold& (0+255),w,b	;volatile
  1443  00210A  E012               	bz	l406
  1444                           
  1445                           ; BSR set to: 0
  1446                           ;digital.h: 224: if ((ptt == 0) || (fpeak < 520))
  1447  00210C  5056               	movf	_ptt,w,c	;volatile
  1448  00210E  E005               	bz	u3490
  1449                           
  1450                           ; BSR set to: 0
  1451  002110  0E08               	movlw	8
  1452  002112  5C46               	subwf	_fpeak,w,c	;volatile
  1453  002114  0E02               	movlw	2
  1454  002116  5847               	subwfb	_fpeak+1,w,c	;volatile
  1455  002118  E203               	bc	l3460
  1456  00211A                     u3490:
  1457                           
  1458                           ; BSR set to: 0
  1459                           ;digital.h: 225: {;digital.h: 226: ptt_htimer = 0; t = 0;
  1460  00211A  6B88               	clrf	_ptt_htimer& (0+255),b	;volatile
  1461  00211C  6B85               	clrf	PttHoldControl@t& (0+255),b
  1462                           
  1463                           ;digital.h: 227: return;
  1464  00211E  D008               	goto	l406
  1465  002120                     l3460:
  1466                           
  1467                           ; BSR set to: 0
  1468                           ;digital.h: 228: };digital.h: 230: if (++t < 20) return;
  1469  002120  2B85               	incf	PttHoldControl@t& (0+255),f,b
  1470  002122  0E14               	movlw	20
  1471  002124  6185               	cpfslt	PttHoldControl@t& (0+255),b
  1472  002126  D001               	goto	l410
  1473  002128  D003               	goto	l406
  1474  00212A                     l410:
  1475  00212A  FFFF               	dw	65535	; assembler added errata NOP
  1476                           
  1477                           ; BSR set to: 0
  1478                           ;digital.h: 231: t = 0;
  1479  00212C  6B85               	clrf	PttHoldControl@t& (0+255),b
  1480                           
  1481                           ; BSR set to: 0
  1482                           ;digital.h: 232: ptt_htimer++;
  1483  00212E  2B88               	incf	_ptt_htimer& (0+255),f,b	;volatile
  1484  002130                     l406:
  1485  002130  FFFF               	dw	65535	; assembler added errata NOP
  1486                           
  1487                           ; BSR set to: 0
  1488  002132  0012               	return		;funcret
  1489  002134  FFFF               	dw	65535	; errata NOP
  1490  002136                     __end_of_PttHoldControl:
  1491                           	opt stack 0
  1492                           stkptr	equ	0xFFC
  1493                           tblptru	equ	0xFF8
  1494                           tblptrh	equ	0xFF7
  1495                           tblptrl	equ	0xFF6
  1496                           tablat	equ	0xFF5
  1497                           intcon	equ	0xFF2
  1498                           intcon2	equ	0xFF1
  1499                           postinc0	equ	0xFEE
  1500                           wreg	equ	0xFE8
  1501                           status	equ	0xFD8
  1502                           
  1503 ;; *************** function _FanControl *****************
  1504 ;; Defined at:
  1505 ;;		line 185 in file "../digital.h"
  1506 ;; Parameters:    Size  Location     Type
  1507 ;;		None
  1508 ;; Auto vars:     Size  Location     Type
  1509 ;;		None
  1510 ;; Return value:  Size  Location     Type
  1511 ;;                  1    wreg      void 
  1512 ;; Registers used:
  1513 ;;		wreg, status,2, status,0
  1514 ;; Tracked objects:
  1515 ;;		On entry : 3F/0
  1516 ;;		On exit  : 3F/0
  1517 ;;		Unchanged: 0/0
  1518 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1519 ;;      Params:         0       0       0       0       0       0       0
  1520 ;;      Locals:         0       0       0       0       0       0       0
  1521 ;;      Temps:          2       0       0       0       0       0       0
  1522 ;;      Totals:         2       0       0       0       0       0       0
  1523 ;;Total ram usage:        2 bytes
  1524 ;; Hardware stack levels used:    1
  1525 ;; Hardware stack levels required when called:    3
  1526 ;; This function calls:
  1527 ;;		Nothing
  1528 ;; This function is called by:
  1529 ;;		_SlowControl
  1530 ;; This function uses a non-reentrant model
  1531 ;;
  1532                           
  1533                           	psect	text3
  1534  001D76                     __ptext3:
  1535                           	opt stack 0
  1536  001D76                     _FanControl:
  1537                           	opt stack 0
  1538  001D76  FFFF               	dw	65535	; assembler added errata NOP
  1539                           
  1540                           ; BSR set to: 0
  1541                           
  1542                           ; BSR set to: 0
  1543                           ;incstack = 0
  1544  001D78  0004               	clrwdt		;# 
  1545                           
  1546                           ;digital.h: 189: if (err & 0x20)
  1547  001D7A  AA54               	btfss	_err,5,c	;volatile
  1548  001D7C  D011               	goto	l3428
  1549                           
  1550                           ;digital.h: 190: {;digital.h: 191: LATCbits.LC1 = 1; fan = 1;
  1551  001D7E  828B               	bsf	3979,1,c	;volatile
  1552  001D80  0E01               	movlw	1
  1553  001D82  0100               	movlb	0	; () banked
  1554  001D84  6F8D               	movwf	_fan& (0+255),b	;volatile
  1555                           
  1556                           ; BSR set to: 0
  1557                           ;digital.h: 192: if (temp <= (max_temp - hystT)) err &=~ 0x20;
  1558  001D86  51F0               	movf	_hystT& (0+255),w,b	;volatile
  1559  001D88  5DE1               	subwf	_max_temp& (0+255),w,b	;volatile
  1560  001D8A  6E05               	movwf	??_FanControl& (0+255),c
  1561  001D8C  0E00               	movlw	0
  1562  001D8E  59E2               	subwfb	(_max_temp+1)& (0+255),w,b	;volatile
  1563  001D90  6E06               	movwf	(??_FanControl+1)& (0+255),c
  1564  001D92  504A               	movf	_temp,w,c	;volatile
  1565  001D94  5C05               	subwf	??_FanControl,w,c
  1566  001D96  504B               	movf	_temp+1,w,c	;volatile
  1567  001D98  5806               	subwfb	??_FanControl+1,w,c
  1568  001D9A  E328               	bnc	l394
  1569                           
  1570                           ; BSR set to: 0
  1571  001D9C  9A54               	bcf	_err,5,c	;volatile
  1572  001D9E  D026               	goto	l394
  1573  001DA0                     l3428:
  1574  001DA0  FFFF               	dw	65535	; assembler added errata NOP
  1575                           
  1576                           ;digital.h: 194: };digital.h: 196: if (temp >= max_tFAN)
  1577  001DA2  0100               	movlb	0	; () banked
  1578  001DA4  51DF               	movf	_max_tFAN& (0+255),w,b	;volatile
  1579  001DA6  5C4A               	subwf	_temp,w,c	;volatile
  1580  001DA8  51E0               	movf	(_max_tFAN+1)& (0+255),w,b	;volatile
  1581  001DAA  584B               	subwfb	_temp+1,w,c	;volatile
  1582  001DAC  E305               	bnc	l3438
  1583                           
  1584                           ; BSR set to: 0
  1585                           ;digital.h: 197: {;digital.h: 198: LATCbits.LC1 = 1; fan = 1;
  1586  001DAE  828B               	bsf	3979,1,c	;volatile
  1587                           
  1588                           ; BSR set to: 0
  1589  001DB0  0E01               	movlw	1
  1590  001DB2  6F8D               	movwf	_fan& (0+255),b	;volatile
  1591                           
  1592                           ;digital.h: 199: maxf = 1;
  1593  001DB4  6F8E               	movwf	_maxf& (0+255),b	;volatile
  1594  001DB6  D01A               	goto	l394
  1595  001DB8                     l3438:
  1596                           
  1597                           ; BSR set to: 0
  1598                           ;digital.h: 202: else;digital.h: 203: {;digital.h: 205: if (temp <= (max_tFAN - hystF))
  1599  001DB8  51EF               	movf	_hystF& (0+255),w,b	;volatile
  1600  001DBA  5DDF               	subwf	_max_tFAN& (0+255),w,b	;volatile
  1601  001DBC  6E05               	movwf	??_FanControl& (0+255),c
  1602  001DBE  0E00               	movlw	0
  1603  001DC0  59E0               	subwfb	(_max_tFAN+1)& (0+255),w,b	;volatile
  1604  001DC2  6E06               	movwf	(??_FanControl+1)& (0+255),c
  1605  001DC4  504A               	movf	_temp,w,c	;volatile
  1606  001DC6  5C05               	subwf	??_FanControl,w,c
  1607  001DC8  504B               	movf	_temp+1,w,c	;volatile
  1608  001DCA  5806               	subwfb	??_FanControl+1,w,c
  1609  001DCC  E303               	bnc	l3442
  1610                           
  1611                           ; BSR set to: 0
  1612                           ;digital.h: 206: {;digital.h: 207: LATCbits.LC1 = 0; fan = 0;
  1613  001DCE  928B               	bcf	3979,1,c	;volatile
  1614  001DD0  6B8D               	clrf	_fan& (0+255),b	;volatile
  1615                           
  1616                           ;digital.h: 208: maxf = 0;
  1617  001DD2  6B8E               	clrf	_maxf& (0+255),b	;volatile
  1618  001DD4                     l3442:
  1619                           
  1620                           ; BSR set to: 0
  1621                           ;digital.h: 209: };digital.h: 210: };digital.h: 212: if (fanptt && (maxf == 0))
  1622  001DD4  51F3               	movf	_fanptt& (0+255),w,b	;volatile
  1623  001DD6  E00A               	bz	l394
  1624                           
  1625                           ; BSR set to: 0
  1626  001DD8  518E               	movf	_maxf& (0+255),w,b	;volatile
  1627  001DDA  E108               	bnz	l394
  1628                           
  1629                           ; BSR set to: 0
  1630                           ;digital.h: 213: {;digital.h: 214: if (ptt) {LATCbits.LC1 = 1; fan = 1;}
  1631  001DDC  5056               	movf	_ptt,w,c	;volatile
  1632  001DDE  E004               	bz	l399
  1633                           
  1634                           ; BSR set to: 0
  1635  001DE0  828B               	bsf	3979,1,c	;volatile
  1636                           
  1637                           ; BSR set to: 0
  1638  001DE2  0E01               	movlw	1
  1639  001DE4  6F8D               	movwf	_fan& (0+255),b	;volatile
  1640  001DE6  D002               	goto	l394
  1641  001DE8                     l399:
  1642                           
  1643                           ; BSR set to: 0
  1644                           ;digital.h: 215: else {LATCbits.LC1 = 0; fan = 0;}
  1645  001DE8  928B               	bcf	3979,1,c	;volatile
  1646  001DEA  6B8D               	clrf	_fan& (0+255),b	;volatile
  1647  001DEC                     l394:
  1648  001DEC  FFFF               	dw	65535	; assembler added errata NOP
  1649                           
  1650                           ; BSR set to: 0
  1651  001DEE  0012               	return		;funcret
  1652  001DF0  FFFF               	dw	65535	; errata NOP
  1653  001DF2                     __end_of_FanControl:
  1654                           	opt stack 0
  1655                           stkptr	equ	0xFFC
  1656                           tblptru	equ	0xFF8
  1657                           tblptrh	equ	0xFF7
  1658                           tblptrl	equ	0xFF6
  1659                           tablat	equ	0xFF5
  1660                           intcon	equ	0xFF2
  1661                           intcon2	equ	0xFF1
  1662                           postinc0	equ	0xFEE
  1663                           wreg	equ	0xFE8
  1664                           status	equ	0xFD8
  1665                           
  1666 ;; *************** function _SendStatusToLCD *****************
  1667 ;; Defined at:
  1668 ;;		line 50 in file "../nextion.h"
  1669 ;; Parameters:    Size  Location     Type
  1670 ;;		None
  1671 ;; Auto vars:     Size  Location     Type
  1672 ;;		None
  1673 ;; Return value:  Size  Location     Type
  1674 ;;                  1    wreg      void 
  1675 ;; Registers used:
  1676 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1677 ;; Tracked objects:
  1678 ;;		On entry : 3F/0
  1679 ;;		On exit  : 3F/0
  1680 ;;		Unchanged: 0/0
  1681 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1682 ;;      Params:         0       0       0       0       0       0       0
  1683 ;;      Locals:         0       0       0       0       0       0       0
  1684 ;;      Temps:         12       0       0       0       0       0       0
  1685 ;;      Totals:        12       0       0       0       0       0       0
  1686 ;;Total ram usage:       12 bytes
  1687 ;; Hardware stack levels used:    1
  1688 ;; Hardware stack levels required when called:    5
  1689 ;; This function calls:
  1690 ;;		_CreateBuffTX
  1691 ;;		_Tramsmitt
  1692 ;; This function is called by:
  1693 ;;		_main
  1694 ;; This function uses a non-reentrant model
  1695 ;;
  1696                           
  1697                           	psect	text4
  1698  000DAE                     __ptext4:
  1699                           	opt stack 0
  1700  000DAE                     _SendStatusToLCD:
  1701                           	opt stack 0
  1702  000DAE  FFFF               	dw	65535	; assembler added errata NOP
  1703                           
  1704                           ; BSR set to: 0
  1705                           
  1706                           ; BSR set to: 0
  1707                           ;incstack = 0
  1708  000DB0  0004               	clrwdt		;# 
  1709                           
  1710                           ;nextion.h: 54: if (lcd < 3) lcd++;
  1711  000DB2  0E03               	movlw	3
  1712  000DB4  6055               	cpfslt	_lcd,c	;volatile
  1713  000DB6  D002               	goto	l492
  1714  000DB8  2A55               	incf	_lcd,f,c	;volatile
  1715  000DBA  D002               	goto	l3750
  1716  000DBC                     l492:
  1717  000DBC  FFFF               	dw	65535	; assembler added errata NOP
  1718                           
  1719                           ;nextion.h: 55: else lcd = 0;
  1720  000DBE  6A55               	clrf	_lcd,c	;volatile
  1721  000DC0                     l3750:
  1722  000DC0  FFFF               	dw	65535	; assembler added errata NOP
  1723                           
  1724                           ;nextion.h: 57: if (frtout) frtout--;
  1725  000DC2  0100               	movlb	0	; () banked
  1726  000DC4  516A               	movf	_frtout& (0+255),w,b	;volatile
  1727  000DC6  116B               	iorwf	(_frtout+1)& (0+255),w,b	;volatile
  1728  000DC8  E003               	bz	l3754
  1729                           
  1730                           ; BSR set to: 0
  1731  000DCA  076A               	decf	_frtout& (0+255),f,b	;volatile
  1732  000DCC  A0D8               	btfss	status,0,c
  1733  000DCE  076B               	decf	(_frtout+1)& (0+255),f,b	;volatile
  1734  000DD0                     l3754:
  1735                           
  1736                           ; BSR set to: 0
  1737                           ;nextion.h: 58: if (cvtout) cvtout--;
  1738  000DD0  5168               	movf	_cvtout& (0+255),w,b	;volatile
  1739  000DD2  1169               	iorwf	(_cvtout+1)& (0+255),w,b	;volatile
  1740  000DD4  E003               	bz	l3758
  1741                           
  1742                           ; BSR set to: 0
  1743  000DD6  0768               	decf	_cvtout& (0+255),f,b	;volatile
  1744  000DD8  A0D8               	btfss	status,0,c
  1745  000DDA  0769               	decf	(_cvtout+1)& (0+255),f,b	;volatile
  1746  000DDC                     l3758:
  1747                           
  1748                           ; BSR set to: 0
  1749                           ;nextion.h: 60: if ((PIE1bits.TXIE) || (!INTCONbits.TMR0IF)) return;
  1750  000DDC  A89D               	btfss	3997,4,c	;volatile
  1751                           
  1752                           ; BSR set to: 0
  1753  000DDE  A4F2               	btfss	intcon,2,c	;volatile
  1754  000DE0  D12C               	goto	l499
  1755                           
  1756                           ; BSR set to: 0
  1757                           ;nextion.h: 63: if (lcd == 0)
  1758  000DE2  5055               	movf	_lcd,w,c	;volatile
  1759  000DE4  E159               	bnz	l501
  1760                           
  1761                           ; BSR set to: 0
  1762                           ;nextion.h: 64: {;nextion.h: 65: if (frtout == 0)
  1763  000DE6  516A               	movf	_frtout& (0+255),w,b	;volatile
  1764  000DE8  116B               	iorwf	(_frtout+1)& (0+255),w,b	;volatile
  1765  000DEA  E156               	bnz	l501
  1766                           
  1767                           ; BSR set to: 0
  1768                           ;nextion.h: 66: {;nextion.h: 68: if ((fpeak != fpeak_old) || (rpeak != rpeak_old))
  1769  000DEC  5176               	movf	_fpeak_old& (0+255),w,b	;volatile
  1770  000DEE  1846               	xorwf	_fpeak,w,c	;volatile
  1771  000DF0  E109               	bnz	l3770
  1772  000DF2  5177               	movf	(_fpeak_old+1)& (0+255),w,b	;volatile
  1773  000DF4  1847               	xorwf	_fpeak+1,w,c	;volatile
  1774  000DF6  E106               	bnz	u3990
  1775                           
  1776                           ; BSR set to: 0
  1777  000DF8  5174               	movf	_rpeak_old& (0+255),w,b	;volatile
  1778  000DFA  197A               	xorwf	_rpeak& (0+255),w,b	;volatile
  1779  000DFC  E103               	bnz	u3990
  1780  000DFE  5175               	movf	(_rpeak_old+1)& (0+255),w,b	;volatile
  1781  000E00  197B               	xorwf	(_rpeak+1)& (0+255),w,b	;volatile
  1782  000E02  E038               	bz	l3786
  1783  000E04                     u3990:
  1784  000E04                     l3770:
  1785                           
  1786                           ; BSR set to: 0
  1787                           ;nextion.h: 69: {;nextion.h: 70: tmp = ((unsigned long)fpeak) | (((unsigned long)rpeak) 
      +                          << 10);
  1788  000E04  517A               	movf	_rpeak& (0+255),w,b	;volatile
  1789  000E06  6E12               	movwf	??_SendStatusToLCD& (0+255),c
  1790  000E08  517B               	movf	(_rpeak+1)& (0+255),w,b	;volatile
  1791  000E0A  6E13               	movwf	(??_SendStatusToLCD+1)& (0+255),c
  1792  000E0C  6A14               	clrf	(??_SendStatusToLCD+2)& (0+255),c
  1793  000E0E  6A15               	clrf	(??_SendStatusToLCD+3)& (0+255),c
  1794  000E10  0E0A               	movlw	10
  1795  000E12                     u4005:
  1796  000E12  FFFF               	dw	65535	; assembler added errata NOP
  1797  000E14  90D8               	bcf	status,0,c
  1798  000E16  3612               	rlcf	??_SendStatusToLCD,f,c
  1799  000E18  3613               	rlcf	??_SendStatusToLCD+1,f,c
  1800  000E1A  3614               	rlcf	??_SendStatusToLCD+2,f,c
  1801  000E1C  3615               	rlcf	??_SendStatusToLCD+3,f,c
  1802  000E1E  2EE8               	decfsz	wreg,f,c
  1803  000E20  D7F8               	goto	u4005
  1804  000E22  5046               	movf	_fpeak,w,c	;volatile
  1805  000E24  1012               	iorwf	??_SendStatusToLCD,w,c
  1806  000E26  6F60               	movwf	_tmp& (0+255),b	;volatile
  1807  000E28  5047               	movf	_fpeak+1,w,c	;volatile
  1808  000E2A  1013               	iorwf	??_SendStatusToLCD+1,w,c
  1809  000E2C  6F61               	movwf	(_tmp+1)& (0+255),b	;volatile
  1810  000E2E  0E00               	movlw	0
  1811  000E30  1014               	iorwf	??_SendStatusToLCD+2,w,c
  1812  000E32  6F62               	movwf	(_tmp+2)& (0+255),b	;volatile
  1813  000E34  0E00               	movlw	0
  1814  000E36  1015               	iorwf	??_SendStatusToLCD+3,w,c
  1815  000E38  6F63               	movwf	(_tmp+3)& (0+255),b	;volatile
  1816                           
  1817                           ; BSR set to: 0
  1818                           ;nextion.h: 71: CreateBuffTX("frV", tmp);
  1819  000E3A  0E4C               	movlw	low STR_1
  1820  000E3C  6E0C               	movwf	CreateBuffTX@str,c
  1821  000E3E  C060  F00D         	movff	_tmp,CreateBuffTX@data	;volatile
  1822  000E42  C061  F00E         	movff	_tmp+1,CreateBuffTX@data+1	;volatile
  1823  000E46  C062  F00F         	movff	_tmp+2,CreateBuffTX@data+2	;volatile
  1824  000E4A  C063  F010         	movff	_tmp+3,CreateBuffTX@data+3	;volatile
  1825  000E4E  ECF0  F00D         	call	_CreateBuffTX	;wreg free
  1826                           
  1827                           ;nextion.h: 72: fpeak_old = fpeak;
  1828  000E52  C046  F076         	movff	_fpeak,_fpeak_old	;volatile
  1829  000E56  C047  F077         	movff	_fpeak+1,_fpeak_old+1	;volatile
  1830                           
  1831                           ;nextion.h: 73: rpeak_old = rpeak;
  1832  000E5A  C07A  F074         	movff	_rpeak,_rpeak_old	;volatile
  1833  000E5E  C07B  F075         	movff	_rpeak+1,_rpeak_old+1	;volatile
  1834                           
  1835                           ;nextion.h: 74: frtout = 1000;
  1836  000E62  0E03               	movlw	3
  1837  000E64  0100               	movlb	0	; () banked
  1838  000E66  6F6B               	movwf	(_frtout+1)& (0+255),b	;volatile
  1839  000E68  0EE8               	movlw	232
  1840  000E6A  6F6A               	movwf	_frtout& (0+255),b	;volatile
  1841  000E6C                     l3780:
  1842  000E6C  FFFF               	dw	65535	; assembler added errata NOP
  1843                           
  1844                           ;nextion.h: 75: Tramsmitt(); return;
  1845  000E6E  ECC7  F011         	call	_Tramsmitt	;wreg free
  1846  000E72  D0E3               	goto	l499
  1847  000E74                     l3786:
  1848                           
  1849                           ; BSR set to: 0
  1850                           ;nextion.h: 77: else;nextion.h: 78: {;nextion.h: 79: if (frwd < fpeak) fpeak = frwd;
  1851  000E74  5046               	movf	_fpeak,w,c	;volatile
  1852  000E76  5C50               	subwf	_frwd,w,c	;volatile
  1853  000E78  5047               	movf	_fpeak+1,w,c	;volatile
  1854  000E7A  5851               	subwfb	_frwd+1,w,c	;volatile
  1855  000E7C  E204               	bc	l3790
  1856                           
  1857                           ; BSR set to: 0
  1858  000E7E  C050  F046         	movff	_frwd,_fpeak	;volatile
  1859  000E82  C051  F047         	movff	_frwd+1,_fpeak+1	;volatile
  1860  000E86                     l3790:
  1861                           
  1862                           ; BSR set to: 0
  1863                           ;nextion.h: 80: if (refl < rpeak) rpeak = refl;
  1864  000E86  517A               	movf	_rpeak& (0+255),w,b	;volatile
  1865  000E88  5C4E               	subwf	_refl,w,c	;volatile
  1866  000E8A  517B               	movf	(_rpeak+1)& (0+255),w,b	;volatile
  1867  000E8C  584F               	subwfb	_refl+1,w,c	;volatile
  1868  000E8E  E204               	bc	l501
  1869                           
  1870                           ; BSR set to: 0
  1871  000E90  C04E  F07A         	movff	_refl,_rpeak	;volatile
  1872  000E94  C04F  F07B         	movff	_refl+1,_rpeak+1	;volatile
  1873  000E98                     l501:
  1874                           
  1875                           ; BSR set to: 0
  1876                           ;nextion.h: 81: };nextion.h: 82: };nextion.h: 83: };nextion.h: 85: if (lcd == 1)
  1877                           
  1878                           ; BSR set to: 0
  1879  000E98  0455               	decf	_lcd,w,c	;volatile
  1880  000E9A  E14D               	bnz	l509
  1881                           
  1882                           ; BSR set to: 0
  1883                           ;nextion.h: 86: {;nextion.h: 87: if (cvtout == 0)
  1884  000E9C  5168               	movf	_cvtout& (0+255),w,b	;volatile
  1885  000E9E  1169               	iorwf	(_cvtout+1)& (0+255),w,b	;volatile
  1886  000EA0  E14A               	bnz	l509
  1887                           
  1888                           ; BSR set to: 0
  1889                           ;nextion.h: 88: {;nextion.h: 90: if ((cpeak != cpeak_old) || (volt_view != volt_old))
  1890  000EA2  5172               	movf	_cpeak_old& (0+255),w,b	;volatile
  1891  000EA4  1978               	xorwf	_cpeak& (0+255),w,b	;volatile
  1892  000EA6  E109               	bnz	l3802
  1893  000EA8  5173               	movf	(_cpeak_old+1)& (0+255),w,b	;volatile
  1894  000EAA  1979               	xorwf	(_cpeak+1)& (0+255),w,b	;volatile
  1895  000EAC  E106               	bnz	u4060
  1896                           
  1897                           ; BSR set to: 0
  1898  000EAE  517E               	movf	_volt_old& (0+255),w,b	;volatile
  1899  000EB0  1980               	xorwf	_volt_view& (0+255),w,b	;volatile
  1900  000EB2  E103               	bnz	u4060
  1901  000EB4  517F               	movf	(_volt_old+1)& (0+255),w,b	;volatile
  1902  000EB6  1981               	xorwf	(_volt_view+1)& (0+255),w,b	;volatile
  1903  000EB8  E035               	bz	l3818
  1904  000EBA                     u4060:
  1905  000EBA                     l3802:
  1906                           
  1907                           ; BSR set to: 0
  1908                           ;nextion.h: 91: {;nextion.h: 92: tmp = ((unsigned long)volt_view) | (((unsigned long)cpe
      +                          ak) << 10);
  1909  000EBA  5178               	movf	_cpeak& (0+255),w,b	;volatile
  1910  000EBC  6E12               	movwf	??_SendStatusToLCD& (0+255),c
  1911  000EBE  5179               	movf	(_cpeak+1)& (0+255),w,b	;volatile
  1912  000EC0  6E13               	movwf	(??_SendStatusToLCD+1)& (0+255),c
  1913  000EC2  6A14               	clrf	(??_SendStatusToLCD+2)& (0+255),c
  1914  000EC4  6A15               	clrf	(??_SendStatusToLCD+3)& (0+255),c
  1915  000EC6  0E0A               	movlw	10
  1916  000EC8                     u4075:
  1917  000EC8  FFFF               	dw	65535	; assembler added errata NOP
  1918  000ECA  90D8               	bcf	status,0,c
  1919  000ECC  3612               	rlcf	??_SendStatusToLCD,f,c
  1920  000ECE  3613               	rlcf	??_SendStatusToLCD+1,f,c
  1921  000ED0  3614               	rlcf	??_SendStatusToLCD+2,f,c
  1922  000ED2  3615               	rlcf	??_SendStatusToLCD+3,f,c
  1923  000ED4  2EE8               	decfsz	wreg,f,c
  1924  000ED6  D7F8               	goto	u4075
  1925  000ED8  5180               	movf	_volt_view& (0+255),w,b	;volatile
  1926  000EDA  1012               	iorwf	??_SendStatusToLCD,w,c
  1927  000EDC  6F60               	movwf	_tmp& (0+255),b	;volatile
  1928  000EDE  5181               	movf	(_volt_view+1)& (0+255),w,b	;volatile
  1929  000EE0  1013               	iorwf	??_SendStatusToLCD+1,w,c
  1930  000EE2  6F61               	movwf	(_tmp+1)& (0+255),b	;volatile
  1931  000EE4  0E00               	movlw	0
  1932  000EE6  1014               	iorwf	??_SendStatusToLCD+2,w,c
  1933  000EE8  6F62               	movwf	(_tmp+2)& (0+255),b	;volatile
  1934  000EEA  0E00               	movlw	0
  1935  000EEC  1015               	iorwf	??_SendStatusToLCD+3,w,c
  1936  000EEE  6F63               	movwf	(_tmp+3)& (0+255),b	;volatile
  1937                           
  1938                           ; BSR set to: 0
  1939                           ;nextion.h: 93: CreateBuffTX("cvV", tmp);
  1940  000EF0  0E50               	movlw	low STR_2
  1941  000EF2  6E0C               	movwf	CreateBuffTX@str,c
  1942  000EF4  C060  F00D         	movff	_tmp,CreateBuffTX@data	;volatile
  1943  000EF8  C061  F00E         	movff	_tmp+1,CreateBuffTX@data+1	;volatile
  1944  000EFC  C062  F00F         	movff	_tmp+2,CreateBuffTX@data+2	;volatile
  1945  000F00  C063  F010         	movff	_tmp+3,CreateBuffTX@data+3	;volatile
  1946  000F04  ECF0  F00D         	call	_CreateBuffTX	;wreg free
  1947                           
  1948                           ;nextion.h: 94: cpeak_old = cpeak;
  1949  000F08  C078  F072         	movff	_cpeak,_cpeak_old	;volatile
  1950  000F0C  C079  F073         	movff	_cpeak+1,_cpeak_old+1	;volatile
  1951                           
  1952                           ;nextion.h: 95: volt_old = volt_view;
  1953  000F10  C080  F07E         	movff	_volt_view,_volt_old	;volatile
  1954  000F14  C081  F07F         	movff	_volt_view+1,_volt_old+1	;volatile
  1955                           
  1956                           ;nextion.h: 96: cvtout = 1000;
  1957  000F18  0E03               	movlw	3
  1958  000F1A  0100               	movlb	0	; () banked
  1959  000F1C  6F69               	movwf	(_cvtout+1)& (0+255),b	;volatile
  1960  000F1E  0EE8               	movlw	232
  1961  000F20  6F68               	movwf	_cvtout& (0+255),b	;volatile
  1962  000F22  D7A4               	goto	l3780
  1963  000F24                     l3818:
  1964                           
  1965                           ; BSR set to: 0
  1966                           ;nextion.h: 99: else if (curr < cpeak) cpeak = curr;
  1967  000F24  5178               	movf	_cpeak& (0+255),w,b	;volatile
  1968  000F26  5C4C               	subwf	_curr,w,c	;volatile
  1969  000F28  5179               	movf	(_cpeak+1)& (0+255),w,b	;volatile
  1970  000F2A  584D               	subwfb	_curr+1,w,c	;volatile
  1971  000F2C  E204               	bc	l509
  1972                           
  1973                           ; BSR set to: 0
  1974  000F2E  C04C  F078         	movff	_curr,_cpeak	;volatile
  1975  000F32  C04D  F079         	movff	_curr+1,_cpeak+1	;volatile
  1976  000F36                     l509:
  1977                           
  1978                           ; BSR set to: 0
  1979                           ;nextion.h: 100: };nextion.h: 101: };nextion.h: 103: if (lcd == 2)
  1980                           
  1981                           ; BSR set to: 0
  1982  000F36  0E02               	movlw	2
  1983  000F38  1855               	xorwf	_lcd,w,c	;volatile
  1984  000F3A  E16D               	bnz	l3844
  1985                           
  1986                           ; BSR set to: 0
  1987                           ;nextion.h: 104: {;nextion.h: 105: bstate = (ant << 4) | (fan << 3) | (bypass << 2) | (p
      +                          tt << 1) | aband;
  1988  000F3C  90D8               	bcf	status,0,c
  1989  000F3E  3456               	rlcf	_ptt,w,c	;volatile
  1990  000F40  6E12               	movwf	??_SendStatusToLCD& (0+255),c
  1991  000F42  C058  F013         	movff	_bypass,??_SendStatusToLCD+1	;volatile
  1992  000F46  90D8               	bcf	status,0,c
  1993  000F48  3613               	rlcf	??_SendStatusToLCD+1,f,c
  1994  000F4A  90D8               	bcf	status,0,c
  1995  000F4C  3613               	rlcf	??_SendStatusToLCD+1,f,c
  1996  000F4E  C08D  F014         	movff	_fan,??_SendStatusToLCD+2	;volatile
  1997  000F52  90D8               	bcf	status,0,c
  1998  000F54  3614               	rlcf	??_SendStatusToLCD+2,f,c
  1999  000F56  90D8               	bcf	status,0,c
  2000  000F58  3614               	rlcf	??_SendStatusToLCD+2,f,c
  2001  000F5A  90D8               	bcf	status,0,c
  2002  000F5C  3614               	rlcf	??_SendStatusToLCD+2,f,c
  2003  000F5E  39F2               	swapf	_ant& (0+255),w,b	;volatile
  2004  000F60  0BF0               	andlw	240
  2005  000F62  1014               	iorwf	??_SendStatusToLCD+2,w,c
  2006  000F64  1013               	iorwf	??_SendStatusToLCD+1,w,c
  2007  000F66  1012               	iorwf	??_SendStatusToLCD,w,c
  2008  000F68  11F1               	iorwf	_aband& (0+255),w,b	;volatile
  2009  000F6A  6F8A               	movwf	_bstate& (0+255),b	;volatile
  2010                           
  2011                           ;nextion.h: 106: if ((temp != temp_old) || (band != band_old) || (bstate != bstate_old))
  2012  000F6C  517C               	movf	_temp_old& (0+255),w,b	;volatile
  2013  000F6E  184A               	xorwf	_temp,w,c	;volatile
  2014  000F70  E109               	bnz	l3830
  2015  000F72  517D               	movf	(_temp_old+1)& (0+255),w,b	;volatile
  2016  000F74  184B               	xorwf	_temp+1,w,c	;volatile
  2017  000F76  E106               	bnz	u4120
  2018                           
  2019                           ; BSR set to: 0
  2020  000F78  518B               	movf	_band_old& (0+255),w,b	;volatile
  2021  000F7A  1857               	xorwf	_band,w,c	;volatile
  2022  000F7C  E103               	bnz	u4120
  2023                           
  2024                           ; BSR set to: 0
  2025  000F7E  5189               	movf	_bstate_old& (0+255),w,b	;volatile
  2026  000F80  198A               	xorwf	_bstate& (0+255),w,b	;volatile
  2027  000F82  E049               	bz	l3844
  2028  000F84                     u4120:
  2029  000F84                     l3830:
  2030                           
  2031                           ; BSR set to: 0
  2032                           ;nextion.h: 107: {;nextion.h: 108: tmp = ((unsigned long)temp) | (((unsigned long)band) 
      +                          << 7) | (((unsigned long)bstate) << 10);
  2033  000F84  C08A  F012         	movff	_bstate,??_SendStatusToLCD	;volatile
  2034  000F88  6A13               	clrf	(??_SendStatusToLCD+1)& (0+255),c
  2035  000F8A  6A14               	clrf	(??_SendStatusToLCD+2)& (0+255),c
  2036  000F8C  6A15               	clrf	(??_SendStatusToLCD+3)& (0+255),c
  2037  000F8E  0E0A               	movlw	10
  2038  000F90                     u4135:
  2039  000F90  FFFF               	dw	65535	; assembler added errata NOP
  2040  000F92  90D8               	bcf	status,0,c
  2041  000F94  3612               	rlcf	??_SendStatusToLCD,f,c
  2042  000F96  3613               	rlcf	??_SendStatusToLCD+1,f,c
  2043  000F98  3614               	rlcf	??_SendStatusToLCD+2,f,c
  2044  000F9A  3615               	rlcf	??_SendStatusToLCD+3,f,c
  2045  000F9C  2EE8               	decfsz	wreg,f,c
  2046  000F9E  D7F8               	goto	u4135
  2047  000FA0  C057  F016         	movff	_band,??_SendStatusToLCD+4	;volatile
  2048  000FA4  6A17               	clrf	(??_SendStatusToLCD+5)& (0+255),c
  2049  000FA6  6A18               	clrf	(??_SendStatusToLCD+6)& (0+255),c
  2050  000FA8  6A19               	clrf	(??_SendStatusToLCD+7)& (0+255),c
  2051  000FAA  0E07               	movlw	7
  2052  000FAC                     u4145:
  2053  000FAC  FFFF               	dw	65535	; assembler added errata NOP
  2054  000FAE  90D8               	bcf	status,0,c
  2055  000FB0  3616               	rlcf	??_SendStatusToLCD+4,f,c
  2056  000FB2  3617               	rlcf	??_SendStatusToLCD+5,f,c
  2057  000FB4  3618               	rlcf	??_SendStatusToLCD+6,f,c
  2058  000FB6  3619               	rlcf	??_SendStatusToLCD+7,f,c
  2059  000FB8  2EE8               	decfsz	wreg,f,c
  2060  000FBA  D7F8               	goto	u4145
  2061  000FBC  504A               	movf	_temp,w,c	;volatile
  2062  000FBE  1016               	iorwf	??_SendStatusToLCD+4,w,c
  2063  000FC0  6E1A               	movwf	(??_SendStatusToLCD+8)& (0+255),c
  2064  000FC2  504B               	movf	_temp+1,w,c	;volatile
  2065  000FC4  1017               	iorwf	??_SendStatusToLCD+5,w,c
  2066  000FC6  6E1B               	movwf	(??_SendStatusToLCD+9)& (0+255),c
  2067  000FC8  0E00               	movlw	0
  2068  000FCA  1018               	iorwf	??_SendStatusToLCD+6,w,c
  2069  000FCC  6E1C               	movwf	(??_SendStatusToLCD+10)& (0+255),c
  2070  000FCE  0E00               	movlw	0
  2071  000FD0  1019               	iorwf	??_SendStatusToLCD+7,w,c
  2072  000FD2  6E1D               	movwf	(??_SendStatusToLCD+11)& (0+255),c
  2073  000FD4  5012               	movf	??_SendStatusToLCD,w,c
  2074  000FD6  101A               	iorwf	??_SendStatusToLCD+8,w,c
  2075  000FD8  6F60               	movwf	_tmp& (0+255),b	;volatile
  2076  000FDA  5013               	movf	??_SendStatusToLCD+1,w,c
  2077  000FDC  101B               	iorwf	??_SendStatusToLCD+9,w,c
  2078  000FDE  6F61               	movwf	(_tmp+1)& (0+255),b	;volatile
  2079  000FE0  5014               	movf	??_SendStatusToLCD+2,w,c
  2080  000FE2  101C               	iorwf	??_SendStatusToLCD+10,w,c
  2081  000FE4  6F62               	movwf	(_tmp+2)& (0+255),b	;volatile
  2082  000FE6  5015               	movf	??_SendStatusToLCD+3,w,c
  2083  000FE8  101D               	iorwf	??_SendStatusToLCD+11,w,c
  2084  000FEA  6F63               	movwf	(_tmp+3)& (0+255),b	;volatile
  2085                           
  2086                           ; BSR set to: 0
  2087                           ;nextion.h: 109: CreateBuffTX("tbs", tmp);
  2088  000FEC  0E7C               	movlw	low STR_3
  2089  000FEE  6E0C               	movwf	CreateBuffTX@str,c
  2090  000FF0  C060  F00D         	movff	_tmp,CreateBuffTX@data	;volatile
  2091  000FF4  C061  F00E         	movff	_tmp+1,CreateBuffTX@data+1	;volatile
  2092  000FF8  C062  F00F         	movff	_tmp+2,CreateBuffTX@data+2	;volatile
  2093  000FFC  C063  F010         	movff	_tmp+3,CreateBuffTX@data+3	;volatile
  2094  001000  ECF0  F00D         	call	_CreateBuffTX	;wreg free
  2095                           
  2096                           ;nextion.h: 110: temp_old = temp;
  2097  001004  C04A  F07C         	movff	_temp,_temp_old	;volatile
  2098  001008  C04B  F07D         	movff	_temp+1,_temp_old+1	;volatile
  2099                           
  2100                           ;nextion.h: 111: band_old = band;
  2101  00100C  C057  F08B         	movff	_band,_band_old	;volatile
  2102                           
  2103                           ;nextion.h: 112: bstate_old = bstate;
  2104  001010  C08A  F089         	movff	_bstate,_bstate_old	;volatile
  2105  001014  D72B               	goto	l3780
  2106  001016                     l3844:
  2107                           
  2108                           ; BSR set to: 0
  2109                           ;nextion.h: 114: };nextion.h: 115: };nextion.h: 117: if (lcd == 3)
  2110  001016  0E03               	movlw	3
  2111  001018  1855               	xorwf	_lcd,w,c	;volatile
  2112  00101A  E10F               	bnz	l499
  2113                           
  2114                           ; BSR set to: 0
  2115                           ;nextion.h: 118: {;nextion.h: 119: if (err != err_old)
  2116  00101C  51FC               	movf	_err_old& (0+255),w,b	;volatile
  2117  00101E  1854               	xorwf	_err,w,c	;volatile
  2118  001020  E00C               	bz	l499
  2119                           
  2120                           ; BSR set to: 0
  2121                           ;nextion.h: 120: {;nextion.h: 121: CreateBuffTX("err", err);
  2122  001022  0E78               	movlw	low STR_4
  2123  001024  6E0C               	movwf	CreateBuffTX@str,c
  2124  001026  5054               	movf	_err,w,c	;volatile
  2125  001028  6E0D               	movwf	CreateBuffTX@data,c
  2126  00102A  6A0E               	clrf	CreateBuffTX@data+1,c
  2127  00102C  6A0F               	clrf	CreateBuffTX@data+2,c
  2128  00102E  6A10               	clrf	CreateBuffTX@data+3,c
  2129  001030  ECF0  F00D         	call	_CreateBuffTX	;wreg free
  2130                           
  2131                           ;nextion.h: 122: err_old = err;
  2132  001034  C054  F0FC         	movff	_err,_err_old	;volatile
  2133  001038  D719               	goto	l3780
  2134  00103A                     l499:
  2135  00103A  FFFF               	dw	65535	; assembler added errata NOP
  2136                           
  2137                           ; BSR set to: 0
  2138  00103C  0012               	return		;funcret
  2139  00103E  FFFF               	dw	65535	; errata NOP
  2140  001040                     __end_of_SendStatusToLCD:
  2141                           	opt stack 0
  2142                           stkptr	equ	0xFFC
  2143                           tblptru	equ	0xFF8
  2144                           tblptrh	equ	0xFF7
  2145                           tblptrl	equ	0xFF6
  2146                           tablat	equ	0xFF5
  2147                           intcon	equ	0xFF2
  2148                           intcon2	equ	0xFF1
  2149                           postinc0	equ	0xFEE
  2150                           wreg	equ	0xFE8
  2151                           status	equ	0xFD8
  2152                           
  2153 ;; *************** function _Tramsmitt *****************
  2154 ;; Defined at:
  2155 ;;		line 40 in file "../nextion.h"
  2156 ;; Parameters:    Size  Location     Type
  2157 ;;		None
  2158 ;; Auto vars:     Size  Location     Type
  2159 ;;		None
  2160 ;; Return value:  Size  Location     Type
  2161 ;;                  1    wreg      void 
  2162 ;; Registers used:
  2163 ;;		wreg, status,2
  2164 ;; Tracked objects:
  2165 ;;		On entry : 0/0
  2166 ;;		On exit  : 3F/0
  2167 ;;		Unchanged: 0/0
  2168 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2169 ;;      Params:         0       0       0       0       0       0       0
  2170 ;;      Locals:         0       0       0       0       0       0       0
  2171 ;;      Temps:          0       0       0       0       0       0       0
  2172 ;;      Totals:         0       0       0       0       0       0       0
  2173 ;;Total ram usage:        0 bytes
  2174 ;; Hardware stack levels used:    1
  2175 ;; Hardware stack levels required when called:    3
  2176 ;; This function calls:
  2177 ;;		Nothing
  2178 ;; This function is called by:
  2179 ;;		_SendStatusToLCD
  2180 ;; This function uses a non-reentrant model
  2181 ;;
  2182                           
  2183                           	psect	text5
  2184  00238E                     __ptext5:
  2185                           	opt stack 0
  2186  00238E                     _Tramsmitt:
  2187                           	opt stack 0
  2188  00238E  FFFF               	dw	65535	; assembler added errata NOP
  2189                           
  2190                           ;nextion.h: 43: TMR0 = 0x2800;
  2191                           
  2192                           ; BSR set to: 0
  2193                           ;incstack = 0
  2194  002390  0E28               	movlw	40
  2195  002392  6ED7               	movwf	4055,c	;volatile
  2196  002394  0E00               	movlw	0
  2197  002396  6AD6               	clrf	4054,c	;volatile
  2198                           
  2199                           ;nextion.h: 44: INTCONbits.TMR0IF = 0;
  2200  002398  94F2               	bcf	intcon,2,c	;volatile
  2201                           
  2202                           ;nextion.h: 45: txb = 0; PIE1bits.TXIE = 1;
  2203  00239A  0100               	movlb	0	; () banked
  2204  00239C  6B87               	clrf	_txb& (0+255),b	;volatile
  2205                           
  2206                           ; BSR set to: 0
  2207  00239E  889D               	bsf	3997,4,c	;volatile
  2208                           
  2209                           ; BSR set to: 0
  2210  0023A0  0012               	return		;funcret
  2211  0023A2  FFFF               	dw	65535	; errata NOP
  2212  0023A4                     __end_of_Tramsmitt:
  2213                           	opt stack 0
  2214                           stkptr	equ	0xFFC
  2215                           tblptru	equ	0xFF8
  2216                           tblptrh	equ	0xFF7
  2217                           tblptrl	equ	0xFF6
  2218                           tablat	equ	0xFF5
  2219                           intcon	equ	0xFF2
  2220                           intcon2	equ	0xFF1
  2221                           postinc0	equ	0xFEE
  2222                           wreg	equ	0xFE8
  2223                           status	equ	0xFD8
  2224                           
  2225 ;; *************** function _ReadStatusFromLCD *****************
  2226 ;; Defined at:
  2227 ;;		line 130 in file "../nextion.h"
  2228 ;; Parameters:    Size  Location     Type
  2229 ;;		None
  2230 ;; Auto vars:     Size  Location     Type
  2231 ;;		None
  2232 ;; Return value:  Size  Location     Type
  2233 ;;                  1    wreg      void 
  2234 ;; Registers used:
  2235 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2236 ;; Tracked objects:
  2237 ;;		On entry : 3F/0
  2238 ;;		On exit  : 3F/0
  2239 ;;		Unchanged: 0/0
  2240 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2241 ;;      Params:         0       0       0       0       0       0       0
  2242 ;;      Locals:         0       0       0       0       0       0       0
  2243 ;;      Temps:          0       0       0       0       0       0       0
  2244 ;;      Totals:         0       0       0       0       0       0       0
  2245 ;;Total ram usage:        0 bytes
  2246 ;; Hardware stack levels used:    1
  2247 ;; Hardware stack levels required when called:    8
  2248 ;; This function calls:
  2249 ;;		_AntennaSelect
  2250 ;;		_Beep
  2251 ;;		_EEmbandRead
  2252 ;;		_EEsetupRead
  2253 ;;		_LCDpageSelect
  2254 ;;		_PTT_OFF
  2255 ;;		_RXrestart
  2256 ;;		_SetBand
  2257 ;;		_SetupMode
  2258 ;;		_writeEEPROM
  2259 ;; This function is called by:
  2260 ;;		_main
  2261 ;; This function uses a non-reentrant model
  2262 ;;
  2263                           
  2264                           	psect	text6
  2265  001532                     __ptext6:
  2266                           	opt stack 0
  2267  001532                     _ReadStatusFromLCD:
  2268                           	opt stack 0
  2269  001532  FFFF               	dw	65535	; assembler added errata NOP
  2270                           
  2271                           ; BSR set to: 0
  2272                           
  2273                           ; BSR set to: 0
  2274                           ;incstack = 0
  2275  001534  0004               	clrwdt		;# 
  2276                           
  2277                           ;nextion.h: 133: if (rx_end == 0) return;
  2278  001536  0100               	movlb	0	; () banked
  2279  001538  5186               	movf	_rx_end& (0+255),w,b	;volatile
  2280  00153A  E069               	bz	l524
  2281                           
  2282                           ; BSR set to: 0
  2283                           ;nextion.h: 134: if (buffRX[0] != 0x90) {RXrestart(); return;}
  2284  00153C  0E90               	movlw	144
  2285  00153E  19CF               	xorwf	_buffRX& (0+255),w,b	;volatile
  2286  001540  E004               	bz	l4522
  2287  001542                     u5280:
  2288  001542  FFFF               	dw	65535	; assembler added errata NOP
  2289  001544  ECCA  F010         	call	_RXrestart	;wreg free
  2290  001548  D062               	goto	l524
  2291  00154A                     l4522:
  2292                           
  2293                           ; BSR set to: 0
  2294                           ;nextion.h: 136: if (err)
  2295  00154A  5054               	movf	_err,w,c	;volatile
  2296  00154C  E008               	bz	l4530
  2297                           
  2298                           ; BSR set to: 0
  2299                           ;nextion.h: 137: {;nextion.h: 138: if (!(err & 0x20))
  2300  00154E  BA54               	btfsc	_err,5,c	;volatile
  2301  001550  D7F8               	goto	u5280
  2302                           
  2303                           ; BSR set to: 0
  2304                           ;nextion.h: 139: {;nextion.h: 141: if (buffRX[1] == 0x12) err &=~ buffRX[2];
  2305  001552  0E12               	movlw	18
  2306  001554  19D0               	xorwf	(_buffRX+1)& (0+255),w,b	;volatile
  2307  001556  E1F5               	bnz	u5280
  2308                           
  2309                           ; BSR set to: 0
  2310  001558  1DD1               	comf	(_buffRX+2)& (0+255),w,b	;volatile
  2311  00155A  1654               	andwf	_err,f,c	;volatile
  2312  00155C  D7F2               	goto	u5280
  2313  00155E                     l4530:
  2314                           
  2315                           ; BSR set to: 0
  2316                           ;nextion.h: 144: else;nextion.h: 145: {;nextion.h: 147: if (buffRX[1] == 0x11)
  2317  00155E  0E11               	movlw	17
  2318  001560  19D0               	xorwf	(_buffRX+1)& (0+255),w,b	;volatile
  2319  001562  E10B               	bnz	l4540
  2320                           
  2321                           ; BSR set to: 0
  2322                           ;nextion.h: 148: {;nextion.h: 149: bypass ^= 1;
  2323  001564  0E01               	movlw	1
  2324  001566  1A58               	xorwf	_bypass,f,c	;volatile
  2325                           
  2326                           ; BSR set to: 0
  2327                           ;nextion.h: 150: writeEEPROM(28, bypass);
  2328  001568  C058  F005         	movff	_bypass,writeEEPROM@data	;volatile
  2329  00156C  0E1C               	movlw	28
  2330  00156E  EC34  F010         	call	_writeEEPROM
  2331                           
  2332                           ;nextion.h: 151: if (bypass) PTT_OFF();
  2333  001572  5058               	movf	_bypass,w,c	;volatile
  2334  001574  E002               	bz	l4540
  2335  001576  ECAE  F011         	call	_PTT_OFF	;wreg free
  2336  00157A                     l4540:
  2337                           
  2338                           ;nextion.h: 152: };nextion.h: 154: if (ptt == 0)
  2339  00157A  5056               	movf	_ptt,w,c	;volatile
  2340  00157C  E1E2               	bnz	u5280
  2341                           
  2342                           ;nextion.h: 155: {;nextion.h: 157: if ((buffRX[1] == 0x30) || (buffRX[1] == 0x31))
  2343  00157E  0E30               	movlw	48
  2344  001580  0100               	movlb	0	; () banked
  2345  001582  19D0               	xorwf	(_buffRX+1)& (0+255),w,b	;volatile
  2346  001584  E003               	bz	u5360
  2347                           
  2348                           ; BSR set to: 0
  2349  001586  0E31               	movlw	49
  2350  001588  19D0               	xorwf	(_buffRX+1)& (0+255),w,b	;volatile
  2351  00158A  E10B               	bnz	l4552
  2352  00158C                     u5360:
  2353                           
  2354                           ; BSR set to: 0
  2355                           ;nextion.h: 158: {;nextion.h: 159: ant = buffRX[1] - 0x30;
  2356  00158C  51D0               	movf	(_buffRX+1)& (0+255),w,b	;volatile
  2357  00158E  0FD0               	addlw	208
  2358  001590  6FF2               	movwf	_ant& (0+255),b	;volatile
  2359                           
  2360                           ; BSR set to: 0
  2361                           ;nextion.h: 160: AntennaSelect(ant);
  2362  001592  51F2               	movf	_ant& (0+255),w,b	;volatile
  2363  001594  ECBB  F011         	call	_AntennaSelect
  2364                           
  2365                           ;nextion.h: 161: writeEEPROM(29, ant);
  2366  001598  C0F2  F005         	movff	_ant,writeEEPROM@data	;volatile
  2367  00159C  0E1D               	movlw	29
  2368  00159E  EC34  F010         	call	_writeEEPROM
  2369  0015A2                     l4552:
  2370                           
  2371                           ;nextion.h: 162: };nextion.h: 163: if (bypass == 0)
  2372  0015A2  5058               	movf	_bypass,w,c	;volatile
  2373  0015A4  E125               	bnz	l4574
  2374                           
  2375                           ;nextion.h: 164: {;nextion.h: 166: if (buffRX[1] == 0x13)
  2376  0015A6  0E13               	movlw	19
  2377  0015A8  0100               	movlb	0	; () banked
  2378  0015AA  19D0               	xorwf	(_buffRX+1)& (0+255),w,b	;volatile
  2379  0015AC  E10E               	bnz	l4564
  2380                           
  2381                           ; BSR set to: 0
  2382                           ;nextion.h: 167: {;nextion.h: 168: aband ^= 1;
  2383  0015AE  0E01               	movlw	1
  2384  0015B0  1BF1               	xorwf	_aband& (0+255),f,b	;volatile
  2385                           
  2386                           ; BSR set to: 0
  2387                           ;nextion.h: 169: writeEEPROM(27, aband);
  2388  0015B2  C0F1  F005         	movff	_aband,writeEEPROM@data	;volatile
  2389  0015B6  0E1B               	movlw	27
  2390  0015B8  EC34  F010         	call	_writeEEPROM
  2391                           
  2392                           ;nextion.h: 170: if (aband == 0)
  2393  0015BC  0100               	movlb	0	; () banked
  2394  0015BE  51F1               	movf	_aband& (0+255),w,b	;volatile
  2395  0015C0  E104               	bnz	l4564
  2396                           
  2397                           ; BSR set to: 0
  2398                           ;nextion.h: 171: {;nextion.h: 172: EEmbandRead();
  2399  0015C2  EC6A  F010         	call	_EEmbandRead	;wreg free
  2400                           
  2401                           ;nextion.h: 173: SetBand();
  2402  0015C6  EC7B  F00E         	call	_SetBand	;wreg free
  2403  0015CA                     l4564:
  2404                           
  2405                           ;nextion.h: 174: };nextion.h: 175: };nextion.h: 177: if (buffRX[1] <= 0x07)
  2406  0015CA  0E08               	movlw	8
  2407  0015CC  0100               	movlb	0	; () banked
  2408  0015CE  61D0               	cpfslt	(_buffRX+1)& (0+255),b	;volatile
  2409  0015D0  D00F               	goto	l4574
  2410                           
  2411                           ; BSR set to: 0
  2412                           ;nextion.h: 178: {;nextion.h: 179: aband = 0;
  2413  0015D2  6BF1               	clrf	_aband& (0+255),b	;volatile
  2414                           
  2415                           ;nextion.h: 180: band = buffRX[1];
  2416  0015D4  C0D0  F057         	movff	_buffRX+1,_band	;volatile
  2417                           
  2418                           ; BSR set to: 0
  2419                           ;nextion.h: 181: SetBand();
  2420  0015D8  EC7B  F00E         	call	_SetBand	;wreg free
  2421                           
  2422                           ;nextion.h: 182: writeEEPROM(26, band);
  2423  0015DC  C057  F005         	movff	_band,writeEEPROM@data	;volatile
  2424  0015E0  0E1A               	movlw	26
  2425  0015E2  EC34  F010         	call	_writeEEPROM
  2426                           
  2427                           ;nextion.h: 183: writeEEPROM(27, aband);
  2428  0015E6  C0F1  F005         	movff	_aband,writeEEPROM@data	;volatile
  2429  0015EA  0E1B               	movlw	27
  2430  0015EC  EC34  F010         	call	_writeEEPROM
  2431  0015F0                     l4574:
  2432  0015F0  FFFF               	dw	65535	; assembler added errata NOP
  2433                           
  2434                           ;nextion.h: 184: };nextion.h: 185: };nextion.h: 187: if (buffRX[1] == 0x20)
  2435  0015F2  0E20               	movlw	32
  2436  0015F4  0100               	movlb	0	; () banked
  2437  0015F6  19D0               	xorwf	(_buffRX+1)& (0+255),w,b	;volatile
  2438  0015F8  E1A4               	bnz	u5280
  2439                           
  2440                           ; BSR set to: 0
  2441                           ;nextion.h: 188: {;nextion.h: 189: SetupMode();
  2442  0015FA  EC45  F003         	call	_SetupMode	;wreg free
  2443                           
  2444                           ;nextion.h: 190: EEsetupRead();
  2445  0015FE  EC38  F005         	call	_EEsetupRead	;wreg free
  2446                           
  2447                           ; BSR set to: 0
  2448                           ;nextion.h: 191: LCDpageSelect(0xA0);
  2449  001602  0EA0               	movlw	160
  2450  001604  ECF9  F00E         	call	_LCDpageSelect
  2451                           
  2452                           ;nextion.h: 192: Beep();
  2453  001608  EC77  F011         	call	_Beep	;wreg free
  2454  00160C  D79A               	goto	u5280
  2455  00160E                     l524:
  2456  00160E  FFFF               	dw	65535	; assembler added errata NOP
  2457                           
  2458                           ; BSR set to: 0
  2459  001610  0012               	return		;funcret
  2460  001612  FFFF               	dw	65535	; errata NOP
  2461  001614                     __end_of_ReadStatusFromLCD:
  2462                           	opt stack 0
  2463                           stkptr	equ	0xFFC
  2464                           tblptru	equ	0xFF8
  2465                           tblptrh	equ	0xFF7
  2466                           tblptrl	equ	0xFF6
  2467                           tablat	equ	0xFF5
  2468                           intcon	equ	0xFF2
  2469                           intcon2	equ	0xFF1
  2470                           postinc0	equ	0xFEE
  2471                           wreg	equ	0xFE8
  2472                           status	equ	0xFD8
  2473                           
  2474 ;; *************** function _SetupMode *****************
  2475 ;; Defined at:
  2476 ;;		line 208 in file "../nextion.h"
  2477 ;; Parameters:    Size  Location     Type
  2478 ;;		None
  2479 ;; Auto vars:     Size  Location     Type
  2480 ;;  lW              2   33[COMRAM] unsigned int 
  2481 ;;  rW              2   31[COMRAM] unsigned int 
  2482 ;;  pW              2   29[COMRAM] unsigned int 
  2483 ;;  eadr            1   35[COMRAM] unsigned char 
  2484 ;; Return value:  Size  Location     Type
  2485 ;;                  1    wreg      void 
  2486 ;; Registers used:
  2487 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2488 ;; Tracked objects:
  2489 ;;		On entry : 3F/0
  2490 ;;		On exit  : 0/0
  2491 ;;		Unchanged: 0/0
  2492 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2493 ;;      Params:         0       0       0       0       0       0       0
  2494 ;;      Locals:         7       0       0       0       0       0       0
  2495 ;;      Temps:         10       0       0       0       0       0       0
  2496 ;;      Totals:        17       0       0       0       0       0       0
  2497 ;;Total ram usage:       17 bytes
  2498 ;; Hardware stack levels used:    1
  2499 ;; Hardware stack levels required when called:    7
  2500 ;; This function calls:
  2501 ;;		_CreateBuffTX
  2502 ;;		_LCDpageSelect
  2503 ;;		_RXrestart
  2504 ;;		_SendUSART
  2505 ;;		_SwitchOFF
  2506 ;;		___lldiv
  2507 ;;		___lwdiv
  2508 ;;		_writeEEPROM
  2509 ;;		_writeEEPROM16
  2510 ;; This function is called by:
  2511 ;;		_ReadStatusFromLCD
  2512 ;; This function uses a non-reentrant model
  2513 ;;
  2514                           
  2515                           	psect	text7
  2516  00068A                     __ptext7:
  2517                           	opt stack 0
  2518  00068A                     _SetupMode:
  2519                           	opt stack 0
  2520  00068A  FFFF               	dw	65535	; assembler added errata NOP
  2521                           
  2522                           ; BSR set to: 0
  2523                           ;nextion.h: 210: unsigned int pW,rW,lW;;nextion.h: 211: unsigned char eadr;;nextion.h: 2
      +                          13: SwitchOFF();
  2524                           
  2525                           ; BSR set to: 0
  2526                           ;incstack = 0
  2527  00068C  ECD2  F011         	call	_SwitchOFF	;wreg free
  2528                           
  2529                           ; BSR set to: 0
  2530                           ;nextion.h: 215: pW = (unsigned int)(((unsigned long)max_pwr * (unsigned long)max_pwr) /
      +                           (unsigned long)870) + 1;
  2531  000690  C0E9  F014         	movff	_max_pwr,??_SetupMode	;volatile
  2532  000694  C0EA  F015         	movff	_max_pwr+1,??_SetupMode+1	;volatile
  2533  000698  51E9               	movf	_max_pwr& (0+255),w,b	;volatile
  2534  00069A  6E16               	movwf	(??_SetupMode+2)& (0+255),c
  2535  00069C  51EA               	movf	(_max_pwr+1)& (0+255),w,b	;volatile
  2536  00069E  6E17               	movwf	(??_SetupMode+3)& (0+255),c
  2537  0006A0  6A18               	clrf	(??_SetupMode+4)& (0+255),c
  2538  0006A2  6A19               	clrf	(??_SetupMode+5)& (0+255),c
  2539  0006A4  5016               	movf	(??_SetupMode+2)& (0+255),w,c
  2540  0006A6  0214               	mulwf	??_SetupMode& (0+255),c
  2541  0006A8  CFF3 F01A          	movff	prodl,??_SetupMode+6
  2542  0006AC  CFF4 F01B          	movff	prodh,??_SetupMode+7
  2543  0006B0  6A1C               	clrf	(??_SetupMode+8)& (0+255),c
  2544  0006B2  6A1D               	clrf	(??_SetupMode+9)& (0+255),c
  2545  0006B4  0215               	mulwf	(??_SetupMode+1)& (0+255),c
  2546  0006B6  50F3               	movf	prodl,w,c
  2547  0006B8  261B               	addwf	(??_SetupMode+7)& (0+255),f,c
  2548  0006BA  50F4               	movf	prodh,w,c
  2549  0006BC  221C               	addwfc	(??_SetupMode+8)& (0+255),f,c
  2550  0006BE  0E00               	movlw	0
  2551  0006C0  221D               	addwfc	(??_SetupMode+9)& (0+255),f,c
  2552  0006C2  5017               	movf	(??_SetupMode+3)& (0+255),w,c
  2553  0006C4  0214               	mulwf	??_SetupMode& (0+255),c
  2554  0006C6  50F3               	movf	prodl,w,c
  2555  0006C8  261B               	addwf	(??_SetupMode+7)& (0+255),f,c
  2556  0006CA  50F4               	movf	prodh,w,c
  2557  0006CC  221C               	addwfc	(??_SetupMode+8)& (0+255),f,c
  2558  0006CE  0E00               	movlw	0
  2559  0006D0  221D               	addwfc	(??_SetupMode+9)& (0+255),f,c
  2560  0006D2  5017               	movf	(??_SetupMode+3)& (0+255),w,c
  2561  0006D4  0215               	mulwf	(??_SetupMode+1)& (0+255),c
  2562  0006D6  50F3               	movf	prodl,w,c
  2563  0006D8  261C               	addwf	(??_SetupMode+8)& (0+255),f,c
  2564  0006DA  50F4               	movf	prodh,w,c
  2565  0006DC  221D               	addwfc	(??_SetupMode+9)& (0+255),f,c
  2566  0006DE  5018               	movf	(??_SetupMode+4)& (0+255),w,c
  2567  0006E0  0214               	mulwf	??_SetupMode& (0+255),c
  2568  0006E2  50F3               	movf	prodl,w,c
  2569  0006E4  261C               	addwf	(??_SetupMode+8)& (0+255),f,c
  2570  0006E6  50F4               	movf	prodh,w,c
  2571  0006E8  221D               	addwfc	(??_SetupMode+9)& (0+255),f,c
  2572  0006EA  5018               	movf	(??_SetupMode+4)& (0+255),w,c
  2573  0006EC  0215               	mulwf	(??_SetupMode+1)& (0+255),c
  2574  0006EE  50F3               	movf	prodl,w,c
  2575  0006F0  261D               	addwf	(??_SetupMode+9)& (0+255),f,c
  2576  0006F2  5019               	movf	(??_SetupMode+5)& (0+255),w,c
  2577  0006F4  0214               	mulwf	??_SetupMode& (0+255),c
  2578  0006F6  50F3               	movf	prodl,w,c
  2579  0006F8  261D               	addwf	(??_SetupMode+9)& (0+255),f,c
  2580  0006FA  C01A  F005         	movff	??_SetupMode+6,___lldiv@dividend
  2581  0006FE  C01B  F006         	movff	??_SetupMode+7,___lldiv@dividend+1
  2582  000702  C01C  F007         	movff	??_SetupMode+8,___lldiv@dividend+2
  2583  000706  C01D  F008         	movff	??_SetupMode+9,___lldiv@dividend+3
  2584  00070A  0E66               	movlw	102
  2585  00070C  6E09               	movwf	___lldiv@divisor,c
  2586  00070E  0E03               	movlw	3
  2587  000710  6E0A               	movwf	___lldiv@divisor+1,c
  2588  000712  6A0B               	clrf	___lldiv@divisor+2,c
  2589  000714  6A0C               	clrf	___lldiv@divisor+3,c
  2590  000716  EC3B  F00E         	call	___lldiv	;wreg free
  2591  00071A  2805               	incf	?___lldiv,w,c
  2592  00071C  6E1E               	movwf	SetupMode@pW,c
  2593  00071E  0E00               	movlw	0
  2594  000720  2006               	addwfc	?___lldiv+1,w,c
  2595  000722  6E1F               	movwf	SetupMode@pW+1,c
  2596                           
  2597                           ; BSR set to: 0
  2598                           ;nextion.h: 216: rW = (unsigned int)(((unsigned long)max_ref * (unsigned long)max_ref) /
      +                           (unsigned long)870) + 1;
  2599  000724  C0E7  F014         	movff	_max_ref,??_SetupMode	;volatile
  2600  000728  C0E8  F015         	movff	_max_ref+1,??_SetupMode+1	;volatile
  2601  00072C  51E7               	movf	_max_ref& (0+255),w,b	;volatile
  2602  00072E  6E16               	movwf	(??_SetupMode+2)& (0+255),c
  2603  000730  51E8               	movf	(_max_ref+1)& (0+255),w,b	;volatile
  2604  000732  6E17               	movwf	(??_SetupMode+3)& (0+255),c
  2605  000734  6A18               	clrf	(??_SetupMode+4)& (0+255),c
  2606  000736  6A19               	clrf	(??_SetupMode+5)& (0+255),c
  2607  000738  5016               	movf	(??_SetupMode+2)& (0+255),w,c
  2608  00073A  0214               	mulwf	??_SetupMode& (0+255),c
  2609  00073C  CFF3 F01A          	movff	prodl,??_SetupMode+6
  2610  000740  CFF4 F01B          	movff	prodh,??_SetupMode+7
  2611  000744  6A1C               	clrf	(??_SetupMode+8)& (0+255),c
  2612  000746  6A1D               	clrf	(??_SetupMode+9)& (0+255),c
  2613  000748  0215               	mulwf	(??_SetupMode+1)& (0+255),c
  2614  00074A  50F3               	movf	prodl,w,c
  2615  00074C  261B               	addwf	(??_SetupMode+7)& (0+255),f,c
  2616  00074E  50F4               	movf	prodh,w,c
  2617  000750  221C               	addwfc	(??_SetupMode+8)& (0+255),f,c
  2618  000752  0E00               	movlw	0
  2619  000754  221D               	addwfc	(??_SetupMode+9)& (0+255),f,c
  2620  000756  5017               	movf	(??_SetupMode+3)& (0+255),w,c
  2621  000758  0214               	mulwf	??_SetupMode& (0+255),c
  2622  00075A  50F3               	movf	prodl,w,c
  2623  00075C  261B               	addwf	(??_SetupMode+7)& (0+255),f,c
  2624  00075E  50F4               	movf	prodh,w,c
  2625  000760  221C               	addwfc	(??_SetupMode+8)& (0+255),f,c
  2626  000762  0E00               	movlw	0
  2627  000764  221D               	addwfc	(??_SetupMode+9)& (0+255),f,c
  2628  000766  5017               	movf	(??_SetupMode+3)& (0+255),w,c
  2629  000768  0215               	mulwf	(??_SetupMode+1)& (0+255),c
  2630  00076A  50F3               	movf	prodl,w,c
  2631  00076C  261C               	addwf	(??_SetupMode+8)& (0+255),f,c
  2632  00076E  50F4               	movf	prodh,w,c
  2633  000770  221D               	addwfc	(??_SetupMode+9)& (0+255),f,c
  2634  000772  5018               	movf	(??_SetupMode+4)& (0+255),w,c
  2635  000774  0214               	mulwf	??_SetupMode& (0+255),c
  2636  000776  50F3               	movf	prodl,w,c
  2637  000778  261C               	addwf	(??_SetupMode+8)& (0+255),f,c
  2638  00077A  50F4               	movf	prodh,w,c
  2639  00077C  221D               	addwfc	(??_SetupMode+9)& (0+255),f,c
  2640  00077E  5018               	movf	(??_SetupMode+4)& (0+255),w,c
  2641  000780  0215               	mulwf	(??_SetupMode+1)& (0+255),c
  2642  000782  50F3               	movf	prodl,w,c
  2643  000784  261D               	addwf	(??_SetupMode+9)& (0+255),f,c
  2644  000786  5019               	movf	(??_SetupMode+5)& (0+255),w,c
  2645  000788  0214               	mulwf	??_SetupMode& (0+255),c
  2646  00078A  50F3               	movf	prodl,w,c
  2647  00078C  261D               	addwf	(??_SetupMode+9)& (0+255),f,c
  2648  00078E  C01A  F005         	movff	??_SetupMode+6,___lldiv@dividend
  2649  000792  C01B  F006         	movff	??_SetupMode+7,___lldiv@dividend+1
  2650  000796  C01C  F007         	movff	??_SetupMode+8,___lldiv@dividend+2
  2651  00079A  C01D  F008         	movff	??_SetupMode+9,___lldiv@dividend+3
  2652  00079E  0E66               	movlw	102
  2653  0007A0  6E09               	movwf	___lldiv@divisor,c
  2654  0007A2  0E03               	movlw	3
  2655  0007A4  6E0A               	movwf	___lldiv@divisor+1,c
  2656  0007A6  6A0B               	clrf	___lldiv@divisor+2,c
  2657  0007A8  6A0C               	clrf	___lldiv@divisor+3,c
  2658  0007AA  EC3B  F00E         	call	___lldiv	;wreg free
  2659  0007AE  2805               	incf	?___lldiv,w,c
  2660  0007B0  6E20               	movwf	SetupMode@rW,c
  2661  0007B2  0E00               	movlw	0
  2662  0007B4  2006               	addwfc	?___lldiv+1,w,c
  2663  0007B6  6E21               	movwf	SetupMode@rW+1,c
  2664                           
  2665                           ; BSR set to: 0
  2666                           ;nextion.h: 217: lW = (unsigned int)(((unsigned long)lpferrP * (unsigned long)lpferrP) /
      +                           (unsigned long)870) + 1;
  2667  0007B8  C0DD  F014         	movff	_lpferrP,??_SetupMode	;volatile
  2668  0007BC  C0DE  F015         	movff	_lpferrP+1,??_SetupMode+1	;volatile
  2669  0007C0  51DD               	movf	_lpferrP& (0+255),w,b	;volatile
  2670  0007C2  6E16               	movwf	(??_SetupMode+2)& (0+255),c
  2671  0007C4  51DE               	movf	(_lpferrP+1)& (0+255),w,b	;volatile
  2672  0007C6  6E17               	movwf	(??_SetupMode+3)& (0+255),c
  2673  0007C8  6A18               	clrf	(??_SetupMode+4)& (0+255),c
  2674  0007CA  6A19               	clrf	(??_SetupMode+5)& (0+255),c
  2675  0007CC  5016               	movf	(??_SetupMode+2)& (0+255),w,c
  2676  0007CE  0214               	mulwf	??_SetupMode& (0+255),c
  2677  0007D0  CFF3 F01A          	movff	prodl,??_SetupMode+6
  2678  0007D4  CFF4 F01B          	movff	prodh,??_SetupMode+7
  2679  0007D8  6A1C               	clrf	(??_SetupMode+8)& (0+255),c
  2680  0007DA  6A1D               	clrf	(??_SetupMode+9)& (0+255),c
  2681  0007DC  0215               	mulwf	(??_SetupMode+1)& (0+255),c
  2682  0007DE  50F3               	movf	prodl,w,c
  2683  0007E0  261B               	addwf	(??_SetupMode+7)& (0+255),f,c
  2684  0007E2  50F4               	movf	prodh,w,c
  2685  0007E4  221C               	addwfc	(??_SetupMode+8)& (0+255),f,c
  2686  0007E6  0E00               	movlw	0
  2687  0007E8  221D               	addwfc	(??_SetupMode+9)& (0+255),f,c
  2688  0007EA  5017               	movf	(??_SetupMode+3)& (0+255),w,c
  2689  0007EC  0214               	mulwf	??_SetupMode& (0+255),c
  2690  0007EE  50F3               	movf	prodl,w,c
  2691  0007F0  261B               	addwf	(??_SetupMode+7)& (0+255),f,c
  2692  0007F2  50F4               	movf	prodh,w,c
  2693  0007F4  221C               	addwfc	(??_SetupMode+8)& (0+255),f,c
  2694  0007F6  0E00               	movlw	0
  2695  0007F8  221D               	addwfc	(??_SetupMode+9)& (0+255),f,c
  2696  0007FA  5017               	movf	(??_SetupMode+3)& (0+255),w,c
  2697  0007FC  0215               	mulwf	(??_SetupMode+1)& (0+255),c
  2698  0007FE  50F3               	movf	prodl,w,c
  2699  000800  261C               	addwf	(??_SetupMode+8)& (0+255),f,c
  2700  000802  50F4               	movf	prodh,w,c
  2701  000804  221D               	addwfc	(??_SetupMode+9)& (0+255),f,c
  2702  000806  5018               	movf	(??_SetupMode+4)& (0+255),w,c
  2703  000808  0214               	mulwf	??_SetupMode& (0+255),c
  2704  00080A  50F3               	movf	prodl,w,c
  2705  00080C  261C               	addwf	(??_SetupMode+8)& (0+255),f,c
  2706  00080E  50F4               	movf	prodh,w,c
  2707  000810  221D               	addwfc	(??_SetupMode+9)& (0+255),f,c
  2708  000812  5018               	movf	(??_SetupMode+4)& (0+255),w,c
  2709  000814  0215               	mulwf	(??_SetupMode+1)& (0+255),c
  2710  000816  50F3               	movf	prodl,w,c
  2711  000818  261D               	addwf	(??_SetupMode+9)& (0+255),f,c
  2712  00081A  5019               	movf	(??_SetupMode+5)& (0+255),w,c
  2713  00081C  0214               	mulwf	??_SetupMode& (0+255),c
  2714  00081E  50F3               	movf	prodl,w,c
  2715  000820  261D               	addwf	(??_SetupMode+9)& (0+255),f,c
  2716  000822  C01A  F005         	movff	??_SetupMode+6,___lldiv@dividend
  2717  000826  C01B  F006         	movff	??_SetupMode+7,___lldiv@dividend+1
  2718  00082A  C01C  F007         	movff	??_SetupMode+8,___lldiv@dividend+2
  2719  00082E  C01D  F008         	movff	??_SetupMode+9,___lldiv@dividend+3
  2720  000832  0E66               	movlw	102
  2721  000834  6E09               	movwf	___lldiv@divisor,c
  2722  000836  0E03               	movlw	3
  2723  000838  6E0A               	movwf	___lldiv@divisor+1,c
  2724  00083A  6A0B               	clrf	___lldiv@divisor+2,c
  2725  00083C  6A0C               	clrf	___lldiv@divisor+3,c
  2726  00083E  EC3B  F00E         	call	___lldiv	;wreg free
  2727  000842  2805               	incf	?___lldiv,w,c
  2728  000844  6E22               	movwf	SetupMode@lW,c
  2729  000846  0E00               	movlw	0
  2730  000848  2006               	addwfc	?___lldiv+1,w,c
  2731  00084A  6E23               	movwf	SetupMode@lW+1,c
  2732                           
  2733                           ; BSR set to: 0
  2734                           ;nextion.h: 219: CreateBuffTX("mfrw", pW); SendUSART();
  2735  00084C  0E47               	movlw	low STR_5
  2736  00084E  6E0C               	movwf	CreateBuffTX@str,c
  2737  000850  C01E  F00D         	movff	SetupMode@pW,CreateBuffTX@data
  2738  000854  C01F  F00E         	movff	SetupMode@pW+1,CreateBuffTX@data+1
  2739  000858  6A0F               	clrf	CreateBuffTX@data+2,c
  2740  00085A  6A10               	clrf	CreateBuffTX@data+3,c
  2741  00085C  ECF0  F00D         	call	_CreateBuffTX	;wreg free
  2742  000860  EC93  F011         	call	_SendUSART	;wreg free
  2743                           
  2744                           ;nextion.h: 220: CreateBuffTX("mref", rW); SendUSART();
  2745  000864  0E29               	movlw	low STR_6
  2746  000866  6E0C               	movwf	CreateBuffTX@str,c
  2747  000868  C020  F00D         	movff	SetupMode@rW,CreateBuffTX@data
  2748  00086C  C021  F00E         	movff	SetupMode@rW+1,CreateBuffTX@data+1
  2749  000870  6A0F               	clrf	CreateBuffTX@data+2,c
  2750  000872  6A10               	clrf	CreateBuffTX@data+3,c
  2751  000874  ECF0  F00D         	call	_CreateBuffTX	;wreg free
  2752  000878  EC93  F011         	call	_SendUSART	;wreg free
  2753                           
  2754                           ;nextion.h: 221: CreateBuffTX("mcur", max_curr); SendUSART();
  2755  00087C  0E3D               	movlw	low STR_7
  2756  00087E  6E0C               	movwf	CreateBuffTX@str,c
  2757  000880  C0E3  F00D         	movff	_max_curr,CreateBuffTX@data	;volatile
  2758  000884  C0E4  F00E         	movff	_max_curr+1,CreateBuffTX@data+1	;volatile
  2759  000888  6A0F               	clrf	CreateBuffTX@data+2,c
  2760  00088A  6A10               	clrf	CreateBuffTX@data+3,c
  2761  00088C  ECF0  F00D         	call	_CreateBuffTX	;wreg free
  2762  000890  EC93  F011         	call	_SendUSART	;wreg free
  2763                           
  2764                           ;nextion.h: 222: CreateBuffTX("mvol", max_volt); SendUSART();
  2765  000894  0E38               	movlw	low STR_8
  2766  000896  6E0C               	movwf	CreateBuffTX@str,c
  2767  000898  C0E5  F00D         	movff	_max_volt,CreateBuffTX@data	;volatile
  2768  00089C  C0E6  F00E         	movff	_max_volt+1,CreateBuffTX@data+1	;volatile
  2769  0008A0  6A0F               	clrf	CreateBuffTX@data+2,c
  2770  0008A2  6A10               	clrf	CreateBuffTX@data+3,c
  2771  0008A4  ECF0  F00D         	call	_CreateBuffTX	;wreg free
  2772  0008A8  EC93  F011         	call	_SendUSART	;wreg free
  2773                           
  2774                           ;nextion.h: 223: CreateBuffTX("mlp", lW); SendUSART();
  2775  0008AC  0E70               	movlw	low STR_9
  2776  0008AE  6E0C               	movwf	CreateBuffTX@str,c
  2777  0008B0  C022  F00D         	movff	SetupMode@lW,CreateBuffTX@data
  2778  0008B4  C023  F00E         	movff	SetupMode@lW+1,CreateBuffTX@data+1
  2779  0008B8  6A0F               	clrf	CreateBuffTX@data+2,c
  2780  0008BA  6A10               	clrf	CreateBuffTX@data+3,c
  2781  0008BC  ECF0  F00D         	call	_CreateBuffTX	;wreg free
  2782  0008C0  EC93  F011         	call	_SendUSART	;wreg free
  2783                           
  2784                           ;nextion.h: 224: CreateBuffTX("mlc", lpferrC); SendUSART();
  2785  0008C4  0E54               	movlw	low STR_10
  2786  0008C6  6E0C               	movwf	CreateBuffTX@str,c
  2787  0008C8  C0DB  F00D         	movff	_lpferrC,CreateBuffTX@data	;volatile
  2788  0008CC  C0DC  F00E         	movff	_lpferrC+1,CreateBuffTX@data+1	;volatile
  2789  0008D0  6A0F               	clrf	CreateBuffTX@data+2,c
  2790  0008D2  6A10               	clrf	CreateBuffTX@data+3,c
  2791  0008D4  ECF0  F00D         	call	_CreateBuffTX	;wreg free
  2792  0008D8  EC93  F011         	call	_SendUSART	;wreg free
  2793                           
  2794                           ;nextion.h: 225: CreateBuffTX("mrt", lpferrR/10); SendUSART();
  2795  0008DC  0E84               	movlw	low STR_11
  2796  0008DE  6E0C               	movwf	CreateBuffTX@str,c
  2797  0008E0  C0D9  F005         	movff	_lpferrR,___lwdiv@dividend	;volatile
  2798  0008E4  C0DA  F006         	movff	_lpferrR+1,___lwdiv@dividend+1	;volatile
  2799  0008E8  6A08               	clrf	___lwdiv@divisor+1,c
  2800  0008EA  0E0A               	movlw	10
  2801  0008EC  6E07               	movwf	___lwdiv@divisor,c
  2802  0008EE  EC60  F00F         	call	___lwdiv	;wreg free
  2803  0008F2  C005  F00D         	movff	?___lwdiv,CreateBuffTX@data
  2804  0008F6  C006  F00E         	movff	?___lwdiv+1,CreateBuffTX@data+1
  2805  0008FA  6A0F               	clrf	CreateBuffTX@data+2,c
  2806  0008FC  6A10               	clrf	CreateBuffTX@data+3,c
  2807  0008FE  ECF0  F00D         	call	_CreateBuffTX	;wreg free
  2808  000902  EC93  F011         	call	_SendUSART	;wreg free
  2809                           
  2810                           ;nextion.h: 226: CreateBuffTX("mhe", ptt_hold); SendUSART();
  2811  000906  0E60               	movlw	low STR_12
  2812  000908  6E0C               	movwf	CreateBuffTX@str,c
  2813  00090A  0100               	movlb	0	; () banked
  2814  00090C  51EB               	movf	_ptt_hold& (0+255),w,b	;volatile
  2815  00090E  6E0D               	movwf	CreateBuffTX@data,c
  2816  000910  6A0E               	clrf	CreateBuffTX@data+1,c
  2817  000912  6A0F               	clrf	CreateBuffTX@data+2,c
  2818  000914  6A10               	clrf	CreateBuffTX@data+3,c
  2819  000916  ECF0  F00D         	call	_CreateBuffTX	;wreg free
  2820  00091A  EC93  F011         	call	_SendUSART	;wreg free
  2821                           
  2822                           ;nextion.h: 227: CreateBuffTX("mtp", max_temp); SendUSART();
  2823  00091E  0E74               	movlw	low STR_13
  2824  000920  6E0C               	movwf	CreateBuffTX@str,c
  2825  000922  C0E1  F00D         	movff	_max_temp,CreateBuffTX@data	;volatile
  2826  000926  C0E2  F00E         	movff	_max_temp+1,CreateBuffTX@data+1	;volatile
  2827  00092A  6A0F               	clrf	CreateBuffTX@data+2,c
  2828  00092C  6A10               	clrf	CreateBuffTX@data+3,c
  2829  00092E  ECF0  F00D         	call	_CreateBuffTX	;wreg free
  2830  000932  EC93  F011         	call	_SendUSART	;wreg free
  2831                           
  2832                           ;nextion.h: 228: CreateBuffTX("mtf", max_tFAN); SendUSART();
  2833  000936  0E64               	movlw	low STR_14
  2834  000938  6E0C               	movwf	CreateBuffTX@str,c
  2835  00093A  C0DF  F00D         	movff	_max_tFAN,CreateBuffTX@data	;volatile
  2836  00093E  C0E0  F00E         	movff	_max_tFAN+1,CreateBuffTX@data+1	;volatile
  2837  000942  6A0F               	clrf	CreateBuffTX@data+2,c
  2838  000944  6A10               	clrf	CreateBuffTX@data+3,c
  2839  000946  ECF0  F00D         	call	_CreateBuffTX	;wreg free
  2840  00094A  EC93  F011         	call	_SendUSART	;wreg free
  2841                           
  2842                           ;nextion.h: 229: CreateBuffTX("mtph", hystT); SendUSART();
  2843  00094E  0E33               	movlw	low STR_15
  2844  000950  6E0C               	movwf	CreateBuffTX@str,c
  2845  000952  0100               	movlb	0	; () banked
  2846  000954  51F0               	movf	_hystT& (0+255),w,b	;volatile
  2847  000956  6E0D               	movwf	CreateBuffTX@data,c
  2848  000958  6A0E               	clrf	CreateBuffTX@data+1,c
  2849  00095A  6A0F               	clrf	CreateBuffTX@data+2,c
  2850  00095C  6A10               	clrf	CreateBuffTX@data+3,c
  2851  00095E  ECF0  F00D         	call	_CreateBuffTX	;wreg free
  2852  000962  EC93  F011         	call	_SendUSART	;wreg free
  2853                           
  2854                           ;nextion.h: 230: CreateBuffTX("mtfh", hystF); SendUSART();
  2855  000966  0E2E               	movlw	low STR_16
  2856  000968  6E0C               	movwf	CreateBuffTX@str,c
  2857  00096A  0100               	movlb	0	; () banked
  2858  00096C  51EF               	movf	_hystF& (0+255),w,b	;volatile
  2859  00096E  6E0D               	movwf	CreateBuffTX@data,c
  2860  000970  6A0E               	clrf	CreateBuffTX@data+1,c
  2861  000972  6A0F               	clrf	CreateBuffTX@data+2,c
  2862  000974  6A10               	clrf	CreateBuffTX@data+3,c
  2863  000976  ECF0  F00D         	call	_CreateBuffTX	;wreg free
  2864  00097A  EC93  F011         	call	_SendUSART	;wreg free
  2865                           
  2866                           ;nextion.h: 231: CreateBuffTX("mrd", reldel); SendUSART();
  2867  00097E  0E5C               	movlw	low STR_17
  2868  000980  6E0C               	movwf	CreateBuffTX@str,c
  2869  000982  0100               	movlb	0	; () banked
  2870  000984  51F5               	movf	_reldel& (0+255),w,b	;volatile
  2871  000986  6E0D               	movwf	CreateBuffTX@data,c
  2872  000988  6A0E               	clrf	CreateBuffTX@data+1,c
  2873  00098A  6A0F               	clrf	CreateBuffTX@data+2,c
  2874  00098C  6A10               	clrf	CreateBuffTX@data+3,c
  2875  00098E  ECF0  F00D         	call	_CreateBuffTX	;wreg free
  2876  000992  EC93  F011         	call	_SendUSART	;wreg free
  2877                           
  2878                           ;nextion.h: 232: CreateBuffTX("mbd", biasdel); SendUSART();
  2879  000996  0E58               	movlw	low STR_18
  2880  000998  6E0C               	movwf	CreateBuffTX@str,c
  2881  00099A  0100               	movlb	0	; () banked
  2882  00099C  51F4               	movf	_biasdel& (0+255),w,b	;volatile
  2883  00099E  6E0D               	movwf	CreateBuffTX@data,c
  2884  0009A0  6A0E               	clrf	CreateBuffTX@data+1,c
  2885  0009A2  6A0F               	clrf	CreateBuffTX@data+2,c
  2886  0009A4  6A10               	clrf	CreateBuffTX@data+3,c
  2887  0009A6  ECF0  F00D         	call	_CreateBuffTX	;wreg free
  2888  0009AA  EC93  F011         	call	_SendUSART	;wreg free
  2889                           
  2890                           ;nextion.h: 233: CreateBuffTX("mptt", fanptt); SendUSART();
  2891  0009AE  0E42               	movlw	low STR_19
  2892  0009B0  6E0C               	movwf	CreateBuffTX@str,c
  2893  0009B2  0100               	movlb	0	; () banked
  2894  0009B4  51F3               	movf	_fanptt& (0+255),w,b	;volatile
  2895  0009B6  6E0D               	movwf	CreateBuffTX@data,c
  2896  0009B8  6A0E               	clrf	CreateBuffTX@data+1,c
  2897  0009BA  6A0F               	clrf	CreateBuffTX@data+2,c
  2898  0009BC  6A10               	clrf	CreateBuffTX@data+3,c
  2899  0009BE  ECF0  F00D         	call	_CreateBuffTX	;wreg free
  2900  0009C2  EC93  F011         	call	_SendUSART	;wreg free
  2901                           
  2902                           ;nextion.h: 234: CreateBuffTX("mbp", beeper); SendUSART();
  2903  0009C6  0E6C               	movlw	low STR_20
  2904  0009C8  6E0C               	movwf	CreateBuffTX@str,c
  2905  0009CA  0100               	movlb	0	; () banked
  2906  0009CC  51EE               	movf	_beeper& (0+255),w,b	;volatile
  2907  0009CE  6E0D               	movwf	CreateBuffTX@data,c
  2908  0009D0  6A0E               	clrf	CreateBuffTX@data+1,c
  2909  0009D2  6A0F               	clrf	CreateBuffTX@data+2,c
  2910  0009D4  6A10               	clrf	CreateBuffTX@data+3,c
  2911  0009D6  ECF0  F00D         	call	_CreateBuffTX	;wreg free
  2912  0009DA  EC93  F011         	call	_SendUSART	;wreg free
  2913                           
  2914                           ;nextion.h: 235: CreateBuffTX("mts", sensor); SendUSART();
  2915  0009DE  0E80               	movlw	low STR_21
  2916  0009E0  6E0C               	movwf	CreateBuffTX@str,c
  2917  0009E2  0100               	movlb	0	; () banked
  2918  0009E4  51EC               	movf	_sensor& (0+255),w,b	;volatile
  2919  0009E6  6E0D               	movwf	CreateBuffTX@data,c
  2920  0009E8  6A0E               	clrf	CreateBuffTX@data+1,c
  2921  0009EA  6A0F               	clrf	CreateBuffTX@data+2,c
  2922  0009EC  6A10               	clrf	CreateBuffTX@data+3,c
  2923  0009EE  ECF0  F00D         	call	_CreateBuffTX	;wreg free
  2924  0009F2  EC93  F011         	call	_SendUSART	;wreg free
  2925                           
  2926                           ;nextion.h: 236: CreateBuffTX("mlg", logo); SendUSART();
  2927  0009F6  0E68               	movlw	low STR_22
  2928  0009F8  6E0C               	movwf	CreateBuffTX@str,c
  2929  0009FA  0100               	movlb	0	; () banked
  2930  0009FC  51ED               	movf	_logo& (0+255),w,b	;volatile
  2931  0009FE  6E0D               	movwf	CreateBuffTX@data,c
  2932  000A00  6A0E               	clrf	CreateBuffTX@data+1,c
  2933  000A02  6A0F               	clrf	CreateBuffTX@data+2,c
  2934  000A04  6A10               	clrf	CreateBuffTX@data+3,c
  2935  000A06  ECF0  F00D         	call	_CreateBuffTX	;wreg free
  2936  000A0A  EC93  F011         	call	_SendUSART	;wreg free
  2937                           
  2938                           ;nextion.h: 238: if (!LCDpageSelect(0xA2)) return;
  2939  000A0E  0EA2               	movlw	162
  2940  000A10  ECF9  F00E         	call	_LCDpageSelect
  2941  000A14  0900               	iorlw	0
  2942  000A16  D028               	goto	L1
  2943  000A18                     l3568:
  2944                           
  2945                           ;nextion.h: 240: RXrestart();
  2946  000A18  ECCA  F010         	call	_RXrestart	;wreg free
  2947  000A1C                     l551:
  2948                           
  2949                           ; BSR set to: 0
  2950  000A1C  0004               	clrwdt		;# 
  2951                           
  2952                           ;nextion.h: 244: if (rx_end)
  2953  000A1E  0100               	movlb	0	; () banked
  2954  000A20  5186               	movf	_rx_end& (0+255),w,b	;volatile
  2955  000A22  E0FC               	bz	l551
  2956                           
  2957                           ; BSR set to: 0
  2958                           ;nextion.h: 245: {;nextion.h: 247: if ((buffRX[0] >= 0xB0) && (buffRX[0] < 0xEE))
  2959  000A24  0EAF               	movlw	175
  2960  000A26  65CF               	cpfsgt	_buffRX& (0+255),b	;volatile
  2961  000A28  D018               	goto	l3584
  2962                           
  2963                           ; BSR set to: 0
  2964  000A2A  0EEE               	movlw	238
  2965  000A2C  61CF               	cpfslt	_buffRX& (0+255),b	;volatile
  2966  000A2E  D015               	goto	l3584
  2967                           
  2968                           ; BSR set to: 0
  2969                           ;nextion.h: 248: {;nextion.h: 249: eadr = buffRX[0] - 0xB0;
  2970  000A30  51CF               	movf	_buffRX& (0+255),w,b	;volatile
  2971  000A32  0F50               	addlw	80
  2972  000A34  6E24               	movwf	SetupMode@eadr,c
  2973                           
  2974                           ;nextion.h: 250: if (buffRX[1] == 0x1) writeEEPROM(eadr, buffRX[2]);
  2975  000A36  05D0               	decf	(_buffRX+1)& (0+255),w,b	;volatile
  2976  000A38  E105               	bnz	l3580
  2977                           
  2978                           ; BSR set to: 0
  2979  000A3A  C0D1  F005         	movff	_buffRX+2,writeEEPROM@data	;volatile
  2980  000A3E  5024               	movf	SetupMode@eadr,w,c
  2981  000A40  EC34  F010         	call	_writeEEPROM
  2982  000A44                     l3580:
  2983                           
  2984                           ;nextion.h: 251: if (buffRX[1] == 0x2) writeEEPROM16(eadr, (unsigned char *)&buffRX[2]);
  2985  000A44  0E02               	movlw	2
  2986  000A46  0100               	movlb	0	; () banked
  2987  000A48  19D0               	xorwf	(_buffRX+1)& (0+255),w,b	;volatile
  2988  000A4A  E107               	bnz	l3584
  2989                           
  2990                           ; BSR set to: 0
  2991  000A4C  C024  F008         	movff	SetupMode@eadr,writeEEPROM16@addr
  2992  000A50  6A09               	clrf	writeEEPROM16@addr+1,c
  2993  000A52  0ED1               	movlw	low (_buffRX+2)
  2994  000A54  6E0A               	movwf	writeEEPROM16@data,c
  2995  000A56  EC31  F011         	call	_writeEEPROM16	;wreg free
  2996  000A5A                     l3584:
  2997  000A5A  FFFF               	dw	65535	; assembler added errata NOP
  2998                           
  2999                           ;nextion.h: 252: };nextion.h: 254: if ((buffRX[0] == 0xF0) && (buffRX[1] == 0xF0)) break
      +                          ;
  3000  000A5C  0EF0               	movlw	240
  3001  000A5E  0100               	movlb	0	; () banked
  3002  000A60  19CF               	xorwf	_buffRX& (0+255),w,b	;volatile
  3003  000A62  E1DA               	bnz	l3568
  3004                           
  3005                           ; BSR set to: 0
  3006  000A64  0EF0               	movlw	240
  3007  000A66  19D0               	xorwf	(_buffRX+1)& (0+255),w,b	;volatile
  3008  000A68                     L1:
  3009  000A68  FFFF               	dw	65535	; assembler added errata NOP
  3010  000A6A  E1D6               	bnz	l3568
  3011  000A6C  0012               	return		;funcret
  3012  000A6E  FFFF               	dw	65535	; errata NOP
  3013  000A70                     __end_of_SetupMode:
  3014                           	opt stack 0
  3015                           stkptr	equ	0xFFC
  3016                           tblptru	equ	0xFF8
  3017                           tblptrh	equ	0xFF7
  3018                           tblptrl	equ	0xFF6
  3019                           tablat	equ	0xFF5
  3020                           prodh	equ	0xFF4
  3021                           prodl	equ	0xFF3
  3022                           intcon	equ	0xFF2
  3023                           intcon2	equ	0xFF1
  3024                           postinc0	equ	0xFEE
  3025                           wreg	equ	0xFE8
  3026                           status	equ	0xFD8
  3027                           
  3028 ;; *************** function _writeEEPROM16 *****************
  3029 ;; Defined at:
  3030 ;;		line 39 in file "../eep.h"
  3031 ;; Parameters:    Size  Location     Type
  3032 ;;  addr            2    7[COMRAM] unsigned int 
  3033 ;;  data            1    9[COMRAM] PTR unsigned char 
  3034 ;;		 -> buffRX(10), 
  3035 ;; Auto vars:     Size  Location     Type
  3036 ;;		None
  3037 ;; Return value:  Size  Location     Type
  3038 ;;                  1    wreg      void 
  3039 ;; Registers used:
  3040 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  3041 ;; Tracked objects:
  3042 ;;		On entry : 3F/0
  3043 ;;		On exit  : 0/0
  3044 ;;		Unchanged: 0/0
  3045 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3046 ;;      Params:         3       0       0       0       0       0       0
  3047 ;;      Locals:         0       0       0       0       0       0       0
  3048 ;;      Temps:          0       0       0       0       0       0       0
  3049 ;;      Totals:         3       0       0       0       0       0       0
  3050 ;;Total ram usage:        3 bytes
  3051 ;; Hardware stack levels used:    1
  3052 ;; Hardware stack levels required when called:    4
  3053 ;; This function calls:
  3054 ;;		_writeEEPROM
  3055 ;; This function is called by:
  3056 ;;		_SetupMode
  3057 ;; This function uses a non-reentrant model
  3058 ;;
  3059                           
  3060                           	psect	text8
  3061  002262                     __ptext8:
  3062                           	opt stack 0
  3063  002262                     _writeEEPROM16:
  3064                           	opt stack 0
  3065  002262  FFFF               	dw	65535	; assembler added errata NOP
  3066                           
  3067                           ; BSR set to: 0
  3068                           ;eep.h: 41: writeEEPROM(addr+0, data[0]);
  3069                           
  3070                           ;incstack = 0
  3071  002264  500A               	movf	writeEEPROM16@data,w,c
  3072  002266  6ED9               	movwf	fsr2l,c
  3073  002268  6ADA               	clrf	fsr2h,c
  3074  00226A  50DF               	movf	indf2,w,c
  3075  00226C  6E05               	movwf	writeEEPROM@data,c
  3076  00226E  5008               	movf	writeEEPROM16@addr,w,c
  3077  002270  EC34  F010         	call	_writeEEPROM
  3078                           
  3079                           ;eep.h: 42: writeEEPROM(addr+1, data[1]);
  3080  002274  500A               	movf	writeEEPROM16@data,w,c
  3081  002276  6ED9               	movwf	fsr2l,c
  3082  002278  6ADA               	clrf	fsr2h,c
  3083  00227A  2AD9               	incf	fsr2l,f,c
  3084  00227C  50DF               	movf	indf2,w,c
  3085  00227E  6E05               	movwf	writeEEPROM@data,c
  3086  002280  2808               	incf	writeEEPROM16@addr,w,c
  3087  002282  EF34  F010         	goto	_writeEEPROM
  3088  002286  FFFF               	dw	65535	; errata NOP
  3089  002288                     __end_of_writeEEPROM16:
  3090                           	opt stack 0
  3091                           stkptr	equ	0xFFC
  3092                           tblptru	equ	0xFF8
  3093                           tblptrh	equ	0xFF7
  3094                           tblptrl	equ	0xFF6
  3095                           tablat	equ	0xFF5
  3096                           prodh	equ	0xFF4
  3097                           prodl	equ	0xFF3
  3098                           intcon	equ	0xFF2
  3099                           intcon2	equ	0xFF1
  3100                           postinc0	equ	0xFEE
  3101                           wreg	equ	0xFE8
  3102                           indf2	equ	0xFDF
  3103                           fsr2h	equ	0xFDA
  3104                           fsr2l	equ	0xFD9
  3105                           status	equ	0xFD8
  3106                           
  3107 ;; *************** function _writeEEPROM *****************
  3108 ;; Defined at:
  3109 ;;		line 14 in file "../eep.h"
  3110 ;; Parameters:    Size  Location     Type
  3111 ;;  address         1    wreg     unsigned char 
  3112 ;;  data            1    4[COMRAM] unsigned char 
  3113 ;; Auto vars:     Size  Location     Type
  3114 ;;  address         1    5[COMRAM] unsigned char 
  3115 ;;  INTCON_SAVE     1    6[COMRAM] unsigned char 
  3116 ;; Return value:  Size  Location     Type
  3117 ;;                  1    wreg      void 
  3118 ;; Registers used:
  3119 ;;		wreg, status,2
  3120 ;; Tracked objects:
  3121 ;;		On entry : 0/0
  3122 ;;		On exit  : 0/0
  3123 ;;		Unchanged: 0/0
  3124 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3125 ;;      Params:         1       0       0       0       0       0       0
  3126 ;;      Locals:         2       0       0       0       0       0       0
  3127 ;;      Temps:          0       0       0       0       0       0       0
  3128 ;;      Totals:         3       0       0       0       0       0       0
  3129 ;;Total ram usage:        3 bytes
  3130 ;; Hardware stack levels used:    1
  3131 ;; Hardware stack levels required when called:    3
  3132 ;; This function calls:
  3133 ;;		Nothing
  3134 ;; This function is called by:
  3135 ;;		_writeEEPROM16
  3136 ;;		_ReadStatusFromLCD
  3137 ;;		_SetupMode
  3138 ;; This function uses a non-reentrant model
  3139 ;;
  3140                           
  3141                           	psect	text9
  3142  002068                     __ptext9:
  3143                           	opt stack 0
  3144  002068                     _writeEEPROM:
  3145                           	opt stack 0
  3146  002068  FFFF               	dw	65535	; assembler added errata NOP
  3147                           
  3148                           ;incstack = 0
  3149                           ;writeEEPROM@address stored from wreg
  3150  00206A  6E06               	movwf	writeEEPROM@address,c
  3151                           
  3152                           ;eep.h: 16: unsigned char INTCON_SAVE;;eep.h: 18: EEADR = address;
  3153  00206C  C006  FFA9         	movff	writeEEPROM@address,4009	;volatile
  3154                           
  3155                           ;eep.h: 19: EEDATA = data;
  3156  002070  C005  FFA8         	movff	writeEEPROM@data,4008	;volatile
  3157                           
  3158                           ;eep.h: 20: EECON1bits.EEPGD = 0;
  3159  002074  9EA6               	bcf	4006,7,c	;volsfr
  3160                           
  3161                           ;eep.h: 21: EECON1bits.WREN = 1;
  3162  002076  84A6               	bsf	4006,2,c	;volsfr
  3163                           
  3164                           ;eep.h: 22: INTCON_SAVE = INTCON;
  3165  002078  CFF2 F007          	movff	intcon,writeEEPROM@INTCON_SAVE	;volatile
  3166                           
  3167                           ;eep.h: 23: INTCON = 0;
  3168  00207C  6AF2               	clrf	intcon,c	;volatile
  3169                           
  3170                           ;eep.h: 24: EECON2 = 0x55;
  3171  00207E  0E55               	movlw	85
  3172  002080  6EA7               	movwf	4007,c	;volsfr
  3173                           
  3174                           ;eep.h: 25: EECON2 = 0xAA;
  3175  002082  0EAA               	movlw	170
  3176  002084  6EA7               	movwf	4007,c	;volsfr
  3177                           
  3178                           ;eep.h: 26: EECON1bits.WR = 1;
  3179  002086  82A6               	bsf	4006,1,c	;volsfr
  3180                           
  3181                           ;eep.h: 27: while (EECON1bits.WR) asm("clrwdt");
  3182  002088  D002               	goto	l256
  3183  00208A                     l257:
  3184  00208A  FFFF               	dw	65535	; assembler added errata NOP
  3185  00208C  0004               	clrwdt		;# 
  3186  00208E                     l256:
  3187  00208E  FFFF               	dw	65535	; assembler added errata NOP
  3188  002090  B2A6               	btfsc	4006,1,c	;volsfr
  3189  002092  D7FB               	goto	l257
  3190                           
  3191                           ;eep.h: 28: EECON1bits.WREN = 0;
  3192  002094  94A6               	bcf	4006,2,c	;volsfr
  3193                           
  3194                           ;eep.h: 29: INTCON = INTCON_SAVE;
  3195  002096  C007  FFF2         	movff	writeEEPROM@INTCON_SAVE,intcon	;volatile
  3196  00209A  0012               	return		;funcret
  3197  00209C  FFFF               	dw	65535	; errata NOP
  3198  00209E                     __end_of_writeEEPROM:
  3199                           	opt stack 0
  3200                           stkptr	equ	0xFFC
  3201                           tblptru	equ	0xFF8
  3202                           tblptrh	equ	0xFF7
  3203                           tblptrl	equ	0xFF6
  3204                           tablat	equ	0xFF5
  3205                           prodh	equ	0xFF4
  3206                           prodl	equ	0xFF3
  3207                           intcon	equ	0xFF2
  3208                           intcon2	equ	0xFF1
  3209                           postinc0	equ	0xFEE
  3210                           wreg	equ	0xFE8
  3211                           indf2	equ	0xFDF
  3212                           fsr2h	equ	0xFDA
  3213                           fsr2l	equ	0xFD9
  3214                           status	equ	0xFD8
  3215                           
  3216 ;; *************** function ___lwdiv *****************
  3217 ;; Defined at:
  3218 ;;		line 7 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\lwdiv.c"
  3219 ;; Parameters:    Size  Location     Type
  3220 ;;  dividend        2    4[COMRAM] unsigned int 
  3221 ;;  divisor         2    6[COMRAM] unsigned int 
  3222 ;; Auto vars:     Size  Location     Type
  3223 ;;  quotient        2    8[COMRAM] unsigned int 
  3224 ;;  counter         1   10[COMRAM] unsigned char 
  3225 ;; Return value:  Size  Location     Type
  3226 ;;                  2    4[COMRAM] unsigned int 
  3227 ;; Registers used:
  3228 ;;		wreg, status,2, status,0
  3229 ;; Tracked objects:
  3230 ;;		On entry : 0/0
  3231 ;;		On exit  : 0/0
  3232 ;;		Unchanged: 0/0
  3233 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3234 ;;      Params:         4       0       0       0       0       0       0
  3235 ;;      Locals:         3       0       0       0       0       0       0
  3236 ;;      Temps:          0       0       0       0       0       0       0
  3237 ;;      Totals:         7       0       0       0       0       0       0
  3238 ;;Total ram usage:        7 bytes
  3239 ;; Hardware stack levels used:    1
  3240 ;; Hardware stack levels required when called:    3
  3241 ;; This function calls:
  3242 ;;		Nothing
  3243 ;; This function is called by:
  3244 ;;		_SetupMode
  3245 ;; This function uses a non-reentrant model
  3246 ;;
  3247                           
  3248                           	psect	text10
  3249  001EC0                     __ptext10:
  3250                           	opt stack 0
  3251  001EC0                     ___lwdiv:
  3252                           	opt stack 0
  3253  001EC0  FFFF               	dw	65535	; assembler added errata NOP
  3254                           
  3255                           ;incstack = 0
  3256  001EC2  6A09               	clrf	___lwdiv@quotient,c
  3257  001EC4  6A0A               	clrf	___lwdiv@quotient+1,c
  3258  001EC6  5007               	movf	___lwdiv@divisor,w,c
  3259  001EC8  1008               	iorwf	___lwdiv@divisor+1,w,c
  3260  001ECA  E01E               	bz	l1071
  3261  001ECC  0E01               	movlw	1
  3262  001ECE  6E0B               	movwf	___lwdiv@counter,c
  3263  001ED0  D005               	goto	l3342
  3264  001ED2                     l3340:
  3265  001ED2  FFFF               	dw	65535	; assembler added errata NOP
  3266  001ED4  90D8               	bcf	status,0,c
  3267  001ED6  3607               	rlcf	___lwdiv@divisor,f,c
  3268  001ED8  3608               	rlcf	___lwdiv@divisor+1,f,c
  3269  001EDA  2A0B               	incf	___lwdiv@counter,f,c
  3270  001EDC                     l3342:
  3271  001EDC  FFFF               	dw	65535	; assembler added errata NOP
  3272  001EDE  AE08               	btfss	___lwdiv@divisor+1,7,c
  3273  001EE0  D7F8               	goto	l3340
  3274  001EE2                     u3340:
  3275  001EE2  FFFF               	dw	65535	; assembler added errata NOP
  3276  001EE4  90D8               	bcf	status,0,c
  3277  001EE6  3609               	rlcf	___lwdiv@quotient,f,c
  3278  001EE8  360A               	rlcf	___lwdiv@quotient+1,f,c
  3279  001EEA  5007               	movf	___lwdiv@divisor,w,c
  3280  001EEC  5C05               	subwf	___lwdiv@dividend,w,c
  3281  001EEE  5008               	movf	___lwdiv@divisor+1,w,c
  3282  001EF0  5806               	subwfb	___lwdiv@dividend+1,w,c
  3283  001EF2  E305               	bnc	l3352
  3284  001EF4  5007               	movf	___lwdiv@divisor,w,c
  3285  001EF6  5E05               	subwf	___lwdiv@dividend,f,c
  3286  001EF8  5008               	movf	___lwdiv@divisor+1,w,c
  3287  001EFA  5A06               	subwfb	___lwdiv@dividend+1,f,c
  3288  001EFC  8009               	bsf	___lwdiv@quotient,0,c
  3289  001EFE                     l3352:
  3290  001EFE  90D8               	bcf	status,0,c
  3291  001F00  3208               	rrcf	___lwdiv@divisor+1,f,c
  3292  001F02  3207               	rrcf	___lwdiv@divisor,f,c
  3293  001F04  2E0B               	decfsz	___lwdiv@counter,f,c
  3294  001F06  D7ED               	goto	u3340
  3295  001F08                     l1071:
  3296  001F08  C009  F005         	movff	___lwdiv@quotient,?___lwdiv
  3297  001F0C  C00A  F006         	movff	___lwdiv@quotient+1,?___lwdiv+1
  3298  001F10  0012               	return		;funcret
  3299  001F12  FFFF               	dw	65535	; errata NOP
  3300  001F14                     __end_of___lwdiv:
  3301                           	opt stack 0
  3302                           stkptr	equ	0xFFC
  3303                           tblptru	equ	0xFF8
  3304                           tblptrh	equ	0xFF7
  3305                           tblptrl	equ	0xFF6
  3306                           tablat	equ	0xFF5
  3307                           prodh	equ	0xFF4
  3308                           prodl	equ	0xFF3
  3309                           intcon	equ	0xFF2
  3310                           intcon2	equ	0xFF1
  3311                           postinc0	equ	0xFEE
  3312                           wreg	equ	0xFE8
  3313                           indf2	equ	0xFDF
  3314                           fsr2h	equ	0xFDA
  3315                           fsr2l	equ	0xFD9
  3316                           status	equ	0xFD8
  3317                           
  3318 ;; *************** function ___lldiv *****************
  3319 ;; Defined at:
  3320 ;;		line 7 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\__lldiv.c"
  3321 ;; Parameters:    Size  Location     Type
  3322 ;;  dividend        4    4[COMRAM] unsigned long 
  3323 ;;  divisor         4    8[COMRAM] unsigned long 
  3324 ;; Auto vars:     Size  Location     Type
  3325 ;;  quotient        4   12[COMRAM] unsigned long 
  3326 ;;  counter         1   16[COMRAM] unsigned char 
  3327 ;; Return value:  Size  Location     Type
  3328 ;;                  4    4[COMRAM] unsigned long 
  3329 ;; Registers used:
  3330 ;;		wreg, status,2, status,0
  3331 ;; Tracked objects:
  3332 ;;		On entry : 3F/0
  3333 ;;		On exit  : 3F/0
  3334 ;;		Unchanged: 3F/0
  3335 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3336 ;;      Params:         8       0       0       0       0       0       0
  3337 ;;      Locals:         5       0       0       0       0       0       0
  3338 ;;      Temps:          0       0       0       0       0       0       0
  3339 ;;      Totals:        13       0       0       0       0       0       0
  3340 ;;Total ram usage:       13 bytes
  3341 ;; Hardware stack levels used:    1
  3342 ;; Hardware stack levels required when called:    3
  3343 ;; This function calls:
  3344 ;;		Nothing
  3345 ;; This function is called by:
  3346 ;;		_SetupMode
  3347 ;; This function uses a non-reentrant model
  3348 ;;
  3349                           
  3350                           	psect	text11
  3351  001C76                     __ptext11:
  3352                           	opt stack 0
  3353  001C76                     ___lldiv:
  3354                           	opt stack 0
  3355  001C76  FFFF               	dw	65535	; assembler added errata NOP
  3356                           
  3357                           ; BSR set to: 0
  3358                           
  3359                           ;incstack = 0
  3360  001C78  6A0D               	clrf	___lldiv@quotient,c
  3361  001C7A  6A0E               	clrf	___lldiv@quotient+1,c
  3362  001C7C  6A0F               	clrf	___lldiv@quotient+2,c
  3363  001C7E  6A10               	clrf	___lldiv@quotient+3,c
  3364                           
  3365                           ; BSR set to: 0
  3366  001C80  5009               	movf	___lldiv@divisor,w,c
  3367  001C82  100A               	iorwf	___lldiv@divisor+1,w,c
  3368  001C84  100B               	iorwf	___lldiv@divisor+2,w,c
  3369  001C86  100C               	iorwf	___lldiv@divisor+3,w,c
  3370  001C88  E02C               	bz	l624
  3371                           
  3372                           ; BSR set to: 0
  3373  001C8A  0E01               	movlw	1
  3374  001C8C  6E11               	movwf	___lldiv@counter,c
  3375  001C8E  D007               	goto	l3270
  3376  001C90                     l3268:
  3377  001C90  FFFF               	dw	65535	; assembler added errata NOP
  3378                           
  3379                           ; BSR set to: 0
  3380  001C92  90D8               	bcf	status,0,c
  3381  001C94  3609               	rlcf	___lldiv@divisor,f,c
  3382  001C96  360A               	rlcf	___lldiv@divisor+1,f,c
  3383  001C98  360B               	rlcf	___lldiv@divisor+2,f,c
  3384  001C9A  360C               	rlcf	___lldiv@divisor+3,f,c
  3385  001C9C  2A11               	incf	___lldiv@counter,f,c
  3386  001C9E                     l3270:
  3387  001C9E  FFFF               	dw	65535	; assembler added errata NOP
  3388                           
  3389                           ; BSR set to: 0
  3390  001CA0  AE0C               	btfss	___lldiv@divisor+3,7,c
  3391  001CA2  D7F6               	goto	l3268
  3392  001CA4                     u3220:
  3393  001CA4  FFFF               	dw	65535	; assembler added errata NOP
  3394                           
  3395                           ; BSR set to: 0
  3396  001CA6  90D8               	bcf	status,0,c
  3397  001CA8  360D               	rlcf	___lldiv@quotient,f,c
  3398  001CAA  360E               	rlcf	___lldiv@quotient+1,f,c
  3399  001CAC  360F               	rlcf	___lldiv@quotient+2,f,c
  3400  001CAE  3610               	rlcf	___lldiv@quotient+3,f,c
  3401                           
  3402                           ; BSR set to: 0
  3403  001CB0  5009               	movf	___lldiv@divisor,w,c
  3404  001CB2  5C05               	subwf	___lldiv@dividend,w,c
  3405  001CB4  500A               	movf	___lldiv@divisor+1,w,c
  3406  001CB6  5806               	subwfb	___lldiv@dividend+1,w,c
  3407  001CB8  500B               	movf	___lldiv@divisor+2,w,c
  3408  001CBA  5807               	subwfb	___lldiv@dividend+2,w,c
  3409  001CBC  500C               	movf	___lldiv@divisor+3,w,c
  3410  001CBE  5808               	subwfb	___lldiv@dividend+3,w,c
  3411  001CC0  E309               	bnc	l3280
  3412                           
  3413                           ; BSR set to: 0
  3414  001CC2  5009               	movf	___lldiv@divisor,w,c
  3415  001CC4  5E05               	subwf	___lldiv@dividend,f,c
  3416  001CC6  500A               	movf	___lldiv@divisor+1,w,c
  3417  001CC8  5A06               	subwfb	___lldiv@dividend+1,f,c
  3418  001CCA  500B               	movf	___lldiv@divisor+2,w,c
  3419  001CCC  5A07               	subwfb	___lldiv@dividend+2,f,c
  3420  001CCE  500C               	movf	___lldiv@divisor+3,w,c
  3421  001CD0  5A08               	subwfb	___lldiv@dividend+3,f,c
  3422                           
  3423                           ; BSR set to: 0
  3424  001CD2  800D               	bsf	___lldiv@quotient,0,c
  3425  001CD4                     l3280:
  3426                           
  3427                           ; BSR set to: 0
  3428  001CD4  90D8               	bcf	status,0,c
  3429  001CD6  320C               	rrcf	___lldiv@divisor+3,f,c
  3430  001CD8  320B               	rrcf	___lldiv@divisor+2,f,c
  3431  001CDA  320A               	rrcf	___lldiv@divisor+1,f,c
  3432  001CDC  3209               	rrcf	___lldiv@divisor,f,c
  3433                           
  3434                           ; BSR set to: 0
  3435  001CDE  2E11               	decfsz	___lldiv@counter,f,c
  3436  001CE0  D7E1               	goto	u3220
  3437  001CE2                     l624:
  3438                           
  3439                           ; BSR set to: 0
  3440  001CE2  C00D  F005         	movff	___lldiv@quotient,?___lldiv
  3441  001CE6  C00E  F006         	movff	___lldiv@quotient+1,?___lldiv+1
  3442  001CEA  C00F  F007         	movff	___lldiv@quotient+2,?___lldiv+2
  3443  001CEE  C010  F008         	movff	___lldiv@quotient+3,?___lldiv+3
  3444                           
  3445                           ; BSR set to: 0
  3446  001CF2  0012               	return		;funcret
  3447  001CF4  FFFF               	dw	65535	; errata NOP
  3448  001CF6                     __end_of___lldiv:
  3449                           	opt stack 0
  3450                           stkptr	equ	0xFFC
  3451                           tblptru	equ	0xFF8
  3452                           tblptrh	equ	0xFF7
  3453                           tblptrl	equ	0xFF6
  3454                           tablat	equ	0xFF5
  3455                           prodh	equ	0xFF4
  3456                           prodl	equ	0xFF3
  3457                           intcon	equ	0xFF2
  3458                           intcon2	equ	0xFF1
  3459                           postinc0	equ	0xFEE
  3460                           wreg	equ	0xFE8
  3461                           indf2	equ	0xFDF
  3462                           fsr2h	equ	0xFDA
  3463                           fsr2l	equ	0xFD9
  3464                           status	equ	0xFD8
  3465                           
  3466 ;; *************** function _LCDpageSelect *****************
  3467 ;; Defined at:
  3468 ;;		line 290 in file "../nextion.h"
  3469 ;; Parameters:    Size  Location     Type
  3470 ;;  page            1    wreg     unsigned char 
  3471 ;; Auto vars:     Size  Location     Type
  3472 ;;  page            1   18[COMRAM] unsigned char 
  3473 ;;  tt              1   17[COMRAM] unsigned char 
  3474 ;; Return value:  Size  Location     Type
  3475 ;;                  1    wreg      unsigned char 
  3476 ;; Registers used:
  3477 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  3478 ;; Tracked objects:
  3479 ;;		On entry : 0/0
  3480 ;;		On exit  : 0/0
  3481 ;;		Unchanged: 0/0
  3482 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3483 ;;      Params:         0       0       0       0       0       0       0
  3484 ;;      Locals:         2       0       0       0       0       0       0
  3485 ;;      Temps:          0       0       0       0       0       0       0
  3486 ;;      Totals:         2       0       0       0       0       0       0
  3487 ;;Total ram usage:        2 bytes
  3488 ;; Hardware stack levels used:    1
  3489 ;; Hardware stack levels required when called:    6
  3490 ;; This function calls:
  3491 ;;		_CreateBuffTX
  3492 ;;		_SendUSART
  3493 ;;		_waitAckFromLCD
  3494 ;; This function is called by:
  3495 ;;		_ReadStatusFromLCD
  3496 ;;		_SetupMode
  3497 ;;		_main
  3498 ;; This function uses a non-reentrant model
  3499 ;;
  3500                           
  3501                           	psect	text12
  3502  001DF2                     __ptext12:
  3503                           	opt stack 0
  3504  001DF2                     _LCDpageSelect:
  3505                           	opt stack 0
  3506  001DF2  FFFF               	dw	65535	; assembler added errata NOP
  3507                           
  3508                           ; BSR set to: 0
  3509                           ;incstack = 0
  3510                           ;LCDpageSelect@page stored from wreg
  3511  001DF4  6E13               	movwf	LCDpageSelect@page,c
  3512                           
  3513                           ;nextion.h: 292: unsigned char tt = 6;
  3514  001DF6  0E06               	movlw	6
  3515  001DF8  6E12               	movwf	LCDpageSelect@tt,c
  3516                           
  3517                           ;nextion.h: 294: while (tt--)
  3518  001DFA  D029               	goto	l3256
  3519  001DFC                     l3236:
  3520                           
  3521                           ;nextion.h: 295: {;nextion.h: 296: if (page == 0xA0) CreateBuffTX("page main",0xFFFFFF);
  3522  001DFC  0EA0               	movlw	160
  3523  001DFE  1813               	xorwf	LCDpageSelect@page,w,c
  3524  001E00  E108               	bnz	l3240
  3525  001E02  0E0D               	movlw	low STR_23
  3526  001E04  6E0C               	movwf	CreateBuffTX@str,c
  3527  001E06  680D               	setf	CreateBuffTX@data,c
  3528  001E08  680E               	setf	CreateBuffTX@data+1,c
  3529  001E0A  680F               	setf	CreateBuffTX@data+2,c
  3530  001E0C  6A10               	clrf	CreateBuffTX@data+3,c
  3531  001E0E  ECF0  F00D         	call	_CreateBuffTX	;wreg free
  3532  001E12                     l3240:
  3533                           
  3534                           ;nextion.h: 297: if (page == 0xA1) CreateBuffTX("page logo",0xFFFFFF);
  3535  001E12  0EA1               	movlw	161
  3536  001E14  1813               	xorwf	LCDpageSelect@page,w,c
  3537  001E16  E108               	bnz	l3244
  3538  001E18  0E17               	movlw	low STR_24
  3539  001E1A  6E0C               	movwf	CreateBuffTX@str,c
  3540  001E1C  680D               	setf	CreateBuffTX@data,c
  3541  001E1E  680E               	setf	CreateBuffTX@data+1,c
  3542  001E20  680F               	setf	CreateBuffTX@data+2,c
  3543  001E22  6A10               	clrf	CreateBuffTX@data+3,c
  3544  001E24  ECF0  F00D         	call	_CreateBuffTX	;wreg free
  3545  001E28                     l3244:
  3546                           
  3547                           ;nextion.h: 298: if (page == 0xA2) CreateBuffTX("page setup1",0xFFFFFF);
  3548  001E28  0EA2               	movlw	162
  3549  001E2A  1813               	xorwf	LCDpageSelect@page,w,c
  3550  001E2C  E108               	bnz	l3248
  3551  001E2E  0E01               	movlw	low STR_25
  3552  001E30  6E0C               	movwf	CreateBuffTX@str,c
  3553  001E32  680D               	setf	CreateBuffTX@data,c
  3554  001E34  680E               	setf	CreateBuffTX@data+1,c
  3555  001E36  680F               	setf	CreateBuffTX@data+2,c
  3556  001E38  6A10               	clrf	CreateBuffTX@data+3,c
  3557  001E3A  ECF0  F00D         	call	_CreateBuffTX	;wreg free
  3558  001E3E                     l3248:
  3559                           
  3560                           ;nextion.h: 299: SendUSART();
  3561  001E3E  EC93  F011         	call	_SendUSART	;wreg free
  3562                           
  3563                           ;nextion.h: 301: if (waitAckFromLCD() == page) return(1);
  3564  001E42  EC8A  F00F         	call	_waitAckFromLCD	;wreg free
  3565  001E46  1813               	xorwf	LCDpageSelect@page,w,c
  3566  001E48  E102               	bnz	l3256
  3567                           
  3568                           ; BSR set to: 0
  3569  001E4A  0E01               	movlw	1
  3570  001E4C  D005               	goto	l576
  3571  001E4E                     l3256:
  3572  001E4E  FFFF               	dw	65535	; assembler added errata NOP
  3573  001E50  0612               	decf	LCDpageSelect@tt,f,c
  3574  001E52  2812               	incf	LCDpageSelect@tt,w,c
  3575  001E54  E1D3               	bnz	l3236
  3576                           
  3577                           ;nextion.h: 302: };nextion.h: 303: return(0);
  3578  001E56  0E00               	movlw	0
  3579  001E58                     l576:
  3580  001E58  FFFF               	dw	65535	; assembler added errata NOP
  3581  001E5A  0012               	return		;funcret
  3582  001E5C  FFFF               	dw	65535	; errata NOP
  3583  001E5E                     __end_of_LCDpageSelect:
  3584                           	opt stack 0
  3585                           stkptr	equ	0xFFC
  3586                           tblptru	equ	0xFF8
  3587                           tblptrh	equ	0xFF7
  3588                           tblptrl	equ	0xFF6
  3589                           tablat	equ	0xFF5
  3590                           prodh	equ	0xFF4
  3591                           prodl	equ	0xFF3
  3592                           intcon	equ	0xFF2
  3593                           intcon2	equ	0xFF1
  3594                           postinc0	equ	0xFEE
  3595                           wreg	equ	0xFE8
  3596                           indf2	equ	0xFDF
  3597                           fsr2h	equ	0xFDA
  3598                           fsr2l	equ	0xFD9
  3599                           status	equ	0xFD8
  3600                           
  3601 ;; *************** function _waitAckFromLCD *****************
  3602 ;; Defined at:
  3603 ;;		line 261 in file "../nextion.h"
  3604 ;; Parameters:    Size  Location     Type
  3605 ;;		None
  3606 ;; Auto vars:     Size  Location     Type
  3607 ;;  ack             1    4[COMRAM] unsigned char 
  3608 ;; Return value:  Size  Location     Type
  3609 ;;                  1    wreg      unsigned char 
  3610 ;; Registers used:
  3611 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  3612 ;; Tracked objects:
  3613 ;;		On entry : 0/0
  3614 ;;		On exit  : 3F/0
  3615 ;;		Unchanged: 0/0
  3616 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3617 ;;      Params:         0       0       0       0       0       0       0
  3618 ;;      Locals:         1       0       0       0       0       0       0
  3619 ;;      Temps:          0       0       0       0       0       0       0
  3620 ;;      Totals:         1       0       0       0       0       0       0
  3621 ;;Total ram usage:        1 bytes
  3622 ;; Hardware stack levels used:    1
  3623 ;; Hardware stack levels required when called:    5
  3624 ;; This function calls:
  3625 ;;		_RXrestart
  3626 ;; This function is called by:
  3627 ;;		_LCDpageSelect
  3628 ;; This function uses a non-reentrant model
  3629 ;;
  3630                           
  3631                           	psect	text13
  3632  001F14                     __ptext13:
  3633                           	opt stack 0
  3634  001F14                     _waitAckFromLCD:
  3635                           	opt stack 0
  3636  001F14  FFFF               	dw	65535	; assembler added errata NOP
  3637                           
  3638                           ;nextion.h: 263: unsigned char ack = 0;
  3639                           
  3640                           ;incstack = 0
  3641  001F16  6A05               	clrf	waitAckFromLCD@ack,c
  3642                           
  3643                           ;nextion.h: 265: RXrestart();
  3644  001F18  ECCA  F010         	call	_RXrestart	;wreg free
  3645                           
  3646                           ; BSR set to: 0
  3647                           ;nextion.h: 266: TMR0 = 0;
  3648  001F1C  6AD6               	clrf	4054,c	;volatile
  3649  001F1E  6AD7               	clrf	4055,c	;volatile
  3650                           
  3651                           ; BSR set to: 0
  3652                           ;nextion.h: 267: T0CON = 0b10000101;
  3653  001F20  0E85               	movlw	133
  3654  001F22  6ED5               	movwf	4053,c	;volatile
  3655                           
  3656                           ; BSR set to: 0
  3657                           ;nextion.h: 268: INTCONbits.TMR0IF = 0;
  3658  001F24  94F2               	bcf	intcon,2,c	;volatile
  3659                           
  3660                           ;nextion.h: 270: while(!INTCONbits.TMR0IF)
  3661  001F26  D017               	goto	l3116
  3662  001F28                     l562:
  3663  001F28  FFFF               	dw	65535	; assembler added errata NOP
  3664                           
  3665                           ; BSR set to: 0
  3666  001F2A  0004               	clrwdt		;# 
  3667                           
  3668                           ;nextion.h: 273: if (rx_end)
  3669  001F2C  0100               	movlb	0	; () banked
  3670  001F2E  5186               	movf	_rx_end& (0+255),w,b	;volatile
  3671  001F30  E012               	bz	l3116
  3672                           
  3673                           ; BSR set to: 0
  3674                           ;nextion.h: 274: {;nextion.h: 275: if ((buffRX[1] == 0x55) && (buffRX[2] == 0x77))
  3675  001F32  0E55               	movlw	85
  3676  001F34  19D0               	xorwf	(_buffRX+1)& (0+255),w,b	;volatile
  3677  001F36  E10C               	bnz	l3114
  3678                           
  3679                           ; BSR set to: 0
  3680  001F38  0E77               	movlw	119
  3681  001F3A  19D1               	xorwf	(_buffRX+2)& (0+255),w,b	;volatile
  3682  001F3C  E109               	bnz	l3114
  3683                           
  3684                           ; BSR set to: 0
  3685                           ;nextion.h: 276: {;nextion.h: 277: if ((buffRX[0] >= 0xA0) && (buffRX[0] <= 0xA2))
  3686  001F3E  0E9F               	movlw	159
  3687  001F40  65CF               	cpfsgt	_buffRX& (0+255),b	;volatile
  3688  001F42  D006               	goto	l3114
  3689                           
  3690                           ; BSR set to: 0
  3691  001F44  0EA3               	movlw	163
  3692  001F46  61CF               	cpfslt	_buffRX& (0+255),b	;volatile
  3693  001F48  D003               	goto	l3114
  3694                           
  3695                           ; BSR set to: 0
  3696                           ;nextion.h: 278: {;nextion.h: 279: ack = buffRX[0];
  3697  001F4A  C0CF  F005         	movff	_buffRX,waitAckFromLCD@ack	;volatile
  3698                           
  3699                           ;nextion.h: 280: break;
  3700  001F4E  D006               	goto	u3040
  3701  001F50                     l3114:
  3702  001F50  FFFF               	dw	65535	; assembler added errata NOP
  3703                           
  3704                           ; BSR set to: 0
  3705                           ;nextion.h: 281: };nextion.h: 282: };nextion.h: 283: RXrestart();
  3706  001F52  ECCA  F010         	call	_RXrestart	;wreg free
  3707  001F56                     l3116:
  3708  001F56  FFFF               	dw	65535	; assembler added errata NOP
  3709                           
  3710                           ; BSR set to: 0
  3711  001F58  A4F2               	btfss	intcon,2,c	;volatile
  3712  001F5A  D7E6               	goto	l562
  3713  001F5C                     u3040:
  3714  001F5C  FFFF               	dw	65535	; assembler added errata NOP
  3715                           
  3716                           ; BSR set to: 0
  3717                           ;nextion.h: 284: };nextion.h: 285: };nextion.h: 286: T0CON = 0b10000000;
  3718  001F5E  0E80               	movlw	128
  3719  001F60  6ED5               	movwf	4053,c	;volatile
  3720                           
  3721                           ;nextion.h: 287: return(ack);
  3722  001F62  5005               	movf	waitAckFromLCD@ack,w,c
  3723                           
  3724                           ; BSR set to: 0
  3725  001F64  0012               	return		;funcret
  3726  001F66  FFFF               	dw	65535	; errata NOP
  3727  001F68                     __end_of_waitAckFromLCD:
  3728                           	opt stack 0
  3729                           stkptr	equ	0xFFC
  3730                           tblptru	equ	0xFF8
  3731                           tblptrh	equ	0xFF7
  3732                           tblptrl	equ	0xFF6
  3733                           tablat	equ	0xFF5
  3734                           prodh	equ	0xFF4
  3735                           prodl	equ	0xFF3
  3736                           intcon	equ	0xFF2
  3737                           intcon2	equ	0xFF1
  3738                           postinc0	equ	0xFEE
  3739                           wreg	equ	0xFE8
  3740                           indf2	equ	0xFDF
  3741                           fsr2h	equ	0xFDA
  3742                           fsr2l	equ	0xFD9
  3743                           status	equ	0xFD8
  3744                           
  3745 ;; *************** function _RXrestart *****************
  3746 ;; Defined at:
  3747 ;;		line 17 in file "../usart.h"
  3748 ;; Parameters:    Size  Location     Type
  3749 ;;		None
  3750 ;; Auto vars:     Size  Location     Type
  3751 ;;		None
  3752 ;; Return value:  Size  Location     Type
  3753 ;;                  1    wreg      void 
  3754 ;; Registers used:
  3755 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  3756 ;; Tracked objects:
  3757 ;;		On entry : 0/0
  3758 ;;		On exit  : 3F/0
  3759 ;;		Unchanged: 0/0
  3760 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3761 ;;      Params:         0       0       0       0       0       0       0
  3762 ;;      Locals:         0       0       0       0       0       0       0
  3763 ;;      Temps:          0       0       0       0       0       0       0
  3764 ;;      Totals:         0       0       0       0       0       0       0
  3765 ;;Total ram usage:        0 bytes
  3766 ;; Hardware stack levels used:    1
  3767 ;; Hardware stack levels required when called:    4
  3768 ;; This function calls:
  3769 ;;		_RXstopTIMER
  3770 ;; This function is called by:
  3771 ;;		_ReadStatusFromLCD
  3772 ;;		_SetupMode
  3773 ;;		_waitAckFromLCD
  3774 ;; This function uses a non-reentrant model
  3775 ;;
  3776                           
  3777                           	psect	text14
  3778  002194                     __ptext14:
  3779                           	opt stack 0
  3780  002194                     _RXrestart:
  3781                           	opt stack 0
  3782  002194  FFFF               	dw	65535	; assembler added errata NOP
  3783                           
  3784                           ;usart.h: 19: RXstopTIMER();
  3785                           
  3786                           ; BSR set to: 0
  3787                           ;incstack = 0
  3788  002196  ECE2  F011         	call	_RXstopTIMER	;wreg free
  3789                           
  3790                           ;usart.h: 20: for (rxb = 0; rxb < (10-1); rxb++) buffRX[rxb] = 0x00;
  3791  00219A  6A53               	clrf	_rxb,c	;volatile
  3792  00219C  D007               	goto	l2804
  3793  00219E                     l2800:
  3794  00219E  FFFF               	dw	65535	; assembler added errata NOP
  3795  0021A0  5053               	movf	_rxb,w,c
  3796  0021A2  0FCF               	addlw	low _buffRX
  3797  0021A4  6ED9               	movwf	fsr2l,c
  3798  0021A6  6ADA               	clrf	fsr2h,c
  3799  0021A8  6ADF               	clrf	indf2,c
  3800  0021AA  2A53               	incf	_rxb,f,c	;volatile
  3801  0021AC                     l2804:
  3802  0021AC  FFFF               	dw	65535	; assembler added errata NOP
  3803  0021AE  0E08               	movlw	8
  3804  0021B0  6453               	cpfsgt	_rxb,c	;volatile
  3805  0021B2  D7F5               	goto	l2800
  3806                           
  3807                           ;usart.h: 21: rx_end = 0; rxb = 0;
  3808  0021B4  0100               	movlb	0	; () banked
  3809  0021B6  6B86               	clrf	_rx_end& (0+255),b	;volatile
  3810  0021B8  6A53               	clrf	_rxb,c	;volatile
  3811                           
  3812                           ; BSR set to: 0
  3813  0021BA  0012               	return		;funcret
  3814  0021BC  FFFF               	dw	65535	; errata NOP
  3815  0021BE                     __end_of_RXrestart:
  3816                           	opt stack 0
  3817                           stkptr	equ	0xFFC
  3818                           tblptru	equ	0xFF8
  3819                           tblptrh	equ	0xFF7
  3820                           tblptrl	equ	0xFF6
  3821                           tablat	equ	0xFF5
  3822                           prodh	equ	0xFF4
  3823                           prodl	equ	0xFF3
  3824                           intcon	equ	0xFF2
  3825                           intcon2	equ	0xFF1
  3826                           postinc0	equ	0xFEE
  3827                           wreg	equ	0xFE8
  3828                           indf2	equ	0xFDF
  3829                           fsr2h	equ	0xFDA
  3830                           fsr2l	equ	0xFD9
  3831                           status	equ	0xFD8
  3832                           
  3833 ;; *************** function _RXstopTIMER *****************
  3834 ;; Defined at:
  3835 ;;		line 10 in file "../usart.h"
  3836 ;; Parameters:    Size  Location     Type
  3837 ;;		None
  3838 ;; Auto vars:     Size  Location     Type
  3839 ;;		None
  3840 ;; Return value:  Size  Location     Type
  3841 ;;                  1    wreg      void 
  3842 ;; Registers used:
  3843 ;;		None
  3844 ;; Tracked objects:
  3845 ;;		On entry : 0/0
  3846 ;;		On exit  : 0/0
  3847 ;;		Unchanged: 0/0
  3848 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3849 ;;      Params:         0       0       0       0       0       0       0
  3850 ;;      Locals:         0       0       0       0       0       0       0
  3851 ;;      Temps:          0       0       0       0       0       0       0
  3852 ;;      Totals:         0       0       0       0       0       0       0
  3853 ;;Total ram usage:        0 bytes
  3854 ;; Hardware stack levels used:    1
  3855 ;; Hardware stack levels required when called:    3
  3856 ;; This function calls:
  3857 ;;		Nothing
  3858 ;; This function is called by:
  3859 ;;		_RXrestart
  3860 ;; This function uses a non-reentrant model
  3861 ;;
  3862                           
  3863                           	psect	text15
  3864  0023C4                     __ptext15:
  3865                           	opt stack 0
  3866  0023C4                     _RXstopTIMER:
  3867                           	opt stack 0
  3868  0023C4  FFFF               	dw	65535	; assembler added errata NOP
  3869                           
  3870                           ;usart.h: 12: T2CON = 0;
  3871                           
  3872                           ; BSR set to: 0
  3873                           ;incstack = 0
  3874  0023C6  6ACA               	clrf	4042,c	;volatile
  3875                           
  3876                           ;usart.h: 13: PIE1bits.TMR2IE = 0;
  3877  0023C8  929D               	bcf	3997,1,c	;volatile
  3878  0023CA  0012               	return		;funcret
  3879  0023CC  FFFF               	dw	65535	; errata NOP
  3880  0023CE                     __end_of_RXstopTIMER:
  3881                           	opt stack 0
  3882                           stkptr	equ	0xFFC
  3883                           tblptru	equ	0xFF8
  3884                           tblptrh	equ	0xFF7
  3885                           tblptrl	equ	0xFF6
  3886                           tablat	equ	0xFF5
  3887                           prodh	equ	0xFF4
  3888                           prodl	equ	0xFF3
  3889                           intcon	equ	0xFF2
  3890                           intcon2	equ	0xFF1
  3891                           postinc0	equ	0xFEE
  3892                           wreg	equ	0xFE8
  3893                           indf2	equ	0xFDF
  3894                           fsr2h	equ	0xFDA
  3895                           fsr2l	equ	0xFD9
  3896                           status	equ	0xFD8
  3897                           
  3898 ;; *************** function _EEsetupRead *****************
  3899 ;; Defined at:
  3900 ;;		line 47 in file "../eep.h"
  3901 ;; Parameters:    Size  Location     Type
  3902 ;;		None
  3903 ;; Auto vars:     Size  Location     Type
  3904 ;;  lW              2    4[BANK0 ] unsigned int 
  3905 ;;  rW              2    2[BANK0 ] unsigned int 
  3906 ;;  pW              2    0[BANK0 ] unsigned int 
  3907 ;; Return value:  Size  Location     Type
  3908 ;;                  1    wreg      void 
  3909 ;; Registers used:
  3910 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  3911 ;; Tracked objects:
  3912 ;;		On entry : 0/0
  3913 ;;		On exit  : 3F/0
  3914 ;;		Unchanged: 0/0
  3915 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3916 ;;      Params:         0       0       0       0       0       0       0
  3917 ;;      Locals:         0       6       0       0       0       0       0
  3918 ;;      Temps:          8       0       0       0       0       0       0
  3919 ;;      Totals:         8       6       0       0       0       0       0
  3920 ;;Total ram usage:       14 bytes
  3921 ;; Hardware stack levels used:    1
  3922 ;; Hardware stack levels required when called:    7
  3923 ;; This function calls:
  3924 ;;		___fttol
  3925 ;;		___lltoft
  3926 ;;		_readEEPROM
  3927 ;;		_readEEPROM16
  3928 ;;		_sqrt
  3929 ;; This function is called by:
  3930 ;;		_ReadStatusFromLCD
  3931 ;;		_main
  3932 ;; This function uses a non-reentrant model
  3933 ;;
  3934                           
  3935                           	psect	text16
  3936  000A70                     __ptext16:
  3937                           	opt stack 0
  3938  000A70                     _EEsetupRead:
  3939                           	opt stack 0
  3940  000A70  FFFF               	dw	65535	; assembler added errata NOP
  3941                           
  3942                           ;eep.h: 49: unsigned int pW,rW,lW;;eep.h: 51: pW = readEEPROM16(0)&0x7FF;
  3943                           
  3944                           ;incstack = 0
  3945  000A72  0E00               	movlw	0
  3946  000A74  EC09  F011         	call	_readEEPROM16
  3947  000A78  5006               	movf	?_readEEPROM16,w,c
  3948  000A7A  0100               	movlb	0	; () banked
  3949  000A7C  6FF6               	movwf	EEsetupRead@pW& (0+255),b
  3950  000A7E  0E07               	movlw	7
  3951  000A80  1407               	andwf	?_readEEPROM16+1,w,c
  3952  000A82  6FF7               	movwf	(EEsetupRead@pW+1)& (0+255),b
  3953                           
  3954                           ; BSR set to: 0
  3955                           ;eep.h: 52: max_pwr = (unsigned int)sqrt((unsigned long)pW * (unsigned long)870);
  3956  000A84  51F6               	movf	EEsetupRead@pW& (0+255),w,b
  3957  000A86  6E3E               	movwf	??_EEsetupRead& (0+255),c
  3958  000A88  51F7               	movf	(EEsetupRead@pW+1)& (0+255),w,b
  3959  000A8A  6E3F               	movwf	(??_EEsetupRead+1)& (0+255),c
  3960  000A8C  6A40               	clrf	(??_EEsetupRead+2)& (0+255),c
  3961  000A8E  6A41               	clrf	(??_EEsetupRead+3)& (0+255),c
  3962  000A90  0E66               	movlw	102
  3963  000A92  023E               	mulwf	??_EEsetupRead& (0+255),c
  3964  000A94  CFF3 F042          	movff	prodl,??_EEsetupRead+4
  3965  000A98  CFF4 F043          	movff	prodh,??_EEsetupRead+5
  3966  000A9C  6A44               	clrf	(??_EEsetupRead+6)& (0+255),c
  3967  000A9E  6A45               	clrf	(??_EEsetupRead+7)& (0+255),c
  3968  000AA0  023F               	mulwf	(??_EEsetupRead+1)& (0+255),c
  3969  000AA2  50F3               	movf	prodl,w,c
  3970  000AA4  2643               	addwf	(??_EEsetupRead+5)& (0+255),f,c
  3971  000AA6  50F4               	movf	prodh,w,c
  3972  000AA8  2244               	addwfc	(??_EEsetupRead+6)& (0+255),f,c
  3973  000AAA  0E00               	movlw	0
  3974  000AAC  2245               	addwfc	(??_EEsetupRead+7)& (0+255),f,c
  3975  000AAE  0E03               	movlw	3
  3976  000AB0  023E               	mulwf	??_EEsetupRead& (0+255),c
  3977  000AB2  50F3               	movf	prodl,w,c
  3978  000AB4  2643               	addwf	(??_EEsetupRead+5)& (0+255),f,c
  3979  000AB6  50F4               	movf	prodh,w,c
  3980  000AB8  2244               	addwfc	(??_EEsetupRead+6)& (0+255),f,c
  3981  000ABA  0E00               	movlw	0
  3982  000ABC  2245               	addwfc	(??_EEsetupRead+7)& (0+255),f,c
  3983  000ABE  0E66               	movlw	102
  3984  000AC0  0240               	mulwf	(??_EEsetupRead+2)& (0+255),c
  3985  000AC2  50F3               	movf	prodl,w,c
  3986  000AC4  2644               	addwf	(??_EEsetupRead+6)& (0+255),f,c
  3987  000AC6  50F4               	movf	prodh,w,c
  3988  000AC8  2245               	addwfc	(??_EEsetupRead+7)& (0+255),f,c
  3989  000ACA  0E03               	movlw	3
  3990  000ACC  023F               	mulwf	(??_EEsetupRead+1)& (0+255),c
  3991  000ACE  50F3               	movf	prodl,w,c
  3992  000AD0  2644               	addwf	(??_EEsetupRead+6)& (0+255),f,c
  3993  000AD2  50F4               	movf	prodh,w,c
  3994  000AD4  2245               	addwfc	(??_EEsetupRead+7)& (0+255),f,c
  3995  000AD6  0E00               	movlw	0
  3996  000AD8  023E               	mulwf	??_EEsetupRead& (0+255),c
  3997  000ADA  50F3               	movf	prodl,w,c
  3998  000ADC  2644               	addwf	(??_EEsetupRead+6)& (0+255),f,c
  3999  000ADE  50F4               	movf	prodh,w,c
  4000  000AE0  2245               	addwfc	(??_EEsetupRead+7)& (0+255),f,c
  4001  000AE2  0E66               	movlw	102
  4002  000AE4  0241               	mulwf	(??_EEsetupRead+3)& (0+255),c
  4003  000AE6  50F3               	movf	prodl,w,c
  4004  000AE8  2645               	addwf	(??_EEsetupRead+7)& (0+255),f,c
  4005  000AEA  0E03               	movlw	3
  4006  000AEC  0240               	mulwf	(??_EEsetupRead+2)& (0+255),c
  4007  000AEE  50F3               	movf	prodl,w,c
  4008  000AF0  2645               	addwf	(??_EEsetupRead+7)& (0+255),f,c
  4009  000AF2  0E00               	movlw	0
  4010  000AF4  023F               	mulwf	(??_EEsetupRead+1)& (0+255),c
  4011  000AF6  50F3               	movf	prodl,w,c
  4012  000AF8  2645               	addwf	(??_EEsetupRead+7)& (0+255),f,c
  4013  000AFA  0E00               	movlw	0
  4014  000AFC  023E               	mulwf	??_EEsetupRead& (0+255),c
  4015  000AFE  50F3               	movf	prodl,w,c
  4016  000B00  2645               	addwf	(??_EEsetupRead+7)& (0+255),f,c
  4017  000B02  C042  F00D         	movff	??_EEsetupRead+4,___lltoft@c
  4018  000B06  C043  F00E         	movff	??_EEsetupRead+5,___lltoft@c+1
  4019  000B0A  C044  F00F         	movff	??_EEsetupRead+6,___lltoft@c+2
  4020  000B0E  C045  F010         	movff	??_EEsetupRead+7,___lltoft@c+3
  4021  000B12  ECB4  F00F         	call	___lltoft	;wreg free
  4022  000B16  C00D  F01F         	movff	?___lltoft,sqrt@a
  4023  000B1A  C00E  F020         	movff	?___lltoft+1,sqrt@a+1
  4024  000B1E  C00F  F021         	movff	?___lltoft+2,sqrt@a+2
  4025  000B22  ECD9  F008         	call	_sqrt	;wreg free
  4026  000B26  C01F  F02F         	movff	?_sqrt,___fttol@f1
  4027  000B2A  C020  F030         	movff	?_sqrt+1,___fttol@f1+1
  4028  000B2E  C021  F031         	movff	?_sqrt+2,___fttol@f1+2
  4029  000B32  ECDF  F00B         	call	___fttol	;wreg free
  4030  000B36  C02F  F0E9         	movff	?___fttol,_max_pwr	;volatile
  4031  000B3A  C030  F0EA         	movff	?___fttol+1,_max_pwr+1	;volatile
  4032                           
  4033                           ;eep.h: 53: rW = readEEPROM16(2)&0x1FF;
  4034  000B3E  0E02               	movlw	2
  4035  000B40  EC09  F011         	call	_readEEPROM16
  4036  000B44  5006               	movf	?_readEEPROM16,w,c
  4037  000B46  0100               	movlb	0	; () banked
  4038  000B48  6FF8               	movwf	EEsetupRead@rW& (0+255),b
  4039  000B4A  0E01               	movlw	1
  4040  000B4C  1407               	andwf	?_readEEPROM16+1,w,c
  4041  000B4E  6FF9               	movwf	(EEsetupRead@rW+1)& (0+255),b
  4042                           
  4043                           ;eep.h: 54: max_ref = (unsigned int)sqrt((unsigned long)rW * (unsigned long)870);
  4044  000B50  51F8               	movf	EEsetupRead@rW& (0+255),w,b
  4045  000B52  6E3E               	movwf	??_EEsetupRead& (0+255),c
  4046  000B54  51F9               	movf	(EEsetupRead@rW+1)& (0+255),w,b
  4047  000B56  6E3F               	movwf	(??_EEsetupRead+1)& (0+255),c
  4048  000B58  6A40               	clrf	(??_EEsetupRead+2)& (0+255),c
  4049  000B5A  6A41               	clrf	(??_EEsetupRead+3)& (0+255),c
  4050  000B5C  0E66               	movlw	102
  4051  000B5E  023E               	mulwf	??_EEsetupRead& (0+255),c
  4052  000B60  CFF3 F042          	movff	prodl,??_EEsetupRead+4
  4053  000B64  CFF4 F043          	movff	prodh,??_EEsetupRead+5
  4054  000B68  6A44               	clrf	(??_EEsetupRead+6)& (0+255),c
  4055  000B6A  6A45               	clrf	(??_EEsetupRead+7)& (0+255),c
  4056  000B6C  023F               	mulwf	(??_EEsetupRead+1)& (0+255),c
  4057  000B6E  50F3               	movf	prodl,w,c
  4058  000B70  2643               	addwf	(??_EEsetupRead+5)& (0+255),f,c
  4059  000B72  50F4               	movf	prodh,w,c
  4060  000B74  2244               	addwfc	(??_EEsetupRead+6)& (0+255),f,c
  4061  000B76  0E00               	movlw	0
  4062  000B78  2245               	addwfc	(??_EEsetupRead+7)& (0+255),f,c
  4063  000B7A  0E03               	movlw	3
  4064  000B7C  023E               	mulwf	??_EEsetupRead& (0+255),c
  4065  000B7E  50F3               	movf	prodl,w,c
  4066  000B80  2643               	addwf	(??_EEsetupRead+5)& (0+255),f,c
  4067  000B82  50F4               	movf	prodh,w,c
  4068  000B84  2244               	addwfc	(??_EEsetupRead+6)& (0+255),f,c
  4069  000B86  0E00               	movlw	0
  4070  000B88  2245               	addwfc	(??_EEsetupRead+7)& (0+255),f,c
  4071  000B8A  0E66               	movlw	102
  4072  000B8C  0240               	mulwf	(??_EEsetupRead+2)& (0+255),c
  4073  000B8E  50F3               	movf	prodl,w,c
  4074  000B90  2644               	addwf	(??_EEsetupRead+6)& (0+255),f,c
  4075  000B92  50F4               	movf	prodh,w,c
  4076  000B94  2245               	addwfc	(??_EEsetupRead+7)& (0+255),f,c
  4077  000B96  0E03               	movlw	3
  4078  000B98  023F               	mulwf	(??_EEsetupRead+1)& (0+255),c
  4079  000B9A  50F3               	movf	prodl,w,c
  4080  000B9C  2644               	addwf	(??_EEsetupRead+6)& (0+255),f,c
  4081  000B9E  50F4               	movf	prodh,w,c
  4082  000BA0  2245               	addwfc	(??_EEsetupRead+7)& (0+255),f,c
  4083  000BA2  0E00               	movlw	0
  4084  000BA4  023E               	mulwf	??_EEsetupRead& (0+255),c
  4085  000BA6  50F3               	movf	prodl,w,c
  4086  000BA8  2644               	addwf	(??_EEsetupRead+6)& (0+255),f,c
  4087  000BAA  50F4               	movf	prodh,w,c
  4088  000BAC  2245               	addwfc	(??_EEsetupRead+7)& (0+255),f,c
  4089  000BAE  0E66               	movlw	102
  4090  000BB0  0241               	mulwf	(??_EEsetupRead+3)& (0+255),c
  4091  000BB2  50F3               	movf	prodl,w,c
  4092  000BB4  2645               	addwf	(??_EEsetupRead+7)& (0+255),f,c
  4093  000BB6  0E03               	movlw	3
  4094  000BB8  0240               	mulwf	(??_EEsetupRead+2)& (0+255),c
  4095  000BBA  50F3               	movf	prodl,w,c
  4096  000BBC  2645               	addwf	(??_EEsetupRead+7)& (0+255),f,c
  4097  000BBE  0E00               	movlw	0
  4098  000BC0  023F               	mulwf	(??_EEsetupRead+1)& (0+255),c
  4099  000BC2  50F3               	movf	prodl,w,c
  4100  000BC4  2645               	addwf	(??_EEsetupRead+7)& (0+255),f,c
  4101  000BC6  0E00               	movlw	0
  4102  000BC8  023E               	mulwf	??_EEsetupRead& (0+255),c
  4103  000BCA  50F3               	movf	prodl,w,c
  4104  000BCC  2645               	addwf	(??_EEsetupRead+7)& (0+255),f,c
  4105  000BCE  C042  F00D         	movff	??_EEsetupRead+4,___lltoft@c
  4106  000BD2  C043  F00E         	movff	??_EEsetupRead+5,___lltoft@c+1
  4107  000BD6  C044  F00F         	movff	??_EEsetupRead+6,___lltoft@c+2
  4108  000BDA  C045  F010         	movff	??_EEsetupRead+7,___lltoft@c+3
  4109  000BDE  ECB4  F00F         	call	___lltoft	;wreg free
  4110  000BE2  C00D  F01F         	movff	?___lltoft,sqrt@a
  4111  000BE6  C00E  F020         	movff	?___lltoft+1,sqrt@a+1
  4112  000BEA  C00F  F021         	movff	?___lltoft+2,sqrt@a+2
  4113  000BEE  ECD9  F008         	call	_sqrt	;wreg free
  4114  000BF2  C01F  F02F         	movff	?_sqrt,___fttol@f1
  4115  000BF6  C020  F030         	movff	?_sqrt+1,___fttol@f1+1
  4116  000BFA  C021  F031         	movff	?_sqrt+2,___fttol@f1+2
  4117  000BFE  ECDF  F00B         	call	___fttol	;wreg free
  4118  000C02  C02F  F0E7         	movff	?___fttol,_max_ref	;volatile
  4119  000C06  C030  F0E8         	movff	?___fttol+1,_max_ref+1	;volatile
  4120                           
  4121                           ;eep.h: 56: max_curr = readEEPROM16(4)&0x3FF;
  4122  000C0A  0E04               	movlw	4
  4123  000C0C  EC09  F011         	call	_readEEPROM16
  4124  000C10  5006               	movf	?_readEEPROM16,w,c
  4125  000C12  0100               	movlb	0	; () banked
  4126  000C14  6FE3               	movwf	_max_curr& (0+255),b	;volatile
  4127  000C16  0E03               	movlw	3
  4128  000C18  1407               	andwf	?_readEEPROM16+1,w,c
  4129  000C1A  6FE4               	movwf	(_max_curr+1)& (0+255),b	;volatile
  4130                           
  4131                           ; BSR set to: 0
  4132                           ;eep.h: 57: max_volt = readEEPROM16(6)&0x3FF;
  4133  000C1C  0E06               	movlw	6
  4134  000C1E  EC09  F011         	call	_readEEPROM16
  4135  000C22  5006               	movf	?_readEEPROM16,w,c
  4136  000C24  0100               	movlb	0	; () banked
  4137  000C26  6FE5               	movwf	_max_volt& (0+255),b	;volatile
  4138  000C28  0E03               	movlw	3
  4139  000C2A  1407               	andwf	?_readEEPROM16+1,w,c
  4140  000C2C  6FE6               	movwf	(_max_volt+1)& (0+255),b	;volatile
  4141                           
  4142                           ; BSR set to: 0
  4143                           ;eep.h: 58: max_temp = readEEPROM16(8)&0x7F;
  4144  000C2E  0E08               	movlw	8
  4145  000C30  EC09  F011         	call	_readEEPROM16
  4146  000C34  0E7F               	movlw	127
  4147  000C36  1406               	andwf	?_readEEPROM16,w,c
  4148  000C38  0100               	movlb	0	; () banked
  4149  000C3A  6FE1               	movwf	_max_temp& (0+255),b	;volatile
  4150  000C3C  6BE2               	clrf	(_max_temp+1)& (0+255),b	;volatile
  4151                           
  4152                           ; BSR set to: 0
  4153                           ;eep.h: 59: max_tFAN = readEEPROM16(10)&0x7F;
  4154  000C3E  0E0A               	movlw	10
  4155  000C40  EC09  F011         	call	_readEEPROM16
  4156  000C44  0E7F               	movlw	127
  4157  000C46  1406               	andwf	?_readEEPROM16,w,c
  4158  000C48  0100               	movlb	0	; () banked
  4159  000C4A  6FDF               	movwf	_max_tFAN& (0+255),b	;volatile
  4160  000C4C  6BE0               	clrf	(_max_tFAN+1)& (0+255),b	;volatile
  4161                           
  4162                           ; BSR set to: 0
  4163                           ;eep.h: 61: lW = readEEPROM16(12)&0x3FF;
  4164  000C4E  0E0C               	movlw	12
  4165  000C50  EC09  F011         	call	_readEEPROM16
  4166  000C54  5006               	movf	?_readEEPROM16,w,c
  4167  000C56  0100               	movlb	0	; () banked
  4168  000C58  6FFA               	movwf	EEsetupRead@lW& (0+255),b
  4169  000C5A  0E03               	movlw	3
  4170  000C5C  1407               	andwf	?_readEEPROM16+1,w,c
  4171  000C5E  6FFB               	movwf	(EEsetupRead@lW+1)& (0+255),b
  4172                           
  4173                           ; BSR set to: 0
  4174                           ;eep.h: 62: lpferrP = (unsigned int)sqrt((unsigned long)lW * (unsigned long)870);
  4175  000C60  51FA               	movf	EEsetupRead@lW& (0+255),w,b
  4176  000C62  6E3E               	movwf	??_EEsetupRead& (0+255),c
  4177  000C64  51FB               	movf	(EEsetupRead@lW+1)& (0+255),w,b
  4178  000C66  6E3F               	movwf	(??_EEsetupRead+1)& (0+255),c
  4179  000C68  6A40               	clrf	(??_EEsetupRead+2)& (0+255),c
  4180  000C6A  6A41               	clrf	(??_EEsetupRead+3)& (0+255),c
  4181  000C6C  0E66               	movlw	102
  4182  000C6E  023E               	mulwf	??_EEsetupRead& (0+255),c
  4183  000C70  CFF3 F042          	movff	prodl,??_EEsetupRead+4
  4184  000C74  CFF4 F043          	movff	prodh,??_EEsetupRead+5
  4185  000C78  6A44               	clrf	(??_EEsetupRead+6)& (0+255),c
  4186  000C7A  6A45               	clrf	(??_EEsetupRead+7)& (0+255),c
  4187  000C7C  023F               	mulwf	(??_EEsetupRead+1)& (0+255),c
  4188  000C7E  50F3               	movf	prodl,w,c
  4189  000C80  2643               	addwf	(??_EEsetupRead+5)& (0+255),f,c
  4190  000C82  50F4               	movf	prodh,w,c
  4191  000C84  2244               	addwfc	(??_EEsetupRead+6)& (0+255),f,c
  4192  000C86  0E00               	movlw	0
  4193  000C88  2245               	addwfc	(??_EEsetupRead+7)& (0+255),f,c
  4194  000C8A  0E03               	movlw	3
  4195  000C8C  023E               	mulwf	??_EEsetupRead& (0+255),c
  4196  000C8E  50F3               	movf	prodl,w,c
  4197  000C90  2643               	addwf	(??_EEsetupRead+5)& (0+255),f,c
  4198  000C92  50F4               	movf	prodh,w,c
  4199  000C94  2244               	addwfc	(??_EEsetupRead+6)& (0+255),f,c
  4200  000C96  0E00               	movlw	0
  4201  000C98  2245               	addwfc	(??_EEsetupRead+7)& (0+255),f,c
  4202  000C9A  0E66               	movlw	102
  4203  000C9C  0240               	mulwf	(??_EEsetupRead+2)& (0+255),c
  4204  000C9E  50F3               	movf	prodl,w,c
  4205  000CA0  2644               	addwf	(??_EEsetupRead+6)& (0+255),f,c
  4206  000CA2  50F4               	movf	prodh,w,c
  4207  000CA4  2245               	addwfc	(??_EEsetupRead+7)& (0+255),f,c
  4208  000CA6  0E03               	movlw	3
  4209  000CA8  023F               	mulwf	(??_EEsetupRead+1)& (0+255),c
  4210  000CAA  50F3               	movf	prodl,w,c
  4211  000CAC  2644               	addwf	(??_EEsetupRead+6)& (0+255),f,c
  4212  000CAE  50F4               	movf	prodh,w,c
  4213  000CB0  2245               	addwfc	(??_EEsetupRead+7)& (0+255),f,c
  4214  000CB2  0E00               	movlw	0
  4215  000CB4  023E               	mulwf	??_EEsetupRead& (0+255),c
  4216  000CB6  50F3               	movf	prodl,w,c
  4217  000CB8  2644               	addwf	(??_EEsetupRead+6)& (0+255),f,c
  4218  000CBA  50F4               	movf	prodh,w,c
  4219  000CBC  2245               	addwfc	(??_EEsetupRead+7)& (0+255),f,c
  4220  000CBE  0E66               	movlw	102
  4221  000CC0  0241               	mulwf	(??_EEsetupRead+3)& (0+255),c
  4222  000CC2  50F3               	movf	prodl,w,c
  4223  000CC4  2645               	addwf	(??_EEsetupRead+7)& (0+255),f,c
  4224  000CC6  0E03               	movlw	3
  4225  000CC8  0240               	mulwf	(??_EEsetupRead+2)& (0+255),c
  4226  000CCA  50F3               	movf	prodl,w,c
  4227  000CCC  2645               	addwf	(??_EEsetupRead+7)& (0+255),f,c
  4228  000CCE  0E00               	movlw	0
  4229  000CD0  023F               	mulwf	(??_EEsetupRead+1)& (0+255),c
  4230  000CD2  50F3               	movf	prodl,w,c
  4231  000CD4  2645               	addwf	(??_EEsetupRead+7)& (0+255),f,c
  4232  000CD6  0E00               	movlw	0
  4233  000CD8  023E               	mulwf	??_EEsetupRead& (0+255),c
  4234  000CDA  50F3               	movf	prodl,w,c
  4235  000CDC  2645               	addwf	(??_EEsetupRead+7)& (0+255),f,c
  4236  000CDE  C042  F00D         	movff	??_EEsetupRead+4,___lltoft@c
  4237  000CE2  C043  F00E         	movff	??_EEsetupRead+5,___lltoft@c+1
  4238  000CE6  C044  F00F         	movff	??_EEsetupRead+6,___lltoft@c+2
  4239  000CEA  C045  F010         	movff	??_EEsetupRead+7,___lltoft@c+3
  4240  000CEE  ECB4  F00F         	call	___lltoft	;wreg free
  4241  000CF2  C00D  F01F         	movff	?___lltoft,sqrt@a
  4242  000CF6  C00E  F020         	movff	?___lltoft+1,sqrt@a+1
  4243  000CFA  C00F  F021         	movff	?___lltoft+2,sqrt@a+2
  4244  000CFE  ECD9  F008         	call	_sqrt	;wreg free
  4245  000D02  C01F  F02F         	movff	?_sqrt,___fttol@f1
  4246  000D06  C020  F030         	movff	?_sqrt+1,___fttol@f1+1
  4247  000D0A  C021  F031         	movff	?_sqrt+2,___fttol@f1+2
  4248  000D0E  ECDF  F00B         	call	___fttol	;wreg free
  4249  000D12  C02F  F0DD         	movff	?___fttol,_lpferrP	;volatile
  4250  000D16  C030  F0DE         	movff	?___fttol+1,_lpferrP+1	;volatile
  4251                           
  4252                           ;eep.h: 63: lpferrC = readEEPROM16(14)&0x3FF;
  4253  000D1A  0E0E               	movlw	14
  4254  000D1C  EC09  F011         	call	_readEEPROM16
  4255  000D20  5006               	movf	?_readEEPROM16,w,c
  4256  000D22  0100               	movlb	0	; () banked
  4257  000D24  6FDB               	movwf	_lpferrC& (0+255),b	;volatile
  4258  000D26  0E03               	movlw	3
  4259  000D28  1407               	andwf	?_readEEPROM16+1,w,c
  4260  000D2A  6FDC               	movwf	(_lpferrC+1)& (0+255),b	;volatile
  4261                           
  4262                           ; BSR set to: 0
  4263                           ;eep.h: 65: lpferrR = (readEEPROM(16)&0x7F) * 10;
  4264  000D2C  0E10               	movlw	16
  4265  000D2E  ECA1  F011         	call	_readEEPROM
  4266  000D32  0B7F               	andlw	127
  4267  000D34  0D0A               	mullw	10
  4268  000D36  CFF3 F0D9          	movff	prodl,_lpferrR	;volatile
  4269  000D3A  CFF4 F0DA          	movff	prodh,_lpferrR+1	;volatile
  4270                           
  4271                           ;eep.h: 66: ptt_hold = readEEPROM(17)&0x7F;
  4272  000D3E  0E11               	movlw	17
  4273  000D40  ECA1  F011         	call	_readEEPROM
  4274  000D44  0B7F               	andlw	127
  4275  000D46  0100               	movlb	0	; () banked
  4276  000D48  6FEB               	movwf	_ptt_hold& (0+255),b	;volatile
  4277                           
  4278                           ; BSR set to: 0
  4279                           ;eep.h: 67: hystT = readEEPROM(18)&0x1F;
  4280  000D4A  0E12               	movlw	18
  4281  000D4C  ECA1  F011         	call	_readEEPROM
  4282  000D50  0B1F               	andlw	31
  4283  000D52  0100               	movlb	0	; () banked
  4284  000D54  6FF0               	movwf	_hystT& (0+255),b	;volatile
  4285                           
  4286                           ; BSR set to: 0
  4287                           ;eep.h: 68: hystF = readEEPROM(19)&0x1F;
  4288  000D56  0E13               	movlw	19
  4289  000D58  ECA1  F011         	call	_readEEPROM
  4290  000D5C  0B1F               	andlw	31
  4291  000D5E  0100               	movlb	0	; () banked
  4292  000D60  6FEF               	movwf	_hystF& (0+255),b	;volatile
  4293                           
  4294                           ; BSR set to: 0
  4295                           ;eep.h: 69: reldel = readEEPROM(20)&0x7F;
  4296  000D62  0E14               	movlw	20
  4297  000D64  ECA1  F011         	call	_readEEPROM
  4298  000D68  0B7F               	andlw	127
  4299  000D6A  0100               	movlb	0	; () banked
  4300  000D6C  6FF5               	movwf	_reldel& (0+255),b	;volatile
  4301                           
  4302                           ; BSR set to: 0
  4303                           ;eep.h: 70: biasdel = readEEPROM(21)&0x7F;
  4304  000D6E  0E15               	movlw	21
  4305  000D70  ECA1  F011         	call	_readEEPROM
  4306  000D74  0B7F               	andlw	127
  4307  000D76  0100               	movlb	0	; () banked
  4308  000D78  6FF4               	movwf	_biasdel& (0+255),b	;volatile
  4309                           
  4310                           ; BSR set to: 0
  4311                           ;eep.h: 71: sensor = readEEPROM(22)&0x1F;
  4312  000D7A  0E16               	movlw	22
  4313  000D7C  ECA1  F011         	call	_readEEPROM
  4314  000D80  0B1F               	andlw	31
  4315  000D82  0100               	movlb	0	; () banked
  4316  000D84  6FEC               	movwf	_sensor& (0+255),b	;volatile
  4317                           
  4318                           ; BSR set to: 0
  4319                           ;eep.h: 72: fanptt = readEEPROM(23)&0x01;
  4320  000D86  0E17               	movlw	23
  4321  000D88  ECA1  F011         	call	_readEEPROM
  4322  000D8C  0B01               	andlw	1
  4323  000D8E  0100               	movlb	0	; () banked
  4324  000D90  6FF3               	movwf	_fanptt& (0+255),b	;volatile
  4325                           
  4326                           ; BSR set to: 0
  4327                           ;eep.h: 73: beeper = readEEPROM(24)&0x01;
  4328  000D92  0E18               	movlw	24
  4329  000D94  ECA1  F011         	call	_readEEPROM
  4330  000D98  0B01               	andlw	1
  4331  000D9A  0100               	movlb	0	; () banked
  4332  000D9C  6FEE               	movwf	_beeper& (0+255),b	;volatile
  4333                           
  4334                           ; BSR set to: 0
  4335                           ;eep.h: 74: logo = readEEPROM(25)&0x01;
  4336  000D9E  0E19               	movlw	25
  4337  000DA0  ECA1  F011         	call	_readEEPROM
  4338  000DA4  0B01               	andlw	1
  4339  000DA6  0100               	movlb	0	; () banked
  4340  000DA8  6FED               	movwf	_logo& (0+255),b	;volatile
  4341                           
  4342                           ; BSR set to: 0
  4343  000DAA  0012               	return		;funcret
  4344  000DAC  FFFF               	dw	65535	; errata NOP
  4345  000DAE                     __end_of_EEsetupRead:
  4346                           	opt stack 0
  4347                           stkptr	equ	0xFFC
  4348                           tblptru	equ	0xFF8
  4349                           tblptrh	equ	0xFF7
  4350                           tblptrl	equ	0xFF6
  4351                           tablat	equ	0xFF5
  4352                           prodh	equ	0xFF4
  4353                           prodl	equ	0xFF3
  4354                           intcon	equ	0xFF2
  4355                           intcon2	equ	0xFF1
  4356                           postinc0	equ	0xFEE
  4357                           wreg	equ	0xFE8
  4358                           indf2	equ	0xFDF
  4359                           fsr2h	equ	0xFDA
  4360                           fsr2l	equ	0xFD9
  4361                           status	equ	0xFD8
  4362                           
  4363 ;; *************** function _sqrt *****************
  4364 ;; Defined at:
  4365 ;;		line 9 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\sprcsqrt.c"
  4366 ;; Parameters:    Size  Location     Type
  4367 ;;  a               3   30[COMRAM] void 
  4368 ;; Auto vars:     Size  Location     Type
  4369 ;;  x               3   43[COMRAM] void 
  4370 ;;  q               3   40[COMRAM] void 
  4371 ;;  z               3   36[COMRAM] void 
  4372 ;;  og              3    0        void 
  4373 ;;  i               1   39[COMRAM] unsigned char 
  4374 ;; Return value:  Size  Location     Type
  4375 ;;                  3   30[COMRAM] unsigned char 
  4376 ;; Registers used:
  4377 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  4378 ;; Tracked objects:
  4379 ;;		On entry : 0/0
  4380 ;;		On exit  : 0/0
  4381 ;;		Unchanged: 0/0
  4382 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4383 ;;      Params:         3       0       0       0       0       0       0
  4384 ;;      Locals:        10       0       0       0       0       0       0
  4385 ;;      Temps:          3       0       0       0       0       0       0
  4386 ;;      Totals:        16       0       0       0       0       0       0
  4387 ;;Total ram usage:       16 bytes
  4388 ;; Hardware stack levels used:    1
  4389 ;; Hardware stack levels required when called:    6
  4390 ;; This function calls:
  4391 ;;		___ftge
  4392 ;;		___ftmul
  4393 ;;		___ftsub
  4394 ;; This function is called by:
  4395 ;;		_EEsetupRead
  4396 ;; This function uses a non-reentrant model
  4397 ;;
  4398                           
  4399                           	psect	text17
  4400  0011B2                     __ptext17:
  4401                           	opt stack 0
  4402  0011B2                     _sqrt:
  4403                           	opt stack 0
  4404  0011B2  FFFF               	dw	65535	; assembler added errata NOP
  4405                           
  4406                           ; BSR set to: 0
  4407                           ;incstack = 0
  4408  0011B4  6A13               	clrf	___ftge@ff1,c
  4409  0011B6  6A14               	clrf	___ftge@ff1+1,c
  4410  0011B8  6A15               	clrf	___ftge@ff1+2,c
  4411  0011BA  C01F  F016         	movff	sqrt@a,___ftge@ff2
  4412  0011BE  C020  F017         	movff	sqrt@a+1,___ftge@ff2+1
  4413  0011C2  C021  F018         	movff	sqrt@a+2,___ftge@ff2+2
  4414  0011C6  EC2F  F00F         	call	___ftge	;wreg free
  4415  0011CA  E304               	bnc	l1218
  4416  0011CC  6A1F               	clrf	?_sqrt,c
  4417  0011CE  6A20               	clrf	?_sqrt+1,c
  4418  0011D0  6A21               	clrf	?_sqrt+2,c
  4419  0011D2  D09A               	goto	l1220
  4420  0011D4                     l1218:
  4421  0011D4  C01F  F025         	movff	sqrt@a,sqrt@z
  4422  0011D8  C020  F026         	movff	sqrt@a+1,sqrt@z+1
  4423  0011DC  C021  F027         	movff	sqrt@a+2,sqrt@z+2
  4424  0011E0  0EC8               	movlw	200
  4425  0011E2  6E22               	movwf	??_sqrt& (0+255),c
  4426  0011E4  0E6E               	movlw	110
  4427  0011E6  6E23               	movwf	(??_sqrt+1)& (0+255),c
  4428  0011E8  0EBE               	movlw	190
  4429  0011EA  6E24               	movwf	(??_sqrt+2)& (0+255),c
  4430  0011EC  501F               	movf	sqrt@a,w,c
  4431  0011EE  5C22               	subwf	??_sqrt,w,c
  4432  0011F0  6E2C               	movwf	sqrt@x,c
  4433  0011F2  5020               	movf	sqrt@a+1,w,c
  4434  0011F4  5823               	subwfb	??_sqrt+1,w,c
  4435  0011F6  6E2D               	movwf	sqrt@x+1,c
  4436  0011F8  5021               	movf	sqrt@a+2,w,c
  4437  0011FA  5824               	subwfb	??_sqrt+2,w,c
  4438  0011FC  6E2E               	movwf	sqrt@x+2,c
  4439  0011FE  90D8               	bcf	status,0,c
  4440  001200  322E               	rrcf	sqrt@x+2,f,c
  4441  001202  322D               	rrcf	sqrt@x+1,f,c
  4442  001204  322C               	rrcf	sqrt@x,f,c
  4443  001206  80D8               	bsf	status,0,c
  4444  001208  0E80               	movlw	128
  4445  00120A  5A26               	subwfb	sqrt@z+1,f,c
  4446  00120C  0E00               	movlw	0
  4447  00120E  5A27               	subwfb	sqrt@z+2,f,c
  4448  001210  0E04               	movlw	4
  4449  001212  6E28               	movwf	sqrt@i,c
  4450  001214                     l4310:
  4451  001214  FFFF               	dw	65535	; assembler added errata NOP
  4452  001216  C02C  F00D         	movff	sqrt@x,___ftmul@f1
  4453  00121A  C02D  F00E         	movff	sqrt@x+1,___ftmul@f1+1
  4454  00121E  C02E  F00F         	movff	sqrt@x+2,___ftmul@f1+2
  4455  001222  C025  F010         	movff	sqrt@z,___ftmul@f2
  4456  001226  C026  F011         	movff	sqrt@z+1,___ftmul@f2+1
  4457  00122A  C027  F012         	movff	sqrt@z+2,___ftmul@f2+2
  4458  00122E  EC0A  F00B         	call	___ftmul	;wreg free
  4459  001232  C00D  F029         	movff	?___ftmul,sqrt@q
  4460  001236  C00E  F02A         	movff	?___ftmul+1,sqrt@q+1
  4461  00123A  C00F  F02B         	movff	?___ftmul+2,sqrt@q+2
  4462  00123E  C029  F00D         	movff	sqrt@q,___ftmul@f1
  4463  001242  C02A  F00E         	movff	sqrt@q+1,___ftmul@f1+1
  4464  001246  C02B  F00F         	movff	sqrt@q+2,___ftmul@f1+2
  4465  00124A  C02C  F010         	movff	sqrt@x,___ftmul@f2
  4466  00124E  C02D  F011         	movff	sqrt@x+1,___ftmul@f2+1
  4467  001252  C02E  F012         	movff	sqrt@x+2,___ftmul@f2+2
  4468  001256  EC0A  F00B         	call	___ftmul	;wreg free
  4469  00125A  C00D  F029         	movff	?___ftmul,sqrt@q
  4470  00125E  C00E  F02A         	movff	?___ftmul+1,sqrt@q+1
  4471  001262  C00F  F02B         	movff	?___ftmul+2,sqrt@q+2
  4472  001266  C029  F00D         	movff	sqrt@q,___ftmul@f1
  4473  00126A  C02A  F00E         	movff	sqrt@q+1,___ftmul@f1+1
  4474  00126E  C02B  F00F         	movff	sqrt@q+2,___ftmul@f1+2
  4475  001272  C02C  F010         	movff	sqrt@x,___ftmul@f2
  4476  001276  C02D  F011         	movff	sqrt@x+1,___ftmul@f2+1
  4477  00127A  C02E  F012         	movff	sqrt@x+2,___ftmul@f2+2
  4478  00127E  EC0A  F00B         	call	___ftmul	;wreg free
  4479  001282  C00D  F029         	movff	?___ftmul,sqrt@q
  4480  001286  C00E  F02A         	movff	?___ftmul+1,sqrt@q+1
  4481  00128A  C00F  F02B         	movff	?___ftmul+2,sqrt@q+2
  4482  00128E  C02C  F00D         	movff	sqrt@x,___ftmul@f1
  4483  001292  C02D  F00E         	movff	sqrt@x+1,___ftmul@f1+1
  4484  001296  C02E  F00F         	movff	sqrt@x+2,___ftmul@f1+2
  4485  00129A  6A10               	clrf	___ftmul@f2,c
  4486  00129C  0EC0               	movlw	192
  4487  00129E  6E11               	movwf	___ftmul@f2+1,c
  4488  0012A0  0E3F               	movlw	63
  4489  0012A2  6E12               	movwf	___ftmul@f2+2,c
  4490  0012A4  EC0A  F00B         	call	___ftmul	;wreg free
  4491  0012A8  C00D  F02C         	movff	?___ftmul,sqrt@x
  4492  0012AC  C00E  F02D         	movff	?___ftmul+1,sqrt@x+1
  4493  0012B0  C00F  F02E         	movff	?___ftmul+2,sqrt@x+2
  4494  0012B4  C02C  F019         	movff	sqrt@x,___ftsub@f1
  4495  0012B8  C02D  F01A         	movff	sqrt@x+1,___ftsub@f1+1
  4496  0012BC  C02E  F01B         	movff	sqrt@x+2,___ftsub@f1+2
  4497  0012C0  C029  F01C         	movff	sqrt@q,___ftsub@f2
  4498  0012C4  C02A  F01D         	movff	sqrt@q+1,___ftsub@f2+1
  4499  0012C8  C02B  F01E         	movff	sqrt@q+2,___ftsub@f2+2
  4500  0012CC  ECFB  F00F         	call	___ftsub	;wreg free
  4501  0012D0  C019  F02C         	movff	?___ftsub,sqrt@x
  4502  0012D4  C01A  F02D         	movff	?___ftsub+1,sqrt@x+1
  4503  0012D8  C01B  F02E         	movff	?___ftsub+2,sqrt@x+2
  4504  0012DC  2E28               	decfsz	sqrt@i,f,c
  4505  0012DE  D79A               	goto	l4310
  4506  0012E0  C02C  F00D         	movff	sqrt@x,___ftmul@f1
  4507  0012E4  C02D  F00E         	movff	sqrt@x+1,___ftmul@f1+1
  4508  0012E8  C02E  F00F         	movff	sqrt@x+2,___ftmul@f1+2
  4509  0012EC  C01F  F010         	movff	sqrt@a,___ftmul@f2
  4510  0012F0  C020  F011         	movff	sqrt@a+1,___ftmul@f2+1
  4511  0012F4  C021  F012         	movff	sqrt@a+2,___ftmul@f2+2
  4512  0012F8  EC0A  F00B         	call	___ftmul	;wreg free
  4513  0012FC  C00D  F01F         	movff	?___ftmul,?_sqrt
  4514  001300  C00E  F020         	movff	?___ftmul+1,?_sqrt+1
  4515  001304  C00F  F021         	movff	?___ftmul+2,?_sqrt+2
  4516  001308                     l1220:
  4517  001308  FFFF               	dw	65535	; assembler added errata NOP
  4518  00130A  0012               	return		;funcret
  4519  00130C  FFFF               	dw	65535	; errata NOP
  4520  00130E                     __end_of_sqrt:
  4521                           	opt stack 0
  4522                           stkptr	equ	0xFFC
  4523                           tblptru	equ	0xFF8
  4524                           tblptrh	equ	0xFF7
  4525                           tblptrl	equ	0xFF6
  4526                           tablat	equ	0xFF5
  4527                           prodh	equ	0xFF4
  4528                           prodl	equ	0xFF3
  4529                           intcon	equ	0xFF2
  4530                           intcon2	equ	0xFF1
  4531                           postinc0	equ	0xFEE
  4532                           wreg	equ	0xFE8
  4533                           indf2	equ	0xFDF
  4534                           fsr2h	equ	0xFDA
  4535                           fsr2l	equ	0xFD9
  4536                           status	equ	0xFD8
  4537                           
  4538 ;; *************** function ___ftsub *****************
  4539 ;; Defined at:
  4540 ;;		line 19 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\ftsub.c"
  4541 ;; Parameters:    Size  Location     Type
  4542 ;;  f1              3   24[COMRAM] float 
  4543 ;;  f2              3   27[COMRAM] float 
  4544 ;; Auto vars:     Size  Location     Type
  4545 ;;		None
  4546 ;; Return value:  Size  Location     Type
  4547 ;;                  3   24[COMRAM] float 
  4548 ;; Registers used:
  4549 ;;		wreg, status,2, status,0, cstack
  4550 ;; Tracked objects:
  4551 ;;		On entry : 0/0
  4552 ;;		On exit  : 0/0
  4553 ;;		Unchanged: 0/0
  4554 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4555 ;;      Params:         6       0       0       0       0       0       0
  4556 ;;      Locals:         0       0       0       0       0       0       0
  4557 ;;      Temps:          0       0       0       0       0       0       0
  4558 ;;      Totals:         6       0       0       0       0       0       0
  4559 ;;Total ram usage:        6 bytes
  4560 ;; Hardware stack levels used:    1
  4561 ;; Hardware stack levels required when called:    5
  4562 ;; This function calls:
  4563 ;;		___ftadd
  4564 ;; This function is called by:
  4565 ;;		_sqrt
  4566 ;; This function uses a non-reentrant model
  4567 ;;
  4568                           
  4569                           	psect	text18
  4570  001FF6                     __ptext18:
  4571                           	opt stack 0
  4572  001FF6                     ___ftsub:
  4573                           	opt stack 0
  4574  001FF6  FFFF               	dw	65535	; assembler added errata NOP
  4575                           
  4576                           ;incstack = 0
  4577  001FF8  501C               	movf	___ftsub@f2,w,c
  4578  001FFA  101D               	iorwf	___ftsub@f2+1,w,c
  4579  001FFC  101E               	iorwf	___ftsub@f2+2,w,c
  4580  001FFE  E002               	bz	l4288
  4581  002000  0E80               	movlw	128
  4582  002002  1A1E               	xorwf	___ftsub@f2+2,f,c
  4583  002004                     l4288:
  4584  002004  C019  F00D         	movff	___ftsub@f1,___ftadd@f1
  4585  002008  C01A  F00E         	movff	___ftsub@f1+1,___ftadd@f1+1
  4586  00200C  C01B  F00F         	movff	___ftsub@f1+2,___ftadd@f1+2
  4587  002010  C01C  F010         	movff	___ftsub@f2,___ftadd@f2
  4588  002014  C01D  F011         	movff	___ftsub@f2+1,___ftadd@f2+1
  4589  002018  C01E  F012         	movff	___ftsub@f2+2,___ftadd@f2+2
  4590  00201C  EC20  F008         	call	___ftadd	;wreg free
  4591  002020  C00D  F019         	movff	?___ftadd,?___ftsub
  4592  002024  C00E  F01A         	movff	?___ftadd+1,?___ftsub+1
  4593  002028  C00F  F01B         	movff	?___ftadd+2,?___ftsub+2
  4594  00202C  0012               	return		;funcret
  4595  00202E  FFFF               	dw	65535	; errata NOP
  4596  002030                     __end_of___ftsub:
  4597                           	opt stack 0
  4598                           stkptr	equ	0xFFC
  4599                           tblptru	equ	0xFF8
  4600                           tblptrh	equ	0xFF7
  4601                           tblptrl	equ	0xFF6
  4602                           tablat	equ	0xFF5
  4603                           prodh	equ	0xFF4
  4604                           prodl	equ	0xFF3
  4605                           intcon	equ	0xFF2
  4606                           intcon2	equ	0xFF1
  4607                           postinc0	equ	0xFEE
  4608                           wreg	equ	0xFE8
  4609                           indf2	equ	0xFDF
  4610                           fsr2h	equ	0xFDA
  4611                           fsr2l	equ	0xFD9
  4612                           status	equ	0xFD8
  4613                           
  4614 ;; *************** function ___ftadd *****************
  4615 ;; Defined at:
  4616 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\ftadd.c"
  4617 ;; Parameters:    Size  Location     Type
  4618 ;;  f1              3   12[COMRAM] float 
  4619 ;;  f2              3   15[COMRAM] float 
  4620 ;; Auto vars:     Size  Location     Type
  4621 ;;  exp1            1   23[COMRAM] unsigned char 
  4622 ;;  exp2            1   22[COMRAM] unsigned char 
  4623 ;;  sign            1   21[COMRAM] unsigned char 
  4624 ;; Return value:  Size  Location     Type
  4625 ;;                  3   12[COMRAM] float 
  4626 ;; Registers used:
  4627 ;;		wreg, status,2, status,0, cstack
  4628 ;; Tracked objects:
  4629 ;;		On entry : 0/0
  4630 ;;		On exit  : 0/0
  4631 ;;		Unchanged: 0/0
  4632 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4633 ;;      Params:         6       0       0       0       0       0       0
  4634 ;;      Locals:         3       0       0       0       0       0       0
  4635 ;;      Temps:          3       0       0       0       0       0       0
  4636 ;;      Totals:        12       0       0       0       0       0       0
  4637 ;;Total ram usage:       12 bytes
  4638 ;; Hardware stack levels used:    1
  4639 ;; Hardware stack levels required when called:    4
  4640 ;; This function calls:
  4641 ;;		___ftpack
  4642 ;; This function is called by:
  4643 ;;		___ftsub
  4644 ;; This function uses a non-reentrant model
  4645 ;;
  4646                           
  4647                           	psect	text19
  4648  001040                     __ptext19:
  4649                           	opt stack 0
  4650  001040                     ___ftadd:
  4651                           	opt stack 0
  4652  001040  FFFF               	dw	65535	; assembler added errata NOP
  4653                           
  4654                           ;incstack = 0
  4655  001042  C00F  F013         	movff	___ftadd@f1+2,??___ftadd
  4656  001046  6A14               	clrf	(??___ftadd+1)& (0+255),c
  4657  001048  6A15               	clrf	(??___ftadd+2)& (0+255),c
  4658  00104A  340E               	rlcf	___ftadd@f1+1,w,c
  4659  00104C  3613               	rlcf	??___ftadd& (0+255),f,c
  4660  00104E  E301               	bnc	u4591
  4661  001050  8014               	bsf	(??___ftadd+1)& (0+255),0,c
  4662  001052                     u4591:
  4663  001052  5013               	movf	??___ftadd,w,c
  4664  001054  6E18               	movwf	___ftadd@exp1,c
  4665  001056  C012  F013         	movff	___ftadd@f2+2,??___ftadd
  4666  00105A  6A14               	clrf	(??___ftadd+1)& (0+255),c
  4667  00105C  6A15               	clrf	(??___ftadd+2)& (0+255),c
  4668  00105E  3411               	rlcf	___ftadd@f2+1,w,c
  4669  001060  3613               	rlcf	??___ftadd& (0+255),f,c
  4670  001062  E301               	bnc	u4601
  4671  001064  8014               	bsf	(??___ftadd+1)& (0+255),0,c
  4672  001066                     u4601:
  4673  001066  5013               	movf	??___ftadd,w,c
  4674  001068  6E17               	movwf	___ftadd@exp2,c
  4675  00106A  5018               	movf	___ftadd@exp1,w,c
  4676  00106C  E009               	bz	u4630
  4677  00106E  5017               	movf	___ftadd@exp2,w,c
  4678  001070  5C18               	subwf	___ftadd@exp1,w,c
  4679  001072  E20D               	bc	l4114
  4680  001074  5018               	movf	___ftadd@exp1,w,c
  4681  001076  5C17               	subwf	___ftadd@exp2,w,c
  4682  001078  6E13               	movwf	??___ftadd& (0+255),c
  4683  00107A  0E18               	movlw	24
  4684  00107C  6413               	cpfsgt	??___ftadd,c
  4685  00107E  D007               	goto	l4114
  4686  001080                     u4630:
  4687  001080  C010  F00D         	movff	___ftadd@f2,?___ftadd
  4688  001084  C011  F00E         	movff	___ftadd@f2+1,?___ftadd+1
  4689  001088  C012  F00F         	movff	___ftadd@f2+2,?___ftadd+2
  4690  00108C  D08F               	goto	l904
  4691  00108E                     l4114:
  4692  00108E  FFFF               	dw	65535	; assembler added errata NOP
  4693  001090  5017               	movf	___ftadd@exp2,w,c
  4694  001092  E009               	bz	u4660
  4695  001094  5018               	movf	___ftadd@exp1,w,c
  4696  001096  5C17               	subwf	___ftadd@exp2,w,c
  4697  001098  E20D               	bc	l4120
  4698  00109A  5017               	movf	___ftadd@exp2,w,c
  4699  00109C  5C18               	subwf	___ftadd@exp1,w,c
  4700  00109E  6E13               	movwf	??___ftadd& (0+255),c
  4701  0010A0  0E18               	movlw	24
  4702  0010A2  6413               	cpfsgt	??___ftadd,c
  4703  0010A4  D007               	goto	l4120
  4704  0010A6                     u4660:
  4705  0010A6  C00D  F00D         	movff	___ftadd@f1,?___ftadd
  4706  0010AA  C00E  F00E         	movff	___ftadd@f1+1,?___ftadd+1
  4707  0010AE  C00F  F00F         	movff	___ftadd@f1+2,?___ftadd+2
  4708  0010B2  D07C               	goto	l904
  4709  0010B4                     l4120:
  4710  0010B4  FFFF               	dw	65535	; assembler added errata NOP
  4711  0010B6  0E06               	movlw	6
  4712  0010B8  6E16               	movwf	___ftadd@sign,c
  4713  0010BA  BE0F               	btfsc	___ftadd@f1+2,7,c
  4714  0010BC  8E16               	bsf	___ftadd@sign,7,c
  4715  0010BE  BE12               	btfsc	___ftadd@f2+2,7,c
  4716  0010C0  8C16               	bsf	___ftadd@sign,6,c
  4717  0010C2  8E0E               	bsf	___ftadd@f1+1,7,c
  4718  0010C4  6A0F               	clrf	___ftadd@f1+2,c
  4719  0010C6  8E11               	bsf	___ftadd@f2+1,7,c
  4720  0010C8  6A12               	clrf	___ftadd@f2+2,c
  4721  0010CA  5017               	movf	___ftadd@exp2,w,c
  4722  0010CC  5C18               	subwf	___ftadd@exp1,w,c
  4723  0010CE  E21A               	bc	l4146
  4724  0010D0                     u4690:
  4725  0010D0  FFFF               	dw	65535	; assembler added errata NOP
  4726  0010D2  90D8               	bcf	status,0,c
  4727  0010D4  3610               	rlcf	___ftadd@f2,f,c
  4728  0010D6  3611               	rlcf	___ftadd@f2+1,f,c
  4729  0010D8  3612               	rlcf	___ftadd@f2+2,f,c
  4730  0010DA  0617               	decf	___ftadd@exp2,f,c
  4731  0010DC  5018               	movf	___ftadd@exp1,w,c
  4732  0010DE  1817               	xorwf	___ftadd@exp2,w,c
  4733  0010E0  E00D               	bz	l4144
  4734  0010E2  0616               	decf	___ftadd@sign,f,c
  4735  0010E4  C016  F013         	movff	___ftadd@sign,??___ftadd
  4736  0010E8  0E07               	movlw	7
  4737  0010EA  1613               	andwf	??___ftadd,f,c
  4738  0010EC  E007               	bz	l4144
  4739  0010EE  D7F0               	goto	u4690
  4740  0010F0                     l4142:
  4741  0010F0  FFFF               	dw	65535	; assembler added errata NOP
  4742  0010F2  90D8               	bcf	status,0,c
  4743  0010F4  320F               	rrcf	___ftadd@f1+2,f,c
  4744  0010F6  320E               	rrcf	___ftadd@f1+1,f,c
  4745  0010F8  320D               	rrcf	___ftadd@f1,f,c
  4746  0010FA  2A18               	incf	___ftadd@exp1,f,c
  4747  0010FC                     l4144:
  4748  0010FC  5017               	movf	___ftadd@exp2,w,c
  4749  0010FE  1818               	xorwf	___ftadd@exp1,w,c
  4750  001100  E01C               	bz	u4760
  4751  001102  D7F6               	goto	l4142
  4752  001104                     l4146:
  4753  001104  5018               	movf	___ftadd@exp1,w,c
  4754  001106  5C17               	subwf	___ftadd@exp2,w,c
  4755  001108  E218               	bc	u4760
  4756  00110A                     u4730:
  4757  00110A  FFFF               	dw	65535	; assembler added errata NOP
  4758  00110C  90D8               	bcf	status,0,c
  4759  00110E  360D               	rlcf	___ftadd@f1,f,c
  4760  001110  360E               	rlcf	___ftadd@f1+1,f,c
  4761  001112  360F               	rlcf	___ftadd@f1+2,f,c
  4762  001114  0618               	decf	___ftadd@exp1,f,c
  4763  001116  5018               	movf	___ftadd@exp1,w,c
  4764  001118  1817               	xorwf	___ftadd@exp2,w,c
  4765  00111A  E00C               	bz	l4156
  4766  00111C  0616               	decf	___ftadd@sign,f,c
  4767  00111E  C016  F013         	movff	___ftadd@sign,??___ftadd
  4768  001122  0E07               	movlw	7
  4769  001124  1613               	andwf	??___ftadd,f,c
  4770  001126  E006               	bz	l4156
  4771  001128  D7F0               	goto	u4730
  4772  00112A                     l4154:
  4773  00112A  90D8               	bcf	status,0,c
  4774  00112C  3212               	rrcf	___ftadd@f2+2,f,c
  4775  00112E  3211               	rrcf	___ftadd@f2+1,f,c
  4776  001130  3210               	rrcf	___ftadd@f2,f,c
  4777  001132  2A17               	incf	___ftadd@exp2,f,c
  4778  001134                     l4156:
  4779  001134  5017               	movf	___ftadd@exp2,w,c
  4780  001136  1818               	xorwf	___ftadd@exp1,w,c
  4781  001138  E1F8               	bnz	l4154
  4782  00113A                     u4760:
  4783  00113A  AE16               	btfss	___ftadd@sign,7,c
  4784  00113C  D007               	goto	l927
  4785  00113E  1E0D               	comf	___ftadd@f1,f,c
  4786  001140  1E0E               	comf	___ftadd@f1+1,f,c
  4787  001142  1E0F               	comf	___ftadd@f1+2,f,c
  4788  001144  2A0D               	incf	___ftadd@f1,f,c
  4789  001146  0E00               	movlw	0
  4790  001148  220E               	addwfc	___ftadd@f1+1,f,c
  4791  00114A  220F               	addwfc	___ftadd@f1+2,f,c
  4792  00114C                     l927:
  4793  00114C  FFFF               	dw	65535	; assembler added errata NOP
  4794  00114E  AC16               	btfss	___ftadd@sign,6,c
  4795  001150  D007               	goto	l928
  4796  001152  1E10               	comf	___ftadd@f2,f,c
  4797  001154  1E11               	comf	___ftadd@f2+1,f,c
  4798  001156  1E12               	comf	___ftadd@f2+2,f,c
  4799  001158  2A10               	incf	___ftadd@f2,f,c
  4800  00115A  0E00               	movlw	0
  4801  00115C  2211               	addwfc	___ftadd@f2+1,f,c
  4802  00115E  2212               	addwfc	___ftadd@f2+2,f,c
  4803  001160                     l928:
  4804  001160  FFFF               	dw	65535	; assembler added errata NOP
  4805  001162  6A16               	clrf	___ftadd@sign,c
  4806  001164  500D               	movf	___ftadd@f1,w,c
  4807  001166  2610               	addwf	___ftadd@f2,f,c
  4808  001168  500E               	movf	___ftadd@f1+1,w,c
  4809  00116A  2211               	addwfc	___ftadd@f2+1,f,c
  4810  00116C  500F               	movf	___ftadd@f1+2,w,c
  4811  00116E  2212               	addwfc	___ftadd@f2+2,f,c
  4812  001170  AE12               	btfss	___ftadd@f2+2,7,c
  4813  001172  D009               	goto	l4166
  4814  001174  1E10               	comf	___ftadd@f2,f,c
  4815  001176  1E11               	comf	___ftadd@f2+1,f,c
  4816  001178  1E12               	comf	___ftadd@f2+2,f,c
  4817  00117A  2A10               	incf	___ftadd@f2,f,c
  4818  00117C  0E00               	movlw	0
  4819  00117E  2211               	addwfc	___ftadd@f2+1,f,c
  4820  001180  2212               	addwfc	___ftadd@f2+2,f,c
  4821  001182  0E01               	movlw	1
  4822  001184  6E16               	movwf	___ftadd@sign,c
  4823  001186                     l4166:
  4824  001186  FFFF               	dw	65535	; assembler added errata NOP
  4825  001188  C010  F005         	movff	___ftadd@f2,___ftpack@arg
  4826  00118C  C011  F006         	movff	___ftadd@f2+1,___ftpack@arg+1
  4827  001190  C012  F007         	movff	___ftadd@f2+2,___ftpack@arg+2
  4828  001194  C018  F008         	movff	___ftadd@exp1,___ftpack@exp
  4829  001198  C016  F009         	movff	___ftadd@sign,___ftpack@sign
  4830  00119C  ECA4  F00D         	call	___ftpack	;wreg free
  4831  0011A0  C005  F00D         	movff	?___ftpack,?___ftadd
  4832  0011A4  C006  F00E         	movff	?___ftpack+1,?___ftadd+1
  4833  0011A8  C007  F00F         	movff	?___ftpack+2,?___ftadd+2
  4834  0011AC                     l904:
  4835  0011AC  FFFF               	dw	65535	; assembler added errata NOP
  4836  0011AE  0012               	return		;funcret
  4837  0011B0  FFFF               	dw	65535	; errata NOP
  4838  0011B2                     __end_of___ftadd:
  4839                           	opt stack 0
  4840                           stkptr	equ	0xFFC
  4841                           tblptru	equ	0xFF8
  4842                           tblptrh	equ	0xFF7
  4843                           tblptrl	equ	0xFF6
  4844                           tablat	equ	0xFF5
  4845                           prodh	equ	0xFF4
  4846                           prodl	equ	0xFF3
  4847                           intcon	equ	0xFF2
  4848                           intcon2	equ	0xFF1
  4849                           postinc0	equ	0xFEE
  4850                           wreg	equ	0xFE8
  4851                           indf2	equ	0xFDF
  4852                           fsr2h	equ	0xFDA
  4853                           fsr2l	equ	0xFD9
  4854                           status	equ	0xFD8
  4855                           
  4856 ;; *************** function ___ftmul *****************
  4857 ;; Defined at:
  4858 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\ftmul.c"
  4859 ;; Parameters:    Size  Location     Type
  4860 ;;  f1              3   12[COMRAM] float 
  4861 ;;  f2              3   15[COMRAM] float 
  4862 ;; Auto vars:     Size  Location     Type
  4863 ;;  f3_as_produc    3   23[COMRAM] unsigned um
  4864 ;;  sign            1   22[COMRAM] unsigned char 
  4865 ;;  exp             1   21[COMRAM] unsigned char 
  4866 ;;  cntr            1    0        unsigned char 
  4867 ;; Return value:  Size  Location     Type
  4868 ;;                  3   12[COMRAM] float 
  4869 ;; Registers used:
  4870 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  4871 ;; Tracked objects:
  4872 ;;		On entry : 0/0
  4873 ;;		On exit  : 0/0
  4874 ;;		Unchanged: 0/0
  4875 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4876 ;;      Params:         6       0       0       0       0       0       0
  4877 ;;      Locals:         5       0       0       0       0       0       0
  4878 ;;      Temps:          3       0       0       0       0       0       0
  4879 ;;      Totals:        14       0       0       0       0       0       0
  4880 ;;Total ram usage:       14 bytes
  4881 ;; Hardware stack levels used:    1
  4882 ;; Hardware stack levels required when called:    4
  4883 ;; This function calls:
  4884 ;;		___ftpack
  4885 ;; This function is called by:
  4886 ;;		_sqrt
  4887 ;; This function uses a non-reentrant model
  4888 ;;
  4889                           
  4890                           	psect	text20
  4891  001614                     __ptext20:
  4892                           	opt stack 0
  4893  001614                     ___ftmul:
  4894                           	opt stack 0
  4895  001614  FFFF               	dw	65535	; assembler added errata NOP
  4896                           
  4897                           ;incstack = 0
  4898  001616  C00F  F013         	movff	___ftmul@f1+2,??___ftmul
  4899  00161A  6A14               	clrf	(??___ftmul+1)& (0+255),c
  4900  00161C  6A15               	clrf	(??___ftmul+2)& (0+255),c
  4901  00161E  340E               	rlcf	___ftmul@f1+1,w,c
  4902  001620  3613               	rlcf	??___ftmul& (0+255),f,c
  4903  001622  E301               	bnc	u4901
  4904  001624  8014               	bsf	(??___ftmul+1)& (0+255),0,c
  4905  001626                     u4901:
  4906  001626  5013               	movf	??___ftmul,w,c
  4907  001628  6E16               	movwf	___ftmul@exp,c
  4908  00162A  5016               	movf	___ftmul@exp,w,c
  4909  00162C  E101               	bnz	l4250
  4910  00162E  D00C               	goto	u4930
  4911  001630                     l4250:
  4912  001630  C012  F013         	movff	___ftmul@f2+2,??___ftmul
  4913  001634  6A14               	clrf	(??___ftmul+1)& (0+255),c
  4914  001636  6A15               	clrf	(??___ftmul+2)& (0+255),c
  4915  001638  3411               	rlcf	___ftmul@f2+1,w,c
  4916  00163A  3613               	rlcf	??___ftmul& (0+255),f,c
  4917  00163C  E301               	bnc	u4921
  4918  00163E  8014               	bsf	(??___ftmul+1)& (0+255),0,c
  4919  001640                     u4921:
  4920  001640  5013               	movf	??___ftmul,w,c
  4921  001642  6E17               	movwf	___ftmul@sign,c
  4922  001644  5017               	movf	___ftmul@sign,w,c
  4923  001646  E105               	bnz	l4254
  4924  001648                     u4930:
  4925  001648  FFFF               	dw	65535	; assembler added errata NOP
  4926  00164A  6A0D               	clrf	?___ftmul,c
  4927  00164C  6A0E               	clrf	?___ftmul+1,c
  4928  00164E  6A0F               	clrf	?___ftmul+2,c
  4929  001650  D04B               	goto	l950
  4930  001652                     l4254:
  4931  001652  5017               	movf	___ftmul@sign,w,c
  4932  001654  0F7B               	addlw	123
  4933  001656  2616               	addwf	___ftmul@exp,f,c
  4934  001658  C00F  F017         	movff	___ftmul@f1+2,___ftmul@sign
  4935  00165C  5012               	movf	___ftmul@f2+2,w,c
  4936  00165E  1A17               	xorwf	___ftmul@sign,f,c
  4937  001660  0E80               	movlw	128
  4938  001662  1617               	andwf	___ftmul@sign,f,c
  4939  001664  8E0E               	bsf	___ftmul@f1+1,7,c
  4940  001666  8E11               	bsf	___ftmul@f2+1,7,c
  4941  001668  6A12               	clrf	___ftmul@f2+2,c
  4942  00166A  6A0F               	clrf	___ftmul@f1+2,c
  4943  00166C  500D               	movf	___ftmul@f1,w,c
  4944  00166E  0210               	mulwf	___ftmul@f2,c
  4945  001670  CFF4 FFF3          	movff	prodh,prodl
  4946  001674  6AF4               	clrf	prodh,c
  4947  001676  CFF3 F018          	movff	prodl,___ftmul@f3_as_product
  4948  00167A  CFF4 F019          	movff	prodh,___ftmul@f3_as_product+1
  4949  00167E  6A1A               	clrf	___ftmul@f3_as_product+2,c
  4950  001680  500D               	movf	___ftmul@f1,w,c
  4951  001682  0211               	mulwf	___ftmul@f2+1,c
  4952  001684  50F3               	movf	prodl,w,c
  4953  001686  2618               	addwf	___ftmul@f3_as_product,f,c
  4954  001688  50F4               	movf	prodh,w,c
  4955  00168A  2219               	addwfc	___ftmul@f3_as_product+1,f,c
  4956  00168C  0E00               	movlw	0
  4957  00168E  221A               	addwfc	___ftmul@f3_as_product+2,f,c
  4958  001690  500E               	movf	___ftmul@f1+1,w,c
  4959  001692  0210               	mulwf	___ftmul@f2,c
  4960  001694  50F3               	movf	prodl,w,c
  4961  001696  2618               	addwf	___ftmul@f3_as_product,f,c
  4962  001698  50F4               	movf	prodh,w,c
  4963  00169A  2219               	addwfc	___ftmul@f3_as_product+1,f,c
  4964  00169C  0E00               	movlw	0
  4965  00169E  221A               	addwfc	___ftmul@f3_as_product+2,f,c
  4966  0016A0  500E               	movf	___ftmul@f1+1,w,c
  4967  0016A2  0211               	mulwf	___ftmul@f2+1,c
  4968  0016A4  50F3               	movf	prodl,w,c
  4969  0016A6  2619               	addwf	___ftmul@f3_as_product+1,f,c
  4970  0016A8  50F4               	movf	prodh,w,c
  4971  0016AA  221A               	addwfc	___ftmul@f3_as_product+2,f,c
  4972  0016AC  AE1A               	btfss	___ftmul@f3_as_product+2,7,c
  4973  0016AE  D005               	goto	l952
  4974  0016B0  90D8               	bcf	status,0,c
  4975  0016B2  321A               	rrcf	___ftmul@f3_as_product+2,f,c
  4976  0016B4  3219               	rrcf	___ftmul@f3_as_product+1,f,c
  4977  0016B6  3218               	rrcf	___ftmul@f3_as_product,f,c
  4978  0016B8  2A16               	incf	___ftmul@exp,f,c
  4979  0016BA                     l952:
  4980  0016BA  FFFF               	dw	65535	; assembler added errata NOP
  4981  0016BC  90D8               	bcf	status,0,c
  4982  0016BE  321A               	rrcf	___ftmul@f3_as_product+2,f,c
  4983  0016C0  3219               	rrcf	___ftmul@f3_as_product+1,f,c
  4984  0016C2  3218               	rrcf	___ftmul@f3_as_product,f,c
  4985  0016C4  C018  F005         	movff	___ftmul@f3_as_product,___ftpack@arg
  4986  0016C8  C019  F006         	movff	___ftmul@f3_as_product+1,___ftpack@arg+1
  4987  0016CC  C01A  F007         	movff	___ftmul@f3_as_product+2,___ftpack@arg+2
  4988  0016D0  C016  F008         	movff	___ftmul@exp,___ftpack@exp
  4989  0016D4  C017  F009         	movff	___ftmul@sign,___ftpack@sign
  4990  0016D8  ECA4  F00D         	call	___ftpack	;wreg free
  4991  0016DC  C005  F00D         	movff	?___ftpack,?___ftmul
  4992  0016E0  C006  F00E         	movff	?___ftpack+1,?___ftmul+1
  4993  0016E4  C007  F00F         	movff	?___ftpack+2,?___ftmul+2
  4994  0016E8                     l950:
  4995  0016E8  FFFF               	dw	65535	; assembler added errata NOP
  4996  0016EA  0012               	return		;funcret
  4997  0016EC  FFFF               	dw	65535	; errata NOP
  4998  0016EE                     __end_of___ftmul:
  4999                           	opt stack 0
  5000                           stkptr	equ	0xFFC
  5001                           tblptru	equ	0xFF8
  5002                           tblptrh	equ	0xFF7
  5003                           tblptrl	equ	0xFF6
  5004                           tablat	equ	0xFF5
  5005                           prodh	equ	0xFF4
  5006                           prodl	equ	0xFF3
  5007                           intcon	equ	0xFF2
  5008                           intcon2	equ	0xFF1
  5009                           postinc0	equ	0xFEE
  5010                           wreg	equ	0xFE8
  5011                           indf2	equ	0xFDF
  5012                           fsr2h	equ	0xFDA
  5013                           fsr2l	equ	0xFD9
  5014                           status	equ	0xFD8
  5015                           
  5016 ;; *************** function _readEEPROM16 *****************
  5017 ;; Defined at:
  5018 ;;		line 32 in file "../eep.h"
  5019 ;; Parameters:    Size  Location     Type
  5020 ;;  addr            1    wreg     unsigned char 
  5021 ;; Auto vars:     Size  Location     Type
  5022 ;;  addr            1   12[COMRAM] unsigned char 
  5023 ;;  ee              2   10[COMRAM] unsigned int 
  5024 ;; Return value:  Size  Location     Type
  5025 ;;                  2    5[COMRAM] unsigned int 
  5026 ;; Registers used:
  5027 ;;		wreg, status,2, status,0, cstack
  5028 ;; Tracked objects:
  5029 ;;		On entry : 0/0
  5030 ;;		On exit  : 0/0
  5031 ;;		Unchanged: 0/0
  5032 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5033 ;;      Params:         2       0       0       0       0       0       0
  5034 ;;      Locals:         3       0       0       0       0       0       0
  5035 ;;      Temps:          3       0       0       0       0       0       0
  5036 ;;      Totals:         8       0       0       0       0       0       0
  5037 ;;Total ram usage:        8 bytes
  5038 ;; Hardware stack levels used:    1
  5039 ;; Hardware stack levels required when called:    4
  5040 ;; This function calls:
  5041 ;;		_readEEPROM
  5042 ;; This function is called by:
  5043 ;;		_EEsetupRead
  5044 ;; This function uses a non-reentrant model
  5045 ;;
  5046                           
  5047                           	psect	text21
  5048  002212                     __ptext21:
  5049                           	opt stack 0
  5050  002212                     _readEEPROM16:
  5051                           	opt stack 0
  5052  002212  FFFF               	dw	65535	; assembler added errata NOP
  5053                           
  5054                           ;incstack = 0
  5055                           ;readEEPROM16@addr stored from wreg
  5056  002214  6E0D               	movwf	readEEPROM16@addr,c
  5057                           
  5058                           ;eep.h: 34: unsigned int ee;;eep.h: 35: ee = (unsigned int)(readEEPROM(addr)) | ((unsign
      +                          ed int)(readEEPROM(addr+1)) << 8);
  5059  002216  500D               	movf	readEEPROM16@addr,w,c
  5060  002218  ECA1  F011         	call	_readEEPROM
  5061  00221C  6E08               	movwf	??_readEEPROM16& (0+255),c
  5062  00221E  280D               	incf	readEEPROM16@addr,w,c
  5063  002220  ECA1  F011         	call	_readEEPROM
  5064  002224  6E09               	movwf	(??_readEEPROM16+1)& (0+255),c
  5065  002226  5008               	movf	??_readEEPROM16,w,c
  5066  002228  6E0B               	movwf	readEEPROM16@ee,c
  5067  00222A  C009  F00C         	movff	??_readEEPROM16+1,readEEPROM16@ee+1
  5068                           
  5069                           ;eep.h: 36: return(ee);
  5070  00222E  C00B  F006         	movff	readEEPROM16@ee,?_readEEPROM16
  5071  002232  C00C  F007         	movff	readEEPROM16@ee+1,?_readEEPROM16+1
  5072  002236  0012               	return		;funcret
  5073  002238  FFFF               	dw	65535	; errata NOP
  5074  00223A                     __end_of_readEEPROM16:
  5075                           	opt stack 0
  5076                           stkptr	equ	0xFFC
  5077                           tblptru	equ	0xFF8
  5078                           tblptrh	equ	0xFF7
  5079                           tblptrl	equ	0xFF6
  5080                           tablat	equ	0xFF5
  5081                           prodh	equ	0xFF4
  5082                           prodl	equ	0xFF3
  5083                           intcon	equ	0xFF2
  5084                           intcon2	equ	0xFF1
  5085                           postinc0	equ	0xFEE
  5086                           wreg	equ	0xFE8
  5087                           indf2	equ	0xFDF
  5088                           fsr2h	equ	0xFDA
  5089                           fsr2l	equ	0xFD9
  5090                           status	equ	0xFD8
  5091                           
  5092 ;; *************** function ___lltoft *****************
  5093 ;; Defined at:
  5094 ;;		line 35 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\lltoft.c"
  5095 ;; Parameters:    Size  Location     Type
  5096 ;;  c               4   12[COMRAM] unsigned long 
  5097 ;; Auto vars:     Size  Location     Type
  5098 ;;  exp             1   20[COMRAM] unsigned char 
  5099 ;; Return value:  Size  Location     Type
  5100 ;;                  3   12[COMRAM] float 
  5101 ;; Registers used:
  5102 ;;		wreg, status,2, status,0, cstack
  5103 ;; Tracked objects:
  5104 ;;		On entry : 3F/0
  5105 ;;		On exit  : 0/0
  5106 ;;		Unchanged: 0/0
  5107 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5108 ;;      Params:         4       0       0       0       0       0       0
  5109 ;;      Locals:         1       0       0       0       0       0       0
  5110 ;;      Temps:          4       0       0       0       0       0       0
  5111 ;;      Totals:         9       0       0       0       0       0       0
  5112 ;;Total ram usage:        9 bytes
  5113 ;; Hardware stack levels used:    1
  5114 ;; Hardware stack levels required when called:    4
  5115 ;; This function calls:
  5116 ;;		___ftpack
  5117 ;; This function is called by:
  5118 ;;		_EEsetupRead
  5119 ;; This function uses a non-reentrant model
  5120 ;;
  5121                           
  5122                           	psect	text22
  5123  001F68                     __ptext22:
  5124                           	opt stack 0
  5125  001F68                     ___lltoft:
  5126                           	opt stack 0
  5127  001F68  FFFF               	dw	65535	; assembler added errata NOP
  5128                           
  5129                           ; BSR set to: 0
  5130                           
  5131                           ;incstack = 0
  5132  001F6A  0E8E               	movlw	142
  5133  001F6C  6E15               	movwf	___lltoft@exp,c
  5134  001F6E  D006               	goto	l4388
  5135  001F70                     l4386:
  5136                           
  5137                           ; BSR set to: 0
  5138  001F70  90D8               	bcf	status,0,c
  5139  001F72  3210               	rrcf	___lltoft@c+3,f,c
  5140  001F74  320F               	rrcf	___lltoft@c+2,f,c
  5141  001F76  320E               	rrcf	___lltoft@c+1,f,c
  5142  001F78  320D               	rrcf	___lltoft@c,f,c
  5143  001F7A  2A15               	incf	___lltoft@exp,f,c
  5144  001F7C                     l4388:
  5145  001F7C  FFFF               	dw	65535	; assembler added errata NOP
  5146                           
  5147                           ; BSR set to: 0
  5148  001F7E  6A11               	clrf	??___lltoft& (0+255),c
  5149  001F80  6A12               	clrf	(??___lltoft+1)& (0+255),c
  5150  001F82  6A13               	clrf	(??___lltoft+2)& (0+255),c
  5151  001F84  5010               	movf	___lltoft@c+3,w,c
  5152  001F86  6E14               	movwf	(??___lltoft+3)& (0+255),c
  5153  001F88  5011               	movf	??___lltoft,w,c
  5154  001F8A  1012               	iorwf	??___lltoft+1,w,c
  5155  001F8C  1013               	iorwf	??___lltoft+2,w,c
  5156  001F8E  1014               	iorwf	??___lltoft+3,w,c
  5157  001F90  E1EF               	bnz	l4386
  5158                           
  5159                           ; BSR set to: 0
  5160  001F92  C00D  F005         	movff	___lltoft@c,___ftpack@arg
  5161  001F96  C00E  F006         	movff	___lltoft@c+1,___ftpack@arg+1
  5162  001F9A  C00F  F007         	movff	___lltoft@c+2,___ftpack@arg+2
  5163  001F9E  C015  F008         	movff	___lltoft@exp,___ftpack@exp
  5164  001FA2  0E00               	movlw	0
  5165  001FA4  6E09               	movwf	___ftpack@sign,c
  5166  001FA6  ECA4  F00D         	call	___ftpack	;wreg free
  5167  001FAA  C005  F00D         	movff	?___ftpack,?___lltoft
  5168  001FAE  C006  F00E         	movff	?___ftpack+1,?___lltoft+1
  5169  001FB2  C007  F00F         	movff	?___ftpack+2,?___lltoft+2
  5170  001FB6  0012               	return		;funcret
  5171  001FB8  FFFF               	dw	65535	; errata NOP
  5172  001FBA                     __end_of___lltoft:
  5173                           	opt stack 0
  5174                           stkptr	equ	0xFFC
  5175                           tblptru	equ	0xFF8
  5176                           tblptrh	equ	0xFF7
  5177                           tblptrl	equ	0xFF6
  5178                           tablat	equ	0xFF5
  5179                           prodh	equ	0xFF4
  5180                           prodl	equ	0xFF3
  5181                           intcon	equ	0xFF2
  5182                           intcon2	equ	0xFF1
  5183                           postinc0	equ	0xFEE
  5184                           wreg	equ	0xFE8
  5185                           indf2	equ	0xFDF
  5186                           fsr2h	equ	0xFDA
  5187                           fsr2l	equ	0xFD9
  5188                           status	equ	0xFD8
  5189                           
  5190 ;; *************** function ___fttol *****************
  5191 ;; Defined at:
  5192 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\fttol.c"
  5193 ;; Parameters:    Size  Location     Type
  5194 ;;  f1              3   46[COMRAM] float 
  5195 ;; Auto vars:     Size  Location     Type
  5196 ;;  lval            4   56[COMRAM] unsigned long 
  5197 ;;  exp1            1   60[COMRAM] unsigned char 
  5198 ;;  sign1           1   55[COMRAM] unsigned char 
  5199 ;; Return value:  Size  Location     Type
  5200 ;;                  4   46[COMRAM] long 
  5201 ;; Registers used:
  5202 ;;		wreg, status,2, status,0
  5203 ;; Tracked objects:
  5204 ;;		On entry : 0/0
  5205 ;;		On exit  : 0/0
  5206 ;;		Unchanged: 0/0
  5207 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5208 ;;      Params:         4       0       0       0       0       0       0
  5209 ;;      Locals:         6       0       0       0       0       0       0
  5210 ;;      Temps:          5       0       0       0       0       0       0
  5211 ;;      Totals:        15       0       0       0       0       0       0
  5212 ;;Total ram usage:       15 bytes
  5213 ;; Hardware stack levels used:    1
  5214 ;; Hardware stack levels required when called:    3
  5215 ;; This function calls:
  5216 ;;		Nothing
  5217 ;; This function is called by:
  5218 ;;		_EEsetupRead
  5219 ;; This function uses a non-reentrant model
  5220 ;;
  5221                           
  5222                           	psect	text23
  5223  0017BE                     __ptext23:
  5224                           	opt stack 0
  5225  0017BE                     ___fttol:
  5226                           	opt stack 0
  5227  0017BE  FFFF               	dw	65535	; assembler added errata NOP
  5228                           
  5229                           ;incstack = 0
  5230  0017C0  C031  F033         	movff	___fttol@f1+2,??___fttol
  5231  0017C4  6A34               	clrf	(??___fttol+1)& (0+255),c
  5232  0017C6  6A35               	clrf	(??___fttol+2)& (0+255),c
  5233  0017C8  3430               	rlcf	___fttol@f1+1,w,c
  5234  0017CA  3633               	rlcf	??___fttol& (0+255),f,c
  5235  0017CC  E301               	bnc	u5001
  5236  0017CE  8034               	bsf	(??___fttol+1)& (0+255),0,c
  5237  0017D0                     u5001:
  5238  0017D0  5033               	movf	??___fttol,w,c
  5239  0017D2  6E3D               	movwf	___fttol@exp1,c
  5240  0017D4  503D               	movf	___fttol@exp1,w,c
  5241  0017D6  E106               	bnz	l4348
  5242  0017D8                     u5010:
  5243  0017D8  FFFF               	dw	65535	; assembler added errata NOP
  5244  0017DA  6A2F               	clrf	?___fttol,c
  5245  0017DC  6A30               	clrf	?___fttol+1,c
  5246  0017DE  6A31               	clrf	?___fttol+2,c
  5247  0017E0  6A32               	clrf	?___fttol+3,c
  5248  0017E2  D050               	goto	l966
  5249  0017E4                     l4348:
  5250  0017E4  0E17               	movlw	23
  5251  0017E6  6E33               	movwf	??___fttol& (0+255),c
  5252  0017E8  C02F  F034         	movff	___fttol@f1,??___fttol+1
  5253  0017EC  C030  F035         	movff	___fttol@f1+1,??___fttol+2
  5254  0017F0  C031  F036         	movff	___fttol@f1+2,??___fttol+3
  5255  0017F4  2833               	incf	??___fttol,w,c
  5256  0017F6  6E37               	movwf	(??___fttol+4)& (0+255),c
  5257  0017F8  D005               	goto	u5020
  5258  0017FA                     u5025:
  5259  0017FA  FFFF               	dw	65535	; assembler added errata NOP
  5260  0017FC  90D8               	bcf	status,0,c
  5261  0017FE  3236               	rrcf	??___fttol+3,f,c
  5262  001800  3235               	rrcf	??___fttol+2,f,c
  5263  001802  3234               	rrcf	??___fttol+1,f,c
  5264  001804                     u5020:
  5265  001804  FFFF               	dw	65535	; assembler added errata NOP
  5266  001806  2E37               	decfsz	(??___fttol+4)& (0+255),f,c
  5267  001808  D7F8               	goto	u5025
  5268  00180A  5034               	movf	??___fttol+1,w,c
  5269  00180C  6E38               	movwf	___fttol@sign1,c
  5270  00180E  8E30               	bsf	___fttol@f1+1,7,c
  5271  001810  6A31               	clrf	___fttol@f1+2,c
  5272  001812  502F               	movf	___fttol@f1,w,c
  5273  001814  6E39               	movwf	___fttol@lval,c
  5274  001816  5030               	movf	___fttol@f1+1,w,c
  5275  001818  6E3A               	movwf	___fttol@lval+1,c
  5276  00181A  5031               	movf	___fttol@f1+2,w,c
  5277  00181C  6E3B               	movwf	___fttol@lval+2,c
  5278  00181E  6A3C               	clrf	___fttol@lval+3,c
  5279  001820  0E8E               	movlw	142
  5280  001822  5E3D               	subwf	___fttol@exp1,f,c
  5281  001824  AE3D               	btfss	___fttol@exp1,7,c
  5282  001826  D00D               	goto	l4368
  5283  001828  503D               	movf	___fttol@exp1,w,c
  5284  00182A  0A80               	xorlw	128
  5285  00182C  0F8F               	addlw	143
  5286  00182E  E3D4               	bnc	u5010
  5287  001830                     l4364:
  5288  001830  FFFF               	dw	65535	; assembler added errata NOP
  5289  001832  90D8               	bcf	status,0,c
  5290  001834  323C               	rrcf	___fttol@lval+3,f,c
  5291  001836  323B               	rrcf	___fttol@lval+2,f,c
  5292  001838  323A               	rrcf	___fttol@lval+1,f,c
  5293  00183A  3239               	rrcf	___fttol@lval,f,c
  5294  00183C  3E3D               	incfsz	___fttol@exp1,f,c
  5295  00183E  D7F8               	goto	l4364
  5296  001840  D00E               	goto	u5060
  5297  001842                     l4368:
  5298  001842  FFFF               	dw	65535	; assembler added errata NOP
  5299  001844  0E17               	movlw	23
  5300  001846  643D               	cpfsgt	___fttol@exp1,c
  5301  001848  D007               	goto	l4374
  5302  00184A  D7C6               	goto	u5010
  5303  00184C                     l4372:
  5304  00184C  90D8               	bcf	status,0,c
  5305  00184E  3639               	rlcf	___fttol@lval,f,c
  5306  001850  363A               	rlcf	___fttol@lval+1,f,c
  5307  001852  363B               	rlcf	___fttol@lval+2,f,c
  5308  001854  363C               	rlcf	___fttol@lval+3,f,c
  5309  001856  063D               	decf	___fttol@exp1,f,c
  5310  001858                     l4374:
  5311  001858  FFFF               	dw	65535	; assembler added errata NOP
  5312  00185A  503D               	movf	___fttol@exp1,w,c
  5313  00185C  E1F7               	bnz	l4372
  5314  00185E                     u5060:
  5315  00185E  FFFF               	dw	65535	; assembler added errata NOP
  5316  001860  5038               	movf	___fttol@sign1,w,c
  5317  001862  E008               	bz	l4380
  5318  001864  1E3C               	comf	___fttol@lval+3,f,c
  5319  001866  1E3B               	comf	___fttol@lval+2,f,c
  5320  001868  1E3A               	comf	___fttol@lval+1,f,c
  5321  00186A  6C39               	negf	___fttol@lval,c
  5322  00186C  0E00               	movlw	0
  5323  00186E  223A               	addwfc	___fttol@lval+1,f,c
  5324  001870  223B               	addwfc	___fttol@lval+2,f,c
  5325  001872  223C               	addwfc	___fttol@lval+3,f,c
  5326  001874                     l4380:
  5327  001874  C039  F02F         	movff	___fttol@lval,?___fttol
  5328  001878  C03A  F030         	movff	___fttol@lval+1,?___fttol+1
  5329  00187C  C03B  F031         	movff	___fttol@lval+2,?___fttol+2
  5330  001880  C03C  F032         	movff	___fttol@lval+3,?___fttol+3
  5331  001884                     l966:
  5332  001884  FFFF               	dw	65535	; assembler added errata NOP
  5333  001886  0012               	return		;funcret
  5334  001888  FFFF               	dw	65535	; errata NOP
  5335  00188A                     __end_of___fttol:
  5336                           	opt stack 0
  5337                           stkptr	equ	0xFFC
  5338                           tblptru	equ	0xFF8
  5339                           tblptrh	equ	0xFF7
  5340                           tblptrl	equ	0xFF6
  5341                           tablat	equ	0xFF5
  5342                           prodh	equ	0xFF4
  5343                           prodl	equ	0xFF3
  5344                           intcon	equ	0xFF2
  5345                           intcon2	equ	0xFF1
  5346                           postinc0	equ	0xFEE
  5347                           wreg	equ	0xFE8
  5348                           indf2	equ	0xFDF
  5349                           fsr2h	equ	0xFDA
  5350                           fsr2l	equ	0xFD9
  5351                           status	equ	0xFD8
  5352                           
  5353 ;; *************** function _EEmbandRead *****************
  5354 ;; Defined at:
  5355 ;;		line 77 in file "../eep.h"
  5356 ;; Parameters:    Size  Location     Type
  5357 ;;		None
  5358 ;; Auto vars:     Size  Location     Type
  5359 ;;		None
  5360 ;; Return value:  Size  Location     Type
  5361 ;;                  1    wreg      void 
  5362 ;; Registers used:
  5363 ;;		wreg, status,2, status,0, cstack
  5364 ;; Tracked objects:
  5365 ;;		On entry : 3F/0
  5366 ;;		On exit  : 3F/0
  5367 ;;		Unchanged: 0/0
  5368 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5369 ;;      Params:         0       0       0       0       0       0       0
  5370 ;;      Locals:         0       0       0       0       0       0       0
  5371 ;;      Temps:          0       0       0       0       0       0       0
  5372 ;;      Totals:         0       0       0       0       0       0       0
  5373 ;;Total ram usage:        0 bytes
  5374 ;; Hardware stack levels used:    1
  5375 ;; Hardware stack levels required when called:    4
  5376 ;; This function calls:
  5377 ;;		_readEEPROM
  5378 ;; This function is called by:
  5379 ;;		_ReadStatusFromLCD
  5380 ;;		_main
  5381 ;; This function uses a non-reentrant model
  5382 ;;
  5383                           
  5384                           	psect	text24
  5385  0020D4                     __ptext24:
  5386                           	opt stack 0
  5387  0020D4                     _EEmbandRead:
  5388                           	opt stack 0
  5389  0020D4  FFFF               	dw	65535	; assembler added errata NOP
  5390                           
  5391                           ; BSR set to: 0
  5392                           ;eep.h: 79: band = readEEPROM(26)&0x07;
  5393                           
  5394                           ;incstack = 0
  5395  0020D6  0E1A               	movlw	26
  5396  0020D8  ECA1  F011         	call	_readEEPROM
  5397  0020DC  0B07               	andlw	7
  5398  0020DE  6E57               	movwf	_band,c	;volatile
  5399                           
  5400                           ;eep.h: 80: aband = readEEPROM(27)&0x01;
  5401  0020E0  0E1B               	movlw	27
  5402  0020E2  ECA1  F011         	call	_readEEPROM
  5403  0020E6  0B01               	andlw	1
  5404  0020E8  0100               	movlb	0	; () banked
  5405  0020EA  6FF1               	movwf	_aband& (0+255),b	;volatile
  5406                           
  5407                           ;eep.h: 81: bypass = readEEPROM(28)&0x01;
  5408  0020EC  0E1C               	movlw	28
  5409  0020EE  ECA1  F011         	call	_readEEPROM
  5410  0020F2  0B01               	andlw	1
  5411  0020F4  6E58               	movwf	_bypass,c	;volatile
  5412                           
  5413                           ;eep.h: 82: ant = readEEPROM(29)&0x01;
  5414  0020F6  0E1D               	movlw	29
  5415  0020F8  ECA1  F011         	call	_readEEPROM
  5416  0020FC  0B01               	andlw	1
  5417  0020FE  0100               	movlb	0	; () banked
  5418  002100  6FF2               	movwf	_ant& (0+255),b	;volatile
  5419                           
  5420                           ; BSR set to: 0
  5421  002102  0012               	return		;funcret
  5422  002104  FFFF               	dw	65535	; errata NOP
  5423  002106                     __end_of_EEmbandRead:
  5424                           	opt stack 0
  5425                           stkptr	equ	0xFFC
  5426                           tblptru	equ	0xFF8
  5427                           tblptrh	equ	0xFF7
  5428                           tblptrl	equ	0xFF6
  5429                           tablat	equ	0xFF5
  5430                           prodh	equ	0xFF4
  5431                           prodl	equ	0xFF3
  5432                           intcon	equ	0xFF2
  5433                           intcon2	equ	0xFF1
  5434                           postinc0	equ	0xFEE
  5435                           wreg	equ	0xFE8
  5436                           indf2	equ	0xFDF
  5437                           fsr2h	equ	0xFDA
  5438                           fsr2l	equ	0xFD9
  5439                           status	equ	0xFD8
  5440                           
  5441 ;; *************** function _readEEPROM *****************
  5442 ;; Defined at:
  5443 ;;		line 2 in file "../eep.h"
  5444 ;; Parameters:    Size  Location     Type
  5445 ;;  addr            1    wreg     unsigned char 
  5446 ;; Auto vars:     Size  Location     Type
  5447 ;;  addr            1    4[COMRAM] unsigned char 
  5448 ;; Return value:  Size  Location     Type
  5449 ;;                  1    wreg      unsigned char 
  5450 ;; Registers used:
  5451 ;;		wreg, status,2
  5452 ;; Tracked objects:
  5453 ;;		On entry : 0/0
  5454 ;;		On exit  : 0/0
  5455 ;;		Unchanged: 0/0
  5456 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5457 ;;      Params:         0       0       0       0       0       0       0
  5458 ;;      Locals:         1       0       0       0       0       0       0
  5459 ;;      Temps:          0       0       0       0       0       0       0
  5460 ;;      Totals:         1       0       0       0       0       0       0
  5461 ;;Total ram usage:        1 bytes
  5462 ;; Hardware stack levels used:    1
  5463 ;; Hardware stack levels required when called:    3
  5464 ;; This function calls:
  5465 ;;		Nothing
  5466 ;; This function is called by:
  5467 ;;		_readEEPROM16
  5468 ;;		_EEsetupRead
  5469 ;;		_EEmbandRead
  5470 ;; This function uses a non-reentrant model
  5471 ;;
  5472                           
  5473                           	psect	text25
  5474  002342                     __ptext25:
  5475                           	opt stack 0
  5476  002342                     _readEEPROM:
  5477                           	opt stack 0
  5478  002342  FFFF               	dw	65535	; assembler added errata NOP
  5479                           
  5480                           ; BSR set to: 0
  5481                           ;incstack = 0
  5482                           ;readEEPROM@addr stored from wreg
  5483  002344  6E05               	movwf	readEEPROM@addr,c
  5484                           
  5485                           ;eep.h: 4: EECON1 = 0;
  5486  002346  6AA6               	clrf	4006,c	;volsfr
  5487                           
  5488                           ;eep.h: 5: EEADR = addr;
  5489  002348  C005  FFA9         	movff	readEEPROM@addr,4009	;volatile
  5490                           
  5491                           ;eep.h: 6: EECON1bits.RD = 1;
  5492  00234C  80A6               	bsf	4006,0,c	;volsfr
  5493                           
  5494                           ;eep.h: 7: __nop();
  5495  00234E  F000               	nop	
  5496                           
  5497                           ;eep.h: 8: __nop();
  5498  002350  F000               	nop	
  5499                           
  5500                           ;eep.h: 9: __nop();
  5501  002352  F000               	nop	
  5502                           
  5503                           ;eep.h: 10: __nop();
  5504  002354  F000               	nop	
  5505                           
  5506                           ;eep.h: 11: return EEDATA;
  5507  002356  50A8               	movf	4008,w,c	;volatile
  5508  002358  0012               	return		;funcret
  5509  00235A  FFFF               	dw	65535	; errata NOP
  5510  00235C                     __end_of_readEEPROM:
  5511                           	opt stack 0
  5512                           stkptr	equ	0xFFC
  5513                           tblptru	equ	0xFF8
  5514                           tblptrh	equ	0xFF7
  5515                           tblptrl	equ	0xFF6
  5516                           tablat	equ	0xFF5
  5517                           prodh	equ	0xFF4
  5518                           prodl	equ	0xFF3
  5519                           intcon	equ	0xFF2
  5520                           intcon2	equ	0xFF1
  5521                           postinc0	equ	0xFEE
  5522                           wreg	equ	0xFE8
  5523                           indf2	equ	0xFDF
  5524                           fsr2h	equ	0xFDA
  5525                           fsr2l	equ	0xFD9
  5526                           status	equ	0xFD8
  5527                           
  5528 ;; *************** function _Beep *****************
  5529 ;; Defined at:
  5530 ;;		line 83 in file "../digital.h"
  5531 ;; Parameters:    Size  Location     Type
  5532 ;;		None
  5533 ;; Auto vars:     Size  Location     Type
  5534 ;;		None
  5535 ;; Return value:  Size  Location     Type
  5536 ;;                  1    wreg      void 
  5537 ;; Registers used:
  5538 ;;		wreg, status,2, status,0, cstack
  5539 ;; Tracked objects:
  5540 ;;		On entry : 0/0
  5541 ;;		On exit  : 0/0
  5542 ;;		Unchanged: 0/0
  5543 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5544 ;;      Params:         0       0       0       0       0       0       0
  5545 ;;      Locals:         0       0       0       0       0       0       0
  5546 ;;      Temps:          0       0       0       0       0       0       0
  5547 ;;      Totals:         0       0       0       0       0       0       0
  5548 ;;Total ram usage:        0 bytes
  5549 ;; Hardware stack levels used:    1
  5550 ;; Hardware stack levels required when called:    4
  5551 ;; This function calls:
  5552 ;;		_DelayMs
  5553 ;; This function is called by:
  5554 ;;		_ReadStatusFromLCD
  5555 ;;		_main
  5556 ;; This function uses a non-reentrant model
  5557 ;;
  5558                           
  5559                           	psect	text26
  5560  0022EE                     __ptext26:
  5561                           	opt stack 0
  5562  0022EE                     _Beep:
  5563                           	opt stack 0
  5564  0022EE  FFFF               	dw	65535	; assembler added errata NOP
  5565                           
  5566                           ;digital.h: 85: if (!beeper) return;
  5567                           
  5568                           ;incstack = 0
  5569  0022F0  0100               	movlb	0	; () banked
  5570  0022F2  51EE               	movf	_beeper& (0+255),w,b	;volatile
  5571  0022F4  E008               	bz	l346
  5572                           
  5573                           ; BSR set to: 0
  5574                           ;digital.h: 86: LATCbits.LC5 = 1; DelayMs(100);
  5575  0022F6  8A8B               	bsf	3979,5,c	;volatile
  5576                           
  5577                           ; BSR set to: 0
  5578  0022F8  0E64               	movlw	100
  5579  0022FA  EC44  F011         	call	_DelayMs
  5580                           
  5581                           ;digital.h: 87: LATCbits.LC5 = 0; DelayMs(100);
  5582  0022FE  9A8B               	bcf	3979,5,c	;volatile
  5583  002300  0E64               	movlw	100
  5584  002302  EC44  F011         	call	_DelayMs
  5585  002306                     l346:
  5586  002306  0012               	return		;funcret
  5587  002308  FFFF               	dw	65535	; errata NOP
  5588  00230A                     __end_of_Beep:
  5589                           	opt stack 0
  5590                           stkptr	equ	0xFFC
  5591                           tblptru	equ	0xFF8
  5592                           tblptrh	equ	0xFF7
  5593                           tblptrl	equ	0xFF6
  5594                           tablat	equ	0xFF5
  5595                           prodh	equ	0xFF4
  5596                           prodl	equ	0xFF3
  5597                           intcon	equ	0xFF2
  5598                           intcon2	equ	0xFF1
  5599                           postinc0	equ	0xFEE
  5600                           wreg	equ	0xFE8
  5601                           indf2	equ	0xFDF
  5602                           fsr2h	equ	0xFDA
  5603                           fsr2l	equ	0xFD9
  5604                           status	equ	0xFD8
  5605                           
  5606 ;; *************** function _AntennaSelect *****************
  5607 ;; Defined at:
  5608 ;;		line 171 in file "../digital.h"
  5609 ;; Parameters:    Size  Location     Type
  5610 ;;  ant             1    wreg     unsigned char 
  5611 ;; Auto vars:     Size  Location     Type
  5612 ;;  ant             1    4[COMRAM] unsigned char 
  5613 ;; Return value:  Size  Location     Type
  5614 ;;                  1    wreg      void 
  5615 ;; Registers used:
  5616 ;;		wreg, status,2
  5617 ;; Tracked objects:
  5618 ;;		On entry : 0/0
  5619 ;;		On exit  : 0/0
  5620 ;;		Unchanged: 0/0
  5621 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5622 ;;      Params:         0       0       0       0       0       0       0
  5623 ;;      Locals:         1       0       0       0       0       0       0
  5624 ;;      Temps:          0       0       0       0       0       0       0
  5625 ;;      Totals:         1       0       0       0       0       0       0
  5626 ;;Total ram usage:        1 bytes
  5627 ;; Hardware stack levels used:    1
  5628 ;; Hardware stack levels required when called:    3
  5629 ;; This function calls:
  5630 ;;		Nothing
  5631 ;; This function is called by:
  5632 ;;		_ReadStatusFromLCD
  5633 ;;		_main
  5634 ;; This function uses a non-reentrant model
  5635 ;;
  5636                           
  5637                           	psect	text27
  5638  002376                     __ptext27:
  5639                           	opt stack 0
  5640  002376                     _AntennaSelect:
  5641                           	opt stack 0
  5642  002376  FFFF               	dw	65535	; assembler added errata NOP
  5643                           
  5644                           ;incstack = 0
  5645                           ;AntennaSelect@ant stored from wreg
  5646  002378  6E05               	movwf	AntennaSelect@ant,c
  5647                           
  5648                           ;digital.h: 173: if (ant == 0)
  5649  00237A  5005               	movf	AntennaSelect@ant,w,c
  5650  00237C  E103               	bnz	l387
  5651                           
  5652                           ;digital.h: 174: {;digital.h: 175: LATDbits.LD6 = 1;
  5653  00237E  8C8C               	bsf	3980,6,c	;volatile
  5654                           
  5655                           ;digital.h: 176: LATDbits.LD5 = 0;
  5656  002380  9A8C               	bcf	3980,5,c	;volatile
  5657                           
  5658                           ;digital.h: 177: }
  5659  002382  D002               	goto	l389
  5660  002384                     l387:
  5661                           
  5662                           ;digital.h: 178: else;digital.h: 179: {;digital.h: 180: LATDbits.LD6 = 0;
  5663  002384  9C8C               	bcf	3980,6,c	;volatile
  5664                           
  5665                           ;digital.h: 181: LATDbits.LD5 = 1;
  5666  002386  8A8C               	bsf	3980,5,c	;volatile
  5667  002388                     l389:
  5668  002388  FFFF               	dw	65535	; assembler added errata NOP
  5669  00238A  0012               	return		;funcret
  5670  00238C  FFFF               	dw	65535	; errata NOP
  5671  00238E                     __end_of_AntennaSelect:
  5672                           	opt stack 0
  5673                           stkptr	equ	0xFFC
  5674                           tblptru	equ	0xFF8
  5675                           tblptrh	equ	0xFF7
  5676                           tblptrl	equ	0xFF6
  5677                           tablat	equ	0xFF5
  5678                           prodh	equ	0xFF4
  5679                           prodl	equ	0xFF3
  5680                           intcon	equ	0xFF2
  5681                           intcon2	equ	0xFF1
  5682                           postinc0	equ	0xFEE
  5683                           wreg	equ	0xFE8
  5684                           indf2	equ	0xFDF
  5685                           fsr2h	equ	0xFDA
  5686                           fsr2l	equ	0xFD9
  5687                           status	equ	0xFD8
  5688                           
  5689 ;; *************** function _ProtectCheck *****************
  5690 ;; Defined at:
  5691 ;;		line 239 in file "../digital.h"
  5692 ;; Parameters:    Size  Location     Type
  5693 ;;		None
  5694 ;; Auto vars:     Size  Location     Type
  5695 ;;		None
  5696 ;; Return value:  Size  Location     Type
  5697 ;;                  1    wreg      void 
  5698 ;; Registers used:
  5699 ;;		wreg, status,2, status,0, cstack
  5700 ;; Tracked objects:
  5701 ;;		On entry : 3F/0
  5702 ;;		On exit  : 3F/0
  5703 ;;		Unchanged: 0/0
  5704 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5705 ;;      Params:         0       0       0       0       0       0       0
  5706 ;;      Locals:         0       0       0       0       0       0       0
  5707 ;;      Temps:          0       0       0       0       0       0       0
  5708 ;;      Totals:         0       0       0       0       0       0       0
  5709 ;;Total ram usage:        0 bytes
  5710 ;; Hardware stack levels used:    1
  5711 ;; Hardware stack levels required when called:    8
  5712 ;; This function calls:
  5713 ;;		_PTT_read
  5714 ;;		_SwitchOFF
  5715 ;; This function is called by:
  5716 ;;		_main
  5717 ;; This function uses a non-reentrant model
  5718 ;;
  5719                           
  5720                           	psect	text28
  5721  00144C                     __ptext28:
  5722                           	opt stack 0
  5723  00144C                     _ProtectCheck:
  5724                           	opt stack 0
  5725  00144C  FFFF               	dw	65535	; assembler added errata NOP
  5726                           
  5727                           ; BSR set to: 0
  5728                           
  5729                           ;incstack = 0
  5730  00144E  0004               	clrwdt		;# 
  5731                           
  5732                           ;digital.h: 247: if (frwd >= max_pwr) err |= 0x01;
  5733  001450  0100               	movlb	0	; () banked
  5734  001452  51E9               	movf	_max_pwr& (0+255),w,b	;volatile
  5735  001454  5C50               	subwf	_frwd,w,c	;volatile
  5736  001456  51EA               	movf	(_max_pwr+1)& (0+255),w,b	;volatile
  5737  001458  5851               	subwfb	_frwd+1,w,c	;volatile
  5738  00145A  E301               	bnc	l4448
  5739                           
  5740                           ; BSR set to: 0
  5741  00145C  8054               	bsf	_err,0,c	;volatile
  5742  00145E                     l4448:
  5743                           
  5744                           ; BSR set to: 0
  5745                           ;digital.h: 249: if (refl >= max_ref) err |= 0x02;
  5746  00145E  51E7               	movf	_max_ref& (0+255),w,b	;volatile
  5747  001460  5C4E               	subwf	_refl,w,c	;volatile
  5748  001462  51E8               	movf	(_max_ref+1)& (0+255),w,b	;volatile
  5749  001464  584F               	subwfb	_refl+1,w,c	;volatile
  5750  001466  E301               	bnc	l4452
  5751                           
  5752                           ; BSR set to: 0
  5753  001468  8254               	bsf	_err,1,c	;volatile
  5754  00146A                     l4452:
  5755                           
  5756                           ; BSR set to: 0
  5757                           ;digital.h: 251: if (curr >= max_curr) err |= 0x04;
  5758  00146A  51E3               	movf	_max_curr& (0+255),w,b	;volatile
  5759  00146C  5C4C               	subwf	_curr,w,c	;volatile
  5760  00146E  51E4               	movf	(_max_curr+1)& (0+255),w,b	;volatile
  5761  001470  584D               	subwfb	_curr+1,w,c	;volatile
  5762  001472  E301               	bnc	l4456
  5763                           
  5764                           ; BSR set to: 0
  5765  001474  8454               	bsf	_err,2,c	;volatile
  5766  001476                     l4456:
  5767                           
  5768                           ; BSR set to: 0
  5769                           ;digital.h: 253: if ((curr >= lpferrC) && (frwd <= lpferrP))
  5770  001476  51DB               	movf	_lpferrC& (0+255),w,b	;volatile
  5771  001478  5C4C               	subwf	_curr,w,c	;volatile
  5772  00147A  51DC               	movf	(_lpferrC+1)& (0+255),w,b	;volatile
  5773  00147C  584D               	subwfb	_curr+1,w,c	;volatile
  5774  00147E  E30E               	bnc	l422
  5775                           
  5776                           ; BSR set to: 0
  5777  001480  5050               	movf	_frwd,w,c	;volatile
  5778  001482  5DDD               	subwf	_lpferrP& (0+255),w,b	;volatile
  5779  001484  5051               	movf	_frwd+1,w,c	;volatile
  5780  001486  59DE               	subwfb	(_lpferrP+1)& (0+255),w,b	;volatile
  5781  001488  E309               	bnc	l422
  5782                           
  5783                           ; BSR set to: 0
  5784                           ;digital.h: 254: {;digital.h: 255: if (++elpf >= lpferrR) err |= 0x10;
  5785  00148A  4B6C               	infsnz	_elpf& (0+255),f,b	;volatile
  5786  00148C  2B6D               	incf	(_elpf+1)& (0+255),f,b	;volatile
  5787  00148E  51D9               	movf	_lpferrR& (0+255),w,b	;volatile
  5788  001490  5D6C               	subwf	_elpf& (0+255),w,b	;volatile
  5789  001492  51DA               	movf	(_lpferrR+1)& (0+255),w,b	;volatile
  5790  001494  596D               	subwfb	(_elpf+1)& (0+255),w,b	;volatile
  5791  001496  E304               	bnc	l4464
  5792                           
  5793                           ; BSR set to: 0
  5794  001498  8854               	bsf	_err,4,c	;volatile
  5795  00149A  D002               	goto	l4464
  5796  00149C                     l422:
  5797                           
  5798                           ; BSR set to: 0
  5799                           ;digital.h: 257: else elpf = 0;
  5800  00149C  6B6C               	clrf	_elpf& (0+255),b	;volatile
  5801  00149E  6B6D               	clrf	(_elpf+1)& (0+255),b	;volatile
  5802  0014A0                     l4464:
  5803  0014A0  FFFF               	dw	65535	; assembler added errata NOP
  5804                           
  5805                           ; BSR set to: 0
  5806                           ;digital.h: 259: if (temp >= max_temp) err |= 0x20;
  5807  0014A2  51E1               	movf	_max_temp& (0+255),w,b	;volatile
  5808  0014A4  5C4A               	subwf	_temp,w,c	;volatile
  5809  0014A6  51E2               	movf	(_max_temp+1)& (0+255),w,b	;volatile
  5810  0014A8  584B               	subwfb	_temp+1,w,c	;volatile
  5811  0014AA  E301               	bnc	l4468
  5812                           
  5813                           ; BSR set to: 0
  5814  0014AC  8A54               	bsf	_err,5,c	;volatile
  5815  0014AE                     l4468:
  5816                           
  5817                           ; BSR set to: 0
  5818                           ;digital.h: 261: if (volt >= max_volt) err |= 0x40;
  5819  0014AE  51E5               	movf	_max_volt& (0+255),w,b	;volatile
  5820  0014B0  5D82               	subwf	_volt& (0+255),w,b	;volatile
  5821  0014B2  51E6               	movf	(_max_volt+1)& (0+255),w,b	;volatile
  5822  0014B4  5983               	subwfb	(_volt+1)& (0+255),w,b	;volatile
  5823  0014B6  E301               	bnc	l4472
  5824                           
  5825                           ; BSR set to: 0
  5826  0014B8  8C54               	bsf	_err,6,c	;volatile
  5827  0014BA                     l4472:
  5828                           
  5829                           ; BSR set to: 0
  5830                           ;digital.h: 263: if (ptt_hold)
  5831  0014BA  51EB               	movf	_ptt_hold& (0+255),w,b	;volatile
  5832  0014BC  E004               	bz	l4478
  5833                           
  5834                           ; BSR set to: 0
  5835                           ;digital.h: 264: {;digital.h: 265: if (ptt_htimer >= ptt_hold) err |= 0x08;
  5836  0014BE  51EB               	movf	_ptt_hold& (0+255),w,b	;volatile
  5837  0014C0  5D88               	subwf	_ptt_htimer& (0+255),w,b	;volatile
  5838  0014C2  E301               	bnc	l4478
  5839                           
  5840                           ; BSR set to: 0
  5841  0014C4  8654               	bsf	_err,3,c	;volatile
  5842  0014C6                     l4478:
  5843                           
  5844                           ; BSR set to: 0
  5845                           ;digital.h: 266: };digital.h: 268: if (err)
  5846  0014C6  5054               	movf	_err,w,c	;volatile
  5847  0014C8  E02B               	bz	l429
  5848                           
  5849                           ; BSR set to: 0
  5850                           ;digital.h: 269: {;digital.h: 270: SwitchOFF();
  5851  0014CA  ECD2  F011         	call	_SwitchOFF	;wreg free
  5852                           
  5853                           ; BSR set to: 0
  5854                           ;digital.h: 272: if (!beeper) return;
  5855  0014CE  51EE               	movf	_beeper& (0+255),w,b	;volatile
  5856  0014D0  E02D               	bz	l431
  5857                           
  5858                           ; BSR set to: 0
  5859                           ;digital.h: 273: if (err & 0x20) beepPer = 2500*10;
  5860  0014D2  AA54               	btfss	_err,5,c	;volatile
  5861  0014D4  D004               	goto	l4488
  5862                           
  5863                           ; BSR set to: 0
  5864  0014D6  0E61               	movlw	97
  5865  0014D8  6F65               	movwf	(ProtectCheck@beepPer+1)& (0+255),b
  5866  0014DA  0EA8               	movlw	168
  5867  0014DC  D004               	goto	L2
  5868  0014DE                     l4488:
  5869  0014DE  FFFF               	dw	65535	; assembler added errata NOP
  5870                           
  5871                           ; BSR set to: 0
  5872                           ;digital.h: 274: else beepPer = 2500;
  5873  0014E0  0E09               	movlw	9
  5874  0014E2  6F65               	movwf	(ProtectCheck@beepPer+1)& (0+255),b
  5875  0014E4  0EC4               	movlw	196
  5876  0014E6                     L2:
  5877  0014E6  FFFF               	dw	65535	; assembler added errata NOP
  5878  0014E8  6F64               	movwf	ProtectCheck@beepPer& (0+255),b
  5879                           
  5880                           ; BSR set to: 0
  5881                           ;digital.h: 276: if (bp == 0)
  5882  0014EA  5184               	movf	ProtectCheck@bp& (0+255),w,b
  5883  0014EC  E10B               	bnz	l434
  5884                           
  5885                           ; BSR set to: 0
  5886                           ;digital.h: 277: {;digital.h: 278: LATCbits.LC5 = 1;
  5887  0014EE  8A8B               	bsf	3979,5,c	;volatile
  5888                           
  5889                           ; BSR set to: 0
  5890                           ;digital.h: 279: if (++bpt >= 2500) {bp = 1; bpt = 0;}
  5891  0014F0  4B66               	infsnz	ProtectCheck@bpt& (0+255),f,b
  5892  0014F2  2B67               	incf	(ProtectCheck@bpt+1)& (0+255),f,b
  5893  0014F4  0EC4               	movlw	196
  5894  0014F6  5D66               	subwf	ProtectCheck@bpt& (0+255),w,b
  5895  0014F8  0E09               	movlw	9
  5896  0014FA  5967               	subwfb	(ProtectCheck@bpt+1)& (0+255),w,b
  5897  0014FC  E317               	bnc	l431
  5898                           
  5899                           ; BSR set to: 0
  5900  0014FE  0E01               	movlw	1
  5901  001500  6F84               	movwf	ProtectCheck@bp& (0+255),b
  5902  001502  D00A               	goto	L3
  5903  001504                     l434:
  5904                           
  5905                           ; BSR set to: 0
  5906                           ;digital.h: 281: else;digital.h: 282: {;digital.h: 283: LATCbits.LC5 = 0;
  5907  001504  9A8B               	bcf	3979,5,c	;volatile
  5908                           
  5909                           ; BSR set to: 0
  5910                           ;digital.h: 284: if (++bpt >= beepPer) {bp = 0; bpt = 0;}
  5911  001506  4B66               	infsnz	ProtectCheck@bpt& (0+255),f,b
  5912  001508  2B67               	incf	(ProtectCheck@bpt+1)& (0+255),f,b
  5913  00150A  5164               	movf	ProtectCheck@beepPer& (0+255),w,b
  5914  00150C  5D66               	subwf	ProtectCheck@bpt& (0+255),w,b
  5915  00150E  5165               	movf	(ProtectCheck@beepPer+1)& (0+255),w,b
  5916  001510  5967               	subwfb	(ProtectCheck@bpt+1)& (0+255),w,b
  5917  001512  E30C               	bnc	l431
  5918  001514                     u5260:
  5919  001514  FFFF               	dw	65535	; assembler added errata NOP
  5920                           
  5921                           ; BSR set to: 0
  5922  001516  6B84               	clrf	ProtectCheck@bp& (0+255),b
  5923  001518                     L3:
  5924  001518  FFFF               	dw	65535	; assembler added errata NOP
  5925  00151A  6B66               	clrf	ProtectCheck@bpt& (0+255),b
  5926  00151C  6B67               	clrf	(ProtectCheck@bpt+1)& (0+255),b
  5927  00151E  D006               	goto	l431
  5928  001520                     l429:
  5929                           
  5930                           ; BSR set to: 0
  5931                           ;digital.h: 287: else;digital.h: 288: {;digital.h: 289: LATEbits.LE1 = 1;
  5932  001520  828D               	bsf	3981,1,c	;volatile
  5933                           
  5934                           ; BSR set to: 0
  5935                           ;digital.h: 290: PTT_read();
  5936  001522  EC85  F011         	call	_PTT_read	;wreg free
  5937                           
  5938                           ;digital.h: 292: LATCbits.LC5 = 0; bp = 0; bpt = 0;
  5939  001526  9A8B               	bcf	3979,5,c	;volatile
  5940  001528  0100               	movlb	0	; () banked
  5941  00152A  D7F4               	goto	u5260
  5942  00152C                     l431:
  5943  00152C  FFFF               	dw	65535	; assembler added errata NOP
  5944                           
  5945                           ; BSR set to: 0
  5946  00152E  0012               	return		;funcret
  5947  001530  FFFF               	dw	65535	; errata NOP
  5948  001532                     __end_of_ProtectCheck:
  5949                           	opt stack 0
  5950                           stkptr	equ	0xFFC
  5951                           tblptru	equ	0xFF8
  5952                           tblptrh	equ	0xFF7
  5953                           tblptrl	equ	0xFF6
  5954                           tablat	equ	0xFF5
  5955                           prodh	equ	0xFF4
  5956                           prodl	equ	0xFF3
  5957                           intcon	equ	0xFF2
  5958                           intcon2	equ	0xFF1
  5959                           postinc0	equ	0xFEE
  5960                           wreg	equ	0xFE8
  5961                           indf2	equ	0xFDF
  5962                           fsr2h	equ	0xFDA
  5963                           fsr2l	equ	0xFD9
  5964                           status	equ	0xFD8
  5965                           
  5966 ;; *************** function _SwitchOFF *****************
  5967 ;; Defined at:
  5968 ;;		line 90 in file "../digital.h"
  5969 ;; Parameters:    Size  Location     Type
  5970 ;;		None
  5971 ;; Auto vars:     Size  Location     Type
  5972 ;;		None
  5973 ;; Return value:  Size  Location     Type
  5974 ;;                  1    wreg      void 
  5975 ;; Registers used:
  5976 ;;		None
  5977 ;; Tracked objects:
  5978 ;;		On entry : 3F/0
  5979 ;;		On exit  : 3F/0
  5980 ;;		Unchanged: 3F/0
  5981 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5982 ;;      Params:         0       0       0       0       0       0       0
  5983 ;;      Locals:         0       0       0       0       0       0       0
  5984 ;;      Temps:          0       0       0       0       0       0       0
  5985 ;;      Totals:         0       0       0       0       0       0       0
  5986 ;;Total ram usage:        0 bytes
  5987 ;; Hardware stack levels used:    1
  5988 ;; Hardware stack levels required when called:    3
  5989 ;; This function calls:
  5990 ;;		Nothing
  5991 ;; This function is called by:
  5992 ;;		_ProtectCheck
  5993 ;;		_SetupMode
  5994 ;; This function uses a non-reentrant model
  5995 ;;
  5996                           
  5997                           	psect	text29
  5998  0023A4                     __ptext29:
  5999                           	opt stack 0
  6000  0023A4                     _SwitchOFF:
  6001                           	opt stack 0
  6002  0023A4  FFFF               	dw	65535	; assembler added errata NOP
  6003                           
  6004                           ; BSR set to: 0
  6005                           ;digital.h: 92: LATEbits.LE2 = 0;
  6006                           
  6007                           ; BSR set to: 0
  6008                           ;incstack = 0
  6009  0023A6  948D               	bcf	3981,2,c	;volatile
  6010                           
  6011                           ;digital.h: 93: LATEbits.LE1 = 0;
  6012  0023A8  928D               	bcf	3981,1,c	;volatile
  6013                           
  6014                           ;digital.h: 94: LATCbits.LC4 = 0;
  6015  0023AA  988B               	bcf	3979,4,c	;volatile
  6016                           
  6017                           ;digital.h: 95: LATBbits.LB3 = 0;
  6018  0023AC  968A               	bcf	3978,3,c	;volatile
  6019                           
  6020                           ;digital.h: 97: ptt = 0;
  6021  0023AE  6A56               	clrf	_ptt,c	;volatile
  6022                           
  6023                           ; BSR set to: 0
  6024  0023B0  0012               	return		;funcret
  6025  0023B2  FFFF               	dw	65535	; errata NOP
  6026  0023B4                     __end_of_SwitchOFF:
  6027                           	opt stack 0
  6028                           stkptr	equ	0xFFC
  6029                           tblptru	equ	0xFF8
  6030                           tblptrh	equ	0xFF7
  6031                           tblptrl	equ	0xFF6
  6032                           tablat	equ	0xFF5
  6033                           prodh	equ	0xFF4
  6034                           prodl	equ	0xFF3
  6035                           intcon	equ	0xFF2
  6036                           intcon2	equ	0xFF1
  6037                           postinc0	equ	0xFEE
  6038                           wreg	equ	0xFE8
  6039                           indf2	equ	0xFDF
  6040                           fsr2h	equ	0xFDA
  6041                           fsr2l	equ	0xFD9
  6042                           status	equ	0xFD8
  6043                           
  6044 ;; *************** function _PTT_read *****************
  6045 ;; Defined at:
  6046 ;;		line 129 in file "../digital.h"
  6047 ;; Parameters:    Size  Location     Type
  6048 ;;		None
  6049 ;; Auto vars:     Size  Location     Type
  6050 ;;		None
  6051 ;; Return value:  Size  Location     Type
  6052 ;;                  1    wreg      void 
  6053 ;; Registers used:
  6054 ;;		wreg, status,2, status,0, cstack
  6055 ;; Tracked objects:
  6056 ;;		On entry : 3F/0
  6057 ;;		On exit  : 0/0
  6058 ;;		Unchanged: 0/0
  6059 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6060 ;;      Params:         0       0       0       0       0       0       0
  6061 ;;      Locals:         0       0       0       0       0       0       0
  6062 ;;      Temps:          0       0       0       0       0       0       0
  6063 ;;      Totals:         0       0       0       0       0       0       0
  6064 ;;Total ram usage:        0 bytes
  6065 ;; Hardware stack levels used:    1
  6066 ;; Hardware stack levels required when called:    7
  6067 ;; This function calls:
  6068 ;;		_PTT_OFF
  6069 ;;		_PTT_ON
  6070 ;; This function is called by:
  6071 ;;		_ProtectCheck
  6072 ;; This function uses a non-reentrant model
  6073 ;;
  6074                           
  6075                           	psect	text30
  6076  00230A                     __ptext30:
  6077                           	opt stack 0
  6078  00230A                     _PTT_read:
  6079                           	opt stack 0
  6080  00230A  FFFF               	dw	65535	; assembler added errata NOP
  6081                           
  6082                           ; BSR set to: 0
  6083                           ;digital.h: 131: if (bypass) return;
  6084                           
  6085                           ; BSR set to: 0
  6086                           ;incstack = 0
  6087  00230C  5058               	movf	_bypass,w,c	;volatile
  6088  00230E  E108               	bnz	l363
  6089                           
  6090                           ; BSR set to: 0
  6091                           ;digital.h: 133: if (!PORTAbits.RA4) PTT_ON();
  6092  002310  B880               	btfsc	3968,4,c	;volatile
  6093  002312  D003               	goto	l4440
  6094                           
  6095                           ; BSR set to: 0
  6096  002314  ECB3  F010         	call	_PTT_ON	;wreg free
  6097  002318  D003               	goto	l363
  6098  00231A                     l4440:
  6099  00231A  FFFF               	dw	65535	; assembler added errata NOP
  6100                           
  6101                           ; BSR set to: 0
  6102                           ;digital.h: 134: else PTT_OFF();
  6103  00231C  ECAE  F011         	call	_PTT_OFF	;wreg free
  6104  002320                     l363:
  6105  002320  FFFF               	dw	65535	; assembler added errata NOP
  6106  002322  0012               	return		;funcret
  6107  002324  FFFF               	dw	65535	; errata NOP
  6108  002326                     __end_of_PTT_read:
  6109                           	opt stack 0
  6110                           stkptr	equ	0xFFC
  6111                           tblptru	equ	0xFF8
  6112                           tblptrh	equ	0xFF7
  6113                           tblptrl	equ	0xFF6
  6114                           tablat	equ	0xFF5
  6115                           prodh	equ	0xFF4
  6116                           prodl	equ	0xFF3
  6117                           intcon	equ	0xFF2
  6118                           intcon2	equ	0xFF1
  6119                           postinc0	equ	0xFEE
  6120                           wreg	equ	0xFE8
  6121                           indf2	equ	0xFDF
  6122                           fsr2h	equ	0xFDA
  6123                           fsr2l	equ	0xFD9
  6124                           status	equ	0xFD8
  6125                           
  6126 ;; *************** function _PTT_ON *****************
  6127 ;; Defined at:
  6128 ;;		line 100 in file "../digital.h"
  6129 ;; Parameters:    Size  Location     Type
  6130 ;;		None
  6131 ;; Auto vars:     Size  Location     Type
  6132 ;;		None
  6133 ;; Return value:  Size  Location     Type
  6134 ;;                  1    wreg      void 
  6135 ;; Registers used:
  6136 ;;		wreg, status,2, status,0, cstack
  6137 ;; Tracked objects:
  6138 ;;		On entry : 3F/0
  6139 ;;		On exit  : 0/0
  6140 ;;		Unchanged: 0/0
  6141 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6142 ;;      Params:         0       0       0       0       0       0       0
  6143 ;;      Locals:         0       0       0       0       0       0       0
  6144 ;;      Temps:          0       0       0       0       0       0       0
  6145 ;;      Totals:         0       0       0       0       0       0       0
  6146 ;;Total ram usage:        0 bytes
  6147 ;; Hardware stack levels used:    1
  6148 ;; Hardware stack levels required when called:    6
  6149 ;; This function calls:
  6150 ;;		_DelayMs
  6151 ;;		_FreqMeasure
  6152 ;; This function is called by:
  6153 ;;		_PTT_read
  6154 ;; This function uses a non-reentrant model
  6155 ;;
  6156                           
  6157                           	psect	text31
  6158  002166                     __ptext31:
  6159                           	opt stack 0
  6160  002166                     _PTT_ON:
  6161                           	opt stack 0
  6162  002166  FFFF               	dw	65535	; assembler added errata NOP
  6163                           
  6164                           ; BSR set to: 0
  6165                           ;digital.h: 102: if (ptt == 1) return;
  6166                           
  6167                           ;incstack = 0
  6168  002168  0456               	decf	_ptt,w,c	;volatile
  6169  00216A  E012               	bz	l353
  6170                           
  6171                           ; BSR set to: 0
  6172                           ;digital.h: 103: ptt = 1;
  6173  00216C  0E01               	movlw	1
  6174  00216E  6E56               	movwf	_ptt,c	;volatile
  6175                           
  6176                           ; BSR set to: 0
  6177                           ;digital.h: 105: LATBbits.LB3 = 1;
  6178  002170  868A               	bsf	3978,3,c	;volatile
  6179                           
  6180                           ; BSR set to: 0
  6181                           ;digital.h: 106: LATCbits.LC4 = 1;
  6182  002172  888B               	bsf	3979,4,c	;volatile
  6183                           
  6184                           ;digital.h: 108: if (aband)
  6185  002174  51F1               	movf	_aband& (0+255),w,b	;volatile
  6186  002176  E007               	bz	l4340
  6187                           
  6188                           ; BSR set to: 0
  6189                           ;digital.h: 109: {;digital.h: 110: DelayMs(reldel);
  6190  002178  51F5               	movf	_reldel& (0+255),w,b	;volatile
  6191  00217A  EC44  F011         	call	_DelayMs
  6192                           
  6193                           ;digital.h: 111: if (!FreqMeasure()) return;
  6194  00217E  ECA5  F00C         	call	_FreqMeasure	;wreg free
  6195  002182  0900               	iorlw	0
  6196  002184  E005               	bz	l353
  6197  002186                     l4340:
  6198                           
  6199                           ;digital.h: 112: };digital.h: 113: DelayMs(biasdel);
  6200  002186  0100               	movlb	0	; () banked
  6201  002188  51F4               	movf	_biasdel& (0+255),w,b	;volatile
  6202  00218A  EC44  F011         	call	_DelayMs
  6203                           
  6204                           ;digital.h: 114: LATEbits.LE2 = 1;
  6205  00218E  848D               	bsf	3981,2,c	;volatile
  6206  002190                     l353:
  6207  002190  0012               	return		;funcret
  6208  002192  FFFF               	dw	65535	; errata NOP
  6209  002194                     __end_of_PTT_ON:
  6210                           	opt stack 0
  6211                           stkptr	equ	0xFFC
  6212                           tblptru	equ	0xFF8
  6213                           tblptrh	equ	0xFF7
  6214                           tblptrl	equ	0xFF6
  6215                           tablat	equ	0xFF5
  6216                           prodh	equ	0xFF4
  6217                           prodl	equ	0xFF3
  6218                           intcon	equ	0xFF2
  6219                           intcon2	equ	0xFF1
  6220                           postinc0	equ	0xFEE
  6221                           wreg	equ	0xFE8
  6222                           indf2	equ	0xFDF
  6223                           fsr2h	equ	0xFDA
  6224                           fsr2l	equ	0xFD9
  6225                           status	equ	0xFD8
  6226                           
  6227 ;; *************** function _FreqMeasure *****************
  6228 ;; Defined at:
  6229 ;;		line 23 in file "../digital.h"
  6230 ;; Parameters:    Size  Location     Type
  6231 ;;		None
  6232 ;; Auto vars:     Size  Location     Type
  6233 ;;  tmr             2   29[COMRAM] unsigned int 
  6234 ;;  err             1   28[COMRAM] unsigned char 
  6235 ;;  jj              1   27[COMRAM] unsigned char 
  6236 ;; Return value:  Size  Location     Type
  6237 ;;                  1    wreg      unsigned char 
  6238 ;; Registers used:
  6239 ;;		wreg, status,2, status,0, cstack
  6240 ;; Tracked objects:
  6241 ;;		On entry : 0/0
  6242 ;;		On exit  : 0/0
  6243 ;;		Unchanged: 0/0
  6244 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6245 ;;      Params:         0       0       0       0       0       0       0
  6246 ;;      Locals:         4       0       0       0       0       0       0
  6247 ;;      Temps:          0       0       0       0       0       0       0
  6248 ;;      Totals:         4       0       0       0       0       0       0
  6249 ;;Total ram usage:        4 bytes
  6250 ;; Hardware stack levels used:    1
  6251 ;; Hardware stack levels required when called:    5
  6252 ;; This function calls:
  6253 ;;		_BandDecode
  6254 ;;		___ftge
  6255 ;;		___lwtoft
  6256 ;;		_fabs
  6257 ;; This function is called by:
  6258 ;;		_PTT_ON
  6259 ;; This function uses a non-reentrant model
  6260 ;;
  6261                           
  6262                           	psect	text32
  6263  00194A                     __ptext32:
  6264                           	opt stack 0
  6265  00194A                     _FreqMeasure:
  6266                           	opt stack 0
  6267  00194A  FFFF               	dw	65535	; assembler added errata NOP
  6268                           
  6269                           ;digital.h: 25: unsigned char jj, err;;digital.h: 26: unsigned int tmr;;digital.h: 28: w
      +                          hile(!PORTAbits.RA4)
  6270                           
  6271                           ;incstack = 0
  6272  00194C  D050               	goto	l319
  6273  00194E                     l320:
  6274  00194E  FFFF               	dw	65535	; assembler added errata NOP
  6275  001950  0004               	clrwdt		;# 
  6276                           
  6277                           ;digital.h: 31: if (PORTCbits.RC0)
  6278  001952  A082               	btfss	3970,0,c	;volatile
  6279  001954  D04C               	goto	l319
  6280                           
  6281                           ;digital.h: 32: {;digital.h: 33: freq = 0; err = 0;
  6282  001956  6A48               	clrf	_freq,c	;volatile
  6283  001958  6A49               	clrf	_freq+1,c	;volatile
  6284  00195A  6A1D               	clrf	FreqMeasure@err,c
  6285                           
  6286                           ;digital.h: 34: jj = 30;
  6287  00195C  0E1E               	movlw	30
  6288  00195E  6E1C               	movwf	FreqMeasure@jj,c
  6289                           
  6290                           ;digital.h: 36: INTCONbits.GIE = 0;
  6291  001960  9EF2               	bcf	intcon,7,c	;volatile
  6292                           
  6293                           ;digital.h: 37: while(jj--)
  6294  001962  D034               	goto	l4230
  6295  001964                     l323:
  6296                           
  6297                           ;digital.h: 38: {;digital.h: 39: TMR1H = 0;
  6298  001964  6ACF               	clrf	4047,c	;volatile
  6299                           
  6300                           ;digital.h: 40: PIR1bits.TMR1IF = 0;
  6301  001966  909E               	bcf	3998,0,c	;volatile
  6302                           
  6303                           ;digital.h: 41: TMR1L = 0;
  6304  001968  6ACE               	clrf	4046,c	;volatile
  6305                           
  6306                           ;digital.h: 43: _delay((unsigned long)((100)*(40000000/4000000.0)));
  6307  00196A  0EC8               	movlw	200
  6308  00196C                     u5457:
  6309  00196C  FFFF               	dw	65535	; errata NOP
  6310  00196E  F000               	nop	
  6311  001970  2EE8               	decfsz	wreg,f,c
  6312  001972  D7FC               	bra	u5457
  6313                           
  6314                           ;digital.h: 44: tmr = (TMR1);
  6315  001974  CFCE F01E          	movff	4046,FreqMeasure@tmr	;volatile
  6316  001978  CFCF F01F          	movff	4047,FreqMeasure@tmr+1	;volatile
  6317                           
  6318                           ;digital.h: 46: if (fabs(freq - tmr) >= 100) err++;
  6319  00197C  501E               	movf	FreqMeasure@tmr,w,c
  6320  00197E  5C48               	subwf	_freq,w,c	;volatile
  6321  001980  6E0D               	movwf	___lwtoft@c,c
  6322  001982  501F               	movf	FreqMeasure@tmr+1,w,c
  6323  001984  5849               	subwfb	_freq+1,w,c	;volatile
  6324  001986  6E0E               	movwf	___lwtoft@c+1,c
  6325  001988  EC1D  F011         	call	___lwtoft	;wreg free
  6326  00198C  C00D  F010         	movff	?___lwtoft,fabs@d
  6327  001990  C00E  F011         	movff	?___lwtoft+1,fabs@d+1
  6328  001994  C00F  F012         	movff	?___lwtoft+2,fabs@d+2
  6329  001998  EC18  F010         	call	_fabs	;wreg free
  6330  00199C  C010  F013         	movff	?_fabs,___ftge@ff1
  6331  0019A0  C011  F014         	movff	?_fabs+1,___ftge@ff1+1
  6332  0019A4  C012  F015         	movff	?_fabs+2,___ftge@ff1+2
  6333  0019A8  6A16               	clrf	___ftge@ff2,c
  6334  0019AA  0EC8               	movlw	200
  6335  0019AC  6E17               	movwf	___ftge@ff2+1,c
  6336  0019AE  0E42               	movlw	66
  6337  0019B0  6E18               	movwf	___ftge@ff2+2,c
  6338  0019B2  EC2F  F00F         	call	___ftge	;wreg free
  6339  0019B6  E301               	bnc	l4226
  6340  0019B8  2A1D               	incf	FreqMeasure@err,f,c
  6341  0019BA                     l4226:
  6342                           
  6343                           ;digital.h: 47: if (tmr > freq) freq = tmr;
  6344  0019BA  501E               	movf	FreqMeasure@tmr,w,c
  6345  0019BC  5C48               	subwf	_freq,w,c	;volatile
  6346  0019BE  501F               	movf	FreqMeasure@tmr+1,w,c
  6347  0019C0  5849               	subwfb	_freq+1,w,c	;volatile
  6348  0019C2  E204               	bc	l4230
  6349  0019C4  C01E  F048         	movff	FreqMeasure@tmr,_freq	;volatile
  6350  0019C8  C01F  F049         	movff	FreqMeasure@tmr+1,_freq+1	;volatile
  6351  0019CC                     l4230:
  6352  0019CC  FFFF               	dw	65535	; assembler added errata NOP
  6353  0019CE  061C               	decf	FreqMeasure@jj,f,c
  6354  0019D0  281C               	incf	FreqMeasure@jj,w,c
  6355  0019D2  E1C8               	bnz	l323
  6356                           
  6357                           ;digital.h: 48: };digital.h: 49: INTCONbits.GIE = 1;
  6358  0019D4  8EF2               	bsf	intcon,7,c	;volatile
  6359                           
  6360                           ;digital.h: 50: if (err < 9)
  6361  0019D6  0E09               	movlw	9
  6362  0019D8  601D               	cpfslt	FreqMeasure@err,c
  6363  0019DA  D009               	goto	l319
  6364                           
  6365                           ;digital.h: 51: {;digital.h: 53: if (freq >= 100)
  6366  0019DC  5049               	movf	_freq+1,w,c	;volatile
  6367  0019DE  E103               	bnz	u4880
  6368  0019E0  0E64               	movlw	100
  6369  0019E2  5C48               	subwf	_freq,w,c	;volatile
  6370  0019E4  E304               	bnc	l319
  6371  0019E6                     u4880:
  6372                           
  6373                           ;digital.h: 54: {;digital.h: 55: BandDecode();
  6374  0019E6  EC55  F00D         	call	_BandDecode	;wreg free
  6375                           
  6376                           ;digital.h: 56: return(1);
  6377  0019EA  0E01               	movlw	1
  6378  0019EC  D004               	goto	l329
  6379  0019EE                     l319:
  6380  0019EE  FFFF               	dw	65535	; assembler added errata NOP
  6381  0019F0  A880               	btfss	3968,4,c	;volatile
  6382  0019F2  D7AD               	goto	l320
  6383                           
  6384                           ;digital.h: 57: };digital.h: 58: };digital.h: 59: };digital.h: 60: };digital.h: 61: retu
      +                          rn(0);
  6385  0019F4  0E00               	movlw	0
  6386  0019F6                     l329:
  6387  0019F6  FFFF               	dw	65535	; assembler added errata NOP
  6388  0019F8  0012               	return		;funcret
  6389  0019FA  FFFF               	dw	65535	; errata NOP
  6390  0019FC                     __end_of_FreqMeasure:
  6391                           	opt stack 0
  6392                           stkptr	equ	0xFFC
  6393                           tblptru	equ	0xFF8
  6394                           tblptrh	equ	0xFF7
  6395                           tblptrl	equ	0xFF6
  6396                           tablat	equ	0xFF5
  6397                           prodh	equ	0xFF4
  6398                           prodl	equ	0xFF3
  6399                           intcon	equ	0xFF2
  6400                           intcon2	equ	0xFF1
  6401                           postinc0	equ	0xFEE
  6402                           wreg	equ	0xFE8
  6403                           indf2	equ	0xFDF
  6404                           fsr2h	equ	0xFDA
  6405                           fsr2l	equ	0xFD9
  6406                           status	equ	0xFD8
  6407                           
  6408 ;; *************** function _fabs *****************
  6409 ;; Defined at:
  6410 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\fabs.c"
  6411 ;; Parameters:    Size  Location     Type
  6412 ;;  d               3   15[COMRAM] unsigned char 
  6413 ;; Auto vars:     Size  Location     Type
  6414 ;;		None
  6415 ;; Return value:  Size  Location     Type
  6416 ;;                  3   15[COMRAM] unsigned char 
  6417 ;; Registers used:
  6418 ;;		wreg, status,2, status,0, cstack
  6419 ;; Tracked objects:
  6420 ;;		On entry : 0/0
  6421 ;;		On exit  : 0/0
  6422 ;;		Unchanged: 0/0
  6423 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6424 ;;      Params:         3       0       0       0       0       0       0
  6425 ;;      Locals:         0       0       0       0       0       0       0
  6426 ;;      Temps:          0       0       0       0       0       0       0
  6427 ;;      Totals:         3       0       0       0       0       0       0
  6428 ;;Total ram usage:        3 bytes
  6429 ;; Hardware stack levels used:    1
  6430 ;; Hardware stack levels required when called:    4
  6431 ;; This function calls:
  6432 ;;		___ftneg
  6433 ;; This function is called by:
  6434 ;;		_FreqMeasure
  6435 ;; This function uses a non-reentrant model
  6436 ;;
  6437                           
  6438                           	psect	text33
  6439  002030                     __ptext33:
  6440                           	opt stack 0
  6441  002030                     _fabs:
  6442                           	opt stack 0
  6443  002030  FFFF               	dw	65535	; assembler added errata NOP
  6444                           
  6445                           ;incstack = 0
  6446  002032  AE12               	btfss	fabs@d+2,7,c
  6447  002034  D00F               	goto	l1265
  6448  002036  C010  F005         	movff	fabs@d,___ftneg@f1
  6449  00203A  C011  F006         	movff	fabs@d+1,___ftneg@f1+1
  6450  00203E  C012  F007         	movff	fabs@d+2,___ftneg@f1+2
  6451  002042  EC68  F011         	call	___ftneg	;wreg free
  6452  002046  C005  F010         	movff	?___ftneg,?_fabs
  6453  00204A  C006  F011         	movff	?___ftneg+1,?_fabs+1
  6454  00204E  C007  F012         	movff	?___ftneg+2,?_fabs+2
  6455  002052  D007               	goto	l1266
  6456  002054                     l1265:
  6457  002054  FFFF               	dw	65535	; assembler added errata NOP
  6458  002056  C010  F010         	movff	fabs@d,?_fabs
  6459  00205A  C011  F011         	movff	fabs@d+1,?_fabs+1
  6460  00205E  C012  F012         	movff	fabs@d+2,?_fabs+2
  6461  002062                     l1266:
  6462  002062  FFFF               	dw	65535	; assembler added errata NOP
  6463  002064  0012               	return		;funcret
  6464  002066  FFFF               	dw	65535	; errata NOP
  6465  002068                     __end_of_fabs:
  6466                           	opt stack 0
  6467                           stkptr	equ	0xFFC
  6468                           tblptru	equ	0xFF8
  6469                           tblptrh	equ	0xFF7
  6470                           tblptrl	equ	0xFF6
  6471                           tablat	equ	0xFF5
  6472                           prodh	equ	0xFF4
  6473                           prodl	equ	0xFF3
  6474                           intcon	equ	0xFF2
  6475                           intcon2	equ	0xFF1
  6476                           postinc0	equ	0xFEE
  6477                           wreg	equ	0xFE8
  6478                           indf2	equ	0xFDF
  6479                           fsr2h	equ	0xFDA
  6480                           fsr2l	equ	0xFD9
  6481                           status	equ	0xFD8
  6482                           
  6483 ;; *************** function ___ftneg *****************
  6484 ;; Defined at:
  6485 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\ftneg.c"
  6486 ;; Parameters:    Size  Location     Type
  6487 ;;  f1              3    4[COMRAM] float 
  6488 ;; Auto vars:     Size  Location     Type
  6489 ;;		None
  6490 ;; Return value:  Size  Location     Type
  6491 ;;                  3    4[COMRAM] float 
  6492 ;; Registers used:
  6493 ;;		wreg, status,2, status,0
  6494 ;; Tracked objects:
  6495 ;;		On entry : 0/0
  6496 ;;		On exit  : 0/0
  6497 ;;		Unchanged: 0/0
  6498 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6499 ;;      Params:         3       0       0       0       0       0       0
  6500 ;;      Locals:         0       0       0       0       0       0       0
  6501 ;;      Temps:          0       0       0       0       0       0       0
  6502 ;;      Totals:         3       0       0       0       0       0       0
  6503 ;;Total ram usage:        3 bytes
  6504 ;; Hardware stack levels used:    1
  6505 ;; Hardware stack levels required when called:    3
  6506 ;; This function calls:
  6507 ;;		Nothing
  6508 ;; This function is called by:
  6509 ;;		_fabs
  6510 ;; This function uses a non-reentrant model
  6511 ;;
  6512                           
  6513                           	psect	text34
  6514  0022D0                     __ptext34:
  6515                           	opt stack 0
  6516  0022D0                     ___ftneg:
  6517                           	opt stack 0
  6518  0022D0  FFFF               	dw	65535	; assembler added errata NOP
  6519                           
  6520                           ;incstack = 0
  6521  0022D2  5005               	movf	___ftneg@f1,w,c
  6522  0022D4  1006               	iorwf	___ftneg@f1+1,w,c
  6523  0022D6  1007               	iorwf	___ftneg@f1+2,w,c
  6524  0022D8  E002               	bz	l955
  6525  0022DA  0E80               	movlw	128
  6526  0022DC  1A07               	xorwf	___ftneg@f1+2,f,c
  6527  0022DE                     l955:
  6528  0022DE  C005  F005         	movff	___ftneg@f1,?___ftneg
  6529  0022E2  C006  F006         	movff	___ftneg@f1+1,?___ftneg+1
  6530  0022E6  C007  F007         	movff	___ftneg@f1+2,?___ftneg+2
  6531  0022EA  0012               	return		;funcret
  6532  0022EC  FFFF               	dw	65535	; errata NOP
  6533  0022EE                     __end_of___ftneg:
  6534                           	opt stack 0
  6535                           stkptr	equ	0xFFC
  6536                           tblptru	equ	0xFF8
  6537                           tblptrh	equ	0xFF7
  6538                           tblptrl	equ	0xFF6
  6539                           tablat	equ	0xFF5
  6540                           prodh	equ	0xFF4
  6541                           prodl	equ	0xFF3
  6542                           intcon	equ	0xFF2
  6543                           intcon2	equ	0xFF1
  6544                           postinc0	equ	0xFEE
  6545                           wreg	equ	0xFE8
  6546                           indf2	equ	0xFDF
  6547                           fsr2h	equ	0xFDA
  6548                           fsr2l	equ	0xFD9
  6549                           status	equ	0xFD8
  6550                           
  6551 ;; *************** function ___lwtoft *****************
  6552 ;; Defined at:
  6553 ;;		line 28 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\lwtoft.c"
  6554 ;; Parameters:    Size  Location     Type
  6555 ;;  c               2   12[COMRAM] unsigned int 
  6556 ;; Auto vars:     Size  Location     Type
  6557 ;;		None
  6558 ;; Return value:  Size  Location     Type
  6559 ;;                  3   12[COMRAM] float 
  6560 ;; Registers used:
  6561 ;;		wreg, status,2, status,0, cstack
  6562 ;; Tracked objects:
  6563 ;;		On entry : 0/0
  6564 ;;		On exit  : 0/0
  6565 ;;		Unchanged: 0/0
  6566 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6567 ;;      Params:         3       0       0       0       0       0       0
  6568 ;;      Locals:         0       0       0       0       0       0       0
  6569 ;;      Temps:          0       0       0       0       0       0       0
  6570 ;;      Totals:         3       0       0       0       0       0       0
  6571 ;;Total ram usage:        3 bytes
  6572 ;; Hardware stack levels used:    1
  6573 ;; Hardware stack levels required when called:    4
  6574 ;; This function calls:
  6575 ;;		___ftpack
  6576 ;; This function is called by:
  6577 ;;		_FreqMeasure
  6578 ;; This function uses a non-reentrant model
  6579 ;;
  6580                           
  6581                           	psect	text35
  6582  00223A                     __ptext35:
  6583                           	opt stack 0
  6584  00223A                     ___lwtoft:
  6585                           	opt stack 0
  6586  00223A  FFFF               	dw	65535	; assembler added errata NOP
  6587                           
  6588                           ;incstack = 0
  6589  00223C  C00D  F005         	movff	___lwtoft@c,___ftpack@arg
  6590  002240  C00E  F006         	movff	___lwtoft@c+1,___ftpack@arg+1
  6591  002244  6A07               	clrf	___ftpack@arg+2,c
  6592  002246  0E8E               	movlw	142
  6593  002248  6E08               	movwf	___ftpack@exp,c
  6594  00224A  0E00               	movlw	0
  6595  00224C  6E09               	movwf	___ftpack@sign,c
  6596  00224E  ECA4  F00D         	call	___ftpack	;wreg free
  6597  002252  C005  F00D         	movff	?___ftpack,?___lwtoft
  6598  002256  C006  F00E         	movff	?___ftpack+1,?___lwtoft+1
  6599  00225A  C007  F00F         	movff	?___ftpack+2,?___lwtoft+2
  6600  00225E  0012               	return		;funcret
  6601  002260  FFFF               	dw	65535	; errata NOP
  6602  002262                     __end_of___lwtoft:
  6603                           	opt stack 0
  6604                           stkptr	equ	0xFFC
  6605                           tblptru	equ	0xFF8
  6606                           tblptrh	equ	0xFF7
  6607                           tblptrl	equ	0xFF6
  6608                           tablat	equ	0xFF5
  6609                           prodh	equ	0xFF4
  6610                           prodl	equ	0xFF3
  6611                           intcon	equ	0xFF2
  6612                           intcon2	equ	0xFF1
  6613                           postinc0	equ	0xFEE
  6614                           wreg	equ	0xFE8
  6615                           indf2	equ	0xFDF
  6616                           fsr2h	equ	0xFDA
  6617                           fsr2l	equ	0xFD9
  6618                           status	equ	0xFD8
  6619                           
  6620 ;; *************** function ___ftpack *****************
  6621 ;; Defined at:
  6622 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\float.c"
  6623 ;; Parameters:    Size  Location     Type
  6624 ;;  arg             3    4[COMRAM] unsigned um
  6625 ;;  exp             1    7[COMRAM] unsigned char 
  6626 ;;  sign            1    8[COMRAM] unsigned char 
  6627 ;; Auto vars:     Size  Location     Type
  6628 ;;		None
  6629 ;; Return value:  Size  Location     Type
  6630 ;;                  3    4[COMRAM] float 
  6631 ;; Registers used:
  6632 ;;		wreg, status,2, status,0
  6633 ;; Tracked objects:
  6634 ;;		On entry : 0/0
  6635 ;;		On exit  : 0/0
  6636 ;;		Unchanged: 0/0
  6637 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6638 ;;      Params:         5       0       0       0       0       0       0
  6639 ;;      Locals:         0       0       0       0       0       0       0
  6640 ;;      Temps:          3       0       0       0       0       0       0
  6641 ;;      Totals:         8       0       0       0       0       0       0
  6642 ;;Total ram usage:        8 bytes
  6643 ;; Hardware stack levels used:    1
  6644 ;; Hardware stack levels required when called:    3
  6645 ;; This function calls:
  6646 ;;		Nothing
  6647 ;; This function is called by:
  6648 ;;		___ftadd
  6649 ;;		___ftmul
  6650 ;;		___lltoft
  6651 ;;		___lwtoft
  6652 ;; This function uses a non-reentrant model
  6653 ;;
  6654                           
  6655                           	psect	text36
  6656  001B48                     __ptext36:
  6657                           	opt stack 0
  6658  001B48                     ___ftpack:
  6659                           	opt stack 0
  6660  001B48  FFFF               	dw	65535	; assembler added errata NOP
  6661                           
  6662                           ;incstack = 0
  6663  001B4A  5008               	movf	___ftpack@exp,w,c
  6664  001B4C  E004               	bz	u4520
  6665  001B4E  5005               	movf	___ftpack@arg,w,c
  6666  001B50  1006               	iorwf	___ftpack@arg+1,w,c
  6667  001B52  1007               	iorwf	___ftpack@arg+2,w,c
  6668  001B54  E10A               	bnz	l4078
  6669  001B56                     u4520:
  6670  001B56  6A05               	clrf	?___ftpack,c
  6671  001B58  6A06               	clrf	?___ftpack+1,c
  6672  001B5A  6A07               	clrf	?___ftpack+2,c
  6673  001B5C  D03E               	goto	l869
  6674  001B5E                     l4076:
  6675  001B5E  FFFF               	dw	65535	; assembler added errata NOP
  6676  001B60  2A08               	incf	___ftpack@exp,f,c
  6677  001B62  90D8               	bcf	status,0,c
  6678  001B64  3207               	rrcf	___ftpack@arg+2,f,c
  6679  001B66  3206               	rrcf	___ftpack@arg+1,f,c
  6680  001B68  3205               	rrcf	___ftpack@arg,f,c
  6681  001B6A                     l4078:
  6682  001B6A  6A0A               	clrf	??___ftpack& (0+255),c
  6683  001B6C  6A0B               	clrf	(??___ftpack+1)& (0+255),c
  6684  001B6E  0EFE               	movlw	254
  6685  001B70  1407               	andwf	___ftpack@arg+2,w,c
  6686  001B72  6E0C               	movwf	(??___ftpack+2)& (0+255),c
  6687  001B74  500A               	movf	??___ftpack,w,c
  6688  001B76  100B               	iorwf	??___ftpack+1,w,c
  6689  001B78  100C               	iorwf	??___ftpack+2,w,c
  6690  001B7A  E00B               	bz	l4084
  6691  001B7C  D7F0               	goto	l4076
  6692  001B7E                     l4080:
  6693  001B7E  FFFF               	dw	65535	; assembler added errata NOP
  6694  001B80  2A08               	incf	___ftpack@exp,f,c
  6695  001B82  2A05               	incf	___ftpack@arg,f,c
  6696  001B84  0E00               	movlw	0
  6697  001B86  2206               	addwfc	___ftpack@arg+1,f,c
  6698  001B88  2207               	addwfc	___ftpack@arg+2,f,c
  6699  001B8A  90D8               	bcf	status,0,c
  6700  001B8C  3207               	rrcf	___ftpack@arg+2,f,c
  6701  001B8E  3206               	rrcf	___ftpack@arg+1,f,c
  6702  001B90  3205               	rrcf	___ftpack@arg,f,c
  6703  001B92                     l4084:
  6704  001B92  6A0A               	clrf	??___ftpack& (0+255),c
  6705  001B94  6A0B               	clrf	(??___ftpack+1)& (0+255),c
  6706  001B96  5007               	movf	___ftpack@arg+2,w,c
  6707  001B98  6E0C               	movwf	(??___ftpack+2)& (0+255),c
  6708  001B9A  500A               	movf	??___ftpack,w,c
  6709  001B9C  100B               	iorwf	??___ftpack+1,w,c
  6710  001B9E  100C               	iorwf	??___ftpack+2,w,c
  6711  001BA0  E007               	bz	l4088
  6712  001BA2  D7ED               	goto	l4080
  6713  001BA4                     l4086:
  6714  001BA4  FFFF               	dw	65535	; assembler added errata NOP
  6715  001BA6  0608               	decf	___ftpack@exp,f,c
  6716  001BA8  90D8               	bcf	status,0,c
  6717  001BAA  3605               	rlcf	___ftpack@arg,f,c
  6718  001BAC  3606               	rlcf	___ftpack@arg+1,f,c
  6719  001BAE  3607               	rlcf	___ftpack@arg+2,f,c
  6720  001BB0                     l4088:
  6721  001BB0  BE06               	btfsc	___ftpack@arg+1,7,c
  6722  001BB2  D003               	goto	u4560
  6723  001BB4  0E02               	movlw	2
  6724  001BB6  6008               	cpfslt	___ftpack@exp,c
  6725  001BB8  D7F5               	goto	l4086
  6726  001BBA                     u4560:
  6727  001BBA  FFFF               	dw	65535	; assembler added errata NOP
  6728  001BBC  A008               	btfss	___ftpack@exp,0,c
  6729  001BBE  9E06               	bcf	___ftpack@arg+1,7,c
  6730  001BC0  90D8               	bcf	status,0,c
  6731  001BC2  3208               	rrcf	___ftpack@exp,f,c
  6732  001BC4  5008               	movf	___ftpack@exp,w,c
  6733  001BC6  1207               	iorwf	___ftpack@arg+2,f,c
  6734  001BC8  5009               	movf	___ftpack@sign,w,c
  6735  001BCA  E001               	bz	l4102
  6736  001BCC  8E07               	bsf	___ftpack@arg+2,7,c
  6737  001BCE                     l4102:
  6738  001BCE  C005  F005         	movff	___ftpack@arg,?___ftpack
  6739  001BD2  C006  F006         	movff	___ftpack@arg+1,?___ftpack+1
  6740  001BD6  C007  F007         	movff	___ftpack@arg+2,?___ftpack+2
  6741  001BDA                     l869:
  6742  001BDA  FFFF               	dw	65535	; assembler added errata NOP
  6743  001BDC  0012               	return		;funcret
  6744  001BDE  FFFF               	dw	65535	; errata NOP
  6745  001BE0                     __end_of___ftpack:
  6746                           	opt stack 0
  6747                           stkptr	equ	0xFFC
  6748                           tblptru	equ	0xFF8
  6749                           tblptrh	equ	0xFF7
  6750                           tblptrl	equ	0xFF6
  6751                           tablat	equ	0xFF5
  6752                           prodh	equ	0xFF4
  6753                           prodl	equ	0xFF3
  6754                           intcon	equ	0xFF2
  6755                           intcon2	equ	0xFF1
  6756                           postinc0	equ	0xFEE
  6757                           wreg	equ	0xFE8
  6758                           indf2	equ	0xFDF
  6759                           fsr2h	equ	0xFDA
  6760                           fsr2l	equ	0xFD9
  6761                           status	equ	0xFD8
  6762                           
  6763 ;; *************** function ___ftge *****************
  6764 ;; Defined at:
  6765 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\ftge.c"
  6766 ;; Parameters:    Size  Location     Type
  6767 ;;  ff1             3   18[COMRAM] float 
  6768 ;;  ff2             3   21[COMRAM] float 
  6769 ;; Auto vars:     Size  Location     Type
  6770 ;;		None
  6771 ;; Return value:  Size  Location     Type
  6772 ;;		None               void
  6773 ;; Registers used:
  6774 ;;		wreg, status,2, status,0
  6775 ;; Tracked objects:
  6776 ;;		On entry : 0/0
  6777 ;;		On exit  : 0/0
  6778 ;;		Unchanged: 0/0
  6779 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6780 ;;      Params:         6       0       0       0       0       0       0
  6781 ;;      Locals:         0       0       0       0       0       0       0
  6782 ;;      Temps:          3       0       0       0       0       0       0
  6783 ;;      Totals:         9       0       0       0       0       0       0
  6784 ;;Total ram usage:        9 bytes
  6785 ;; Hardware stack levels used:    1
  6786 ;; Hardware stack levels required when called:    3
  6787 ;; This function calls:
  6788 ;;		Nothing
  6789 ;; This function is called by:
  6790 ;;		_FreqMeasure
  6791 ;;		_sqrt
  6792 ;; This function uses a non-reentrant model
  6793 ;;
  6794                           
  6795                           	psect	text37
  6796  001E5E                     __ptext37:
  6797                           	opt stack 0
  6798  001E5E                     ___ftge:
  6799                           	opt stack 0
  6800  001E5E  FFFF               	dw	65535	; assembler added errata NOP
  6801                           
  6802                           ;incstack = 0
  6803  001E60  AE15               	btfss	___ftge@ff1+2,7,c
  6804  001E62  D00D               	goto	l4174
  6805  001E64  6A19               	clrf	??___ftge& (0+255),c
  6806  001E66  6A1A               	clrf	(??___ftge+1)& (0+255),c
  6807  001E68  0E80               	movlw	128
  6808  001E6A  6E1B               	movwf	(??___ftge+2)& (0+255),c
  6809  001E6C  5013               	movf	___ftge@ff1,w,c
  6810  001E6E  5C19               	subwf	??___ftge,w,c
  6811  001E70  6E13               	movwf	___ftge@ff1,c
  6812  001E72  5014               	movf	___ftge@ff1+1,w,c
  6813  001E74  581A               	subwfb	??___ftge+1,w,c
  6814  001E76  6E14               	movwf	___ftge@ff1+1,c
  6815  001E78  5015               	movf	___ftge@ff1+2,w,c
  6816  001E7A  581B               	subwfb	??___ftge+2,w,c
  6817  001E7C  6E15               	movwf	___ftge@ff1+2,c
  6818  001E7E                     l4174:
  6819  001E7E  FFFF               	dw	65535	; assembler added errata NOP
  6820  001E80  AE18               	btfss	___ftge@ff2+2,7,c
  6821  001E82  D00D               	goto	l4178
  6822  001E84  6A19               	clrf	??___ftge& (0+255),c
  6823  001E86  6A1A               	clrf	(??___ftge+1)& (0+255),c
  6824  001E88  0E80               	movlw	128
  6825  001E8A  6E1B               	movwf	(??___ftge+2)& (0+255),c
  6826  001E8C  5016               	movf	___ftge@ff2,w,c
  6827  001E8E  5C19               	subwf	??___ftge,w,c
  6828  001E90  6E16               	movwf	___ftge@ff2,c
  6829  001E92  5017               	movf	___ftge@ff2+1,w,c
  6830  001E94  581A               	subwfb	??___ftge+1,w,c
  6831  001E96  6E17               	movwf	___ftge@ff2+1,c
  6832  001E98  5018               	movf	___ftge@ff2+2,w,c
  6833  001E9A  581B               	subwfb	??___ftge+2,w,c
  6834  001E9C  6E18               	movwf	___ftge@ff2+2,c
  6835  001E9E                     l4178:
  6836  001E9E  FFFF               	dw	65535	; assembler added errata NOP
  6837  001EA0  0E80               	movlw	128
  6838  001EA2  1A15               	xorwf	___ftge@ff1+2,f,c
  6839  001EA4  1A18               	xorwf	___ftge@ff2+2,f,c
  6840  001EA6  5016               	movf	___ftge@ff2,w,c
  6841  001EA8  5C13               	subwf	___ftge@ff1,w,c
  6842  001EAA  5017               	movf	___ftge@ff2+1,w,c
  6843  001EAC  5814               	subwfb	___ftge@ff1+1,w,c
  6844  001EAE  5018               	movf	___ftge@ff2+2,w,c
  6845  001EB0  5815               	subwfb	___ftge@ff1+2,w,c
  6846  001EB2  E202               	bc	l4184
  6847  001EB4  90D8               	bcf	status,0,c
  6848  001EB6  D001               	goto	l944
  6849  001EB8                     l4184:
  6850  001EB8  80D8               	bsf	status,0,c
  6851  001EBA                     l944:
  6852  001EBA  FFFF               	dw	65535	; assembler added errata NOP
  6853  001EBC  0012               	return		;funcret
  6854  001EBE  FFFF               	dw	65535	; errata NOP
  6855  001EC0                     __end_of___ftge:
  6856                           	opt stack 0
  6857                           stkptr	equ	0xFFC
  6858                           tblptru	equ	0xFF8
  6859                           tblptrh	equ	0xFF7
  6860                           tblptrl	equ	0xFF6
  6861                           tablat	equ	0xFF5
  6862                           prodh	equ	0xFF4
  6863                           prodl	equ	0xFF3
  6864                           intcon	equ	0xFF2
  6865                           intcon2	equ	0xFF1
  6866                           postinc0	equ	0xFEE
  6867                           wreg	equ	0xFE8
  6868                           indf2	equ	0xFDF
  6869                           fsr2h	equ	0xFDA
  6870                           fsr2l	equ	0xFD9
  6871                           status	equ	0xFD8
  6872                           
  6873 ;; *************** function _BandDecode *****************
  6874 ;; Defined at:
  6875 ;;		line 5 in file "../digital.h"
  6876 ;; Parameters:    Size  Location     Type
  6877 ;;		None
  6878 ;; Auto vars:     Size  Location     Type
  6879 ;;		None
  6880 ;; Return value:  Size  Location     Type
  6881 ;;                  1    wreg      void 
  6882 ;; Registers used:
  6883 ;;		wreg, status,2, status,0, cstack
  6884 ;; Tracked objects:
  6885 ;;		On entry : 0/0
  6886 ;;		On exit  : 0/0
  6887 ;;		Unchanged: 0/0
  6888 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6889 ;;      Params:         0       0       0       0       0       0       0
  6890 ;;      Locals:         0       0       0       0       0       0       0
  6891 ;;      Temps:          0       0       0       0       0       0       0
  6892 ;;      Totals:         0       0       0       0       0       0       0
  6893 ;;Total ram usage:        0 bytes
  6894 ;; Hardware stack levels used:    1
  6895 ;; Hardware stack levels required when called:    4
  6896 ;; This function calls:
  6897 ;;		_SetBand
  6898 ;; This function is called by:
  6899 ;;		_FreqMeasure
  6900 ;; This function uses a non-reentrant model
  6901 ;;
  6902                           
  6903                           	psect	text38
  6904  001AAA                     __ptext38:
  6905                           	opt stack 0
  6906  001AAA                     _BandDecode:
  6907                           	opt stack 0
  6908  001AAA  FFFF               	dw	65535	; assembler added errata NOP
  6909                           
  6910                           ;digital.h: 7: if ((freq >= 100) && (freq < 200)) band = 1;
  6911                           
  6912                           ;incstack = 0
  6913  001AAC  5049               	movf	_freq+1,w,c	;volatile
  6914  001AAE  E103               	bnz	u2450
  6915  001AB0  0E64               	movlw	100
  6916  001AB2  5C48               	subwf	_freq,w,c	;volatile
  6917  001AB4  E307               	bnc	l2812
  6918  001AB6                     u2450:
  6919  001AB6  5049               	movf	_freq+1,w,c	;volatile
  6920  001AB8  E105               	bnz	l2812
  6921  001ABA  0EC8               	movlw	200
  6922  001ABC  5C48               	subwf	_freq,w,c	;volatile
  6923  001ABE  E202               	bc	l2812
  6924  001AC0  0E01               	movlw	1
  6925  001AC2  D03D               	goto	L4
  6926  001AC4                     l2812:
  6927                           
  6928                           ;digital.h: 8: else;digital.h: 9: if ((freq >= 200) && (freq < 390)) band = 2;
  6929  001AC4  5049               	movf	_freq+1,w,c	;volatile
  6930  001AC6  E103               	bnz	u2470
  6931  001AC8  0EC8               	movlw	200
  6932  001ACA  5C48               	subwf	_freq,w,c	;volatile
  6933  001ACC  E307               	bnc	l2818
  6934  001ACE                     u2470:
  6935  001ACE  0E86               	movlw	134
  6936  001AD0  5C48               	subwf	_freq,w,c	;volatile
  6937  001AD2  0E01               	movlw	1
  6938  001AD4  5849               	subwfb	_freq+1,w,c	;volatile
  6939  001AD6  E202               	bc	l2818
  6940  001AD8  0E02               	movlw	2
  6941  001ADA  D031               	goto	L4
  6942  001ADC                     l2818:
  6943                           
  6944                           ;digital.h: 10: else;digital.h: 11: if ((freq >= 390) && (freq < 740)) band = 3;
  6945  001ADC  0E86               	movlw	134
  6946  001ADE  5C48               	subwf	_freq,w,c	;volatile
  6947  001AE0  0E01               	movlw	1
  6948  001AE2  5849               	subwfb	_freq+1,w,c	;volatile
  6949  001AE4  E307               	bnc	l2824
  6950  001AE6  0EE4               	movlw	228
  6951  001AE8  5C48               	subwf	_freq,w,c	;volatile
  6952  001AEA  0E02               	movlw	2
  6953  001AEC  5849               	subwfb	_freq+1,w,c	;volatile
  6954  001AEE  E202               	bc	l2824
  6955  001AF0  0E03               	movlw	3
  6956  001AF2  D025               	goto	L4
  6957  001AF4                     l2824:
  6958                           
  6959                           ;digital.h: 12: else;digital.h: 13: if ((freq >= 740) && (freq < 1500)) band = 4;
  6960  001AF4  0EE4               	movlw	228
  6961  001AF6  5C48               	subwf	_freq,w,c	;volatile
  6962  001AF8  0E02               	movlw	2
  6963  001AFA  5849               	subwfb	_freq+1,w,c	;volatile
  6964  001AFC  E307               	bnc	l2830
  6965  001AFE  0EDC               	movlw	220
  6966  001B00  5C48               	subwf	_freq,w,c	;volatile
  6967  001B02  0E05               	movlw	5
  6968  001B04  5849               	subwfb	_freq+1,w,c	;volatile
  6969  001B06  E202               	bc	l2830
  6970  001B08  0E04               	movlw	4
  6971  001B0A  D019               	goto	L4
  6972  001B0C                     l2830:
  6973                           
  6974                           ;digital.h: 14: else;digital.h: 15: if ((freq >= 1500) && (freq < 2200)) band = 5;
  6975  001B0C  0EDC               	movlw	220
  6976  001B0E  5C48               	subwf	_freq,w,c	;volatile
  6977  001B10  0E05               	movlw	5
  6978  001B12  5849               	subwfb	_freq+1,w,c	;volatile
  6979  001B14  E307               	bnc	l2836
  6980  001B16  0E98               	movlw	152
  6981  001B18  5C48               	subwf	_freq,w,c	;volatile
  6982  001B1A  0E08               	movlw	8
  6983  001B1C  5849               	subwfb	_freq+1,w,c	;volatile
  6984  001B1E  E202               	bc	l2836
  6985  001B20  0E05               	movlw	5
  6986  001B22  D00D               	goto	L4
  6987  001B24                     l2836:
  6988                           
  6989                           ;digital.h: 16: else;digital.h: 17: if ((freq >= 2200) && (freq < 3000)) band = 6;
  6990  001B24  0E98               	movlw	152
  6991  001B26  5C48               	subwf	_freq,w,c	;volatile
  6992  001B28  0E08               	movlw	8
  6993  001B2A  5849               	subwfb	_freq+1,w,c	;volatile
  6994  001B2C  E307               	bnc	l2842
  6995  001B2E  0EB8               	movlw	184
  6996  001B30  5C48               	subwf	_freq,w,c	;volatile
  6997  001B32  0E0B               	movlw	11
  6998  001B34  5849               	subwfb	_freq+1,w,c	;volatile
  6999  001B36  E202               	bc	l2842
  7000  001B38  0E06               	movlw	6
  7001  001B3A  D001               	goto	L4
  7002  001B3C                     l2842:
  7003                           
  7004                           ;digital.h: 18: else band = 7;
  7005  001B3C  0E07               	movlw	7
  7006  001B3E                     L4:
  7007  001B3E  FFFF               	dw	65535	; assembler added errata NOP
  7008  001B40  6E57               	movwf	_band,c	;volatile
  7009                           
  7010                           ;digital.h: 20: SetBand();
  7011  001B42  EF7B  F00E         	goto	_SetBand	;wreg free
  7012  001B46  FFFF               	dw	65535	; errata NOP
  7013  001B48                     __end_of_BandDecode:
  7014                           	opt stack 0
  7015                           stkptr	equ	0xFFC
  7016                           tblptru	equ	0xFF8
  7017                           tblptrh	equ	0xFF7
  7018                           tblptrl	equ	0xFF6
  7019                           tablat	equ	0xFF5
  7020                           prodh	equ	0xFF4
  7021                           prodl	equ	0xFF3
  7022                           intcon	equ	0xFF2
  7023                           intcon2	equ	0xFF1
  7024                           postinc0	equ	0xFEE
  7025                           wreg	equ	0xFE8
  7026                           indf2	equ	0xFDF
  7027                           fsr2h	equ	0xFDA
  7028                           fsr2l	equ	0xFD9
  7029                           status	equ	0xFD8
  7030                           
  7031 ;; *************** function _SetBand *****************
  7032 ;; Defined at:
  7033 ;;		line 137 in file "../digital.h"
  7034 ;; Parameters:    Size  Location     Type
  7035 ;;		None
  7036 ;; Auto vars:     Size  Location     Type
  7037 ;;  bb              1    4[COMRAM] unsigned char 
  7038 ;; Return value:  Size  Location     Type
  7039 ;;                  1    wreg      void 
  7040 ;; Registers used:
  7041 ;;		wreg, status,2, status,0
  7042 ;; Tracked objects:
  7043 ;;		On entry : 0/0
  7044 ;;		On exit  : 0/0
  7045 ;;		Unchanged: 0/0
  7046 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7047 ;;      Params:         0       0       0       0       0       0       0
  7048 ;;      Locals:         1       0       0       0       0       0       0
  7049 ;;      Temps:          0       0       0       0       0       0       0
  7050 ;;      Totals:         1       0       0       0       0       0       0
  7051 ;;Total ram usage:        1 bytes
  7052 ;; Hardware stack levels used:    1
  7053 ;; Hardware stack levels required when called:    3
  7054 ;; This function calls:
  7055 ;;		Nothing
  7056 ;; This function is called by:
  7057 ;;		_BandDecode
  7058 ;;		_ReadStatusFromLCD
  7059 ;;		_main
  7060 ;; This function uses a non-reentrant model
  7061 ;;
  7062                           
  7063                           	psect	text39
  7064  001CF6                     __ptext39:
  7065                           	opt stack 0
  7066  001CF6                     _SetBand:
  7067                           	opt stack 0
  7068  001CF6  FFFF               	dw	65535	; assembler added errata NOP
  7069                           
  7070                           ;digital.h: 139: unsigned char bb;;digital.h: 140: bb = band & 0x7;
  7071                           
  7072                           ;incstack = 0
  7073  001CF8  5057               	movf	_band,w,c	;volatile
  7074  001CFA  0B07               	andlw	7
  7075  001CFC  6E05               	movwf	SetBand@bb,c
  7076                           
  7077                           ;digital.h: 142: if (bb == 0)
  7078  001CFE  5005               	movf	SetBand@bb,w,c
  7079  001D00  E107               	bnz	l2726
  7080                           
  7081                           ;digital.h: 143: {;digital.h: 144: LATCbits.LC2 = 0;
  7082  001D02  948B               	bcf	3979,2,c	;volatile
  7083                           
  7084                           ;digital.h: 145: LATCbits.LC3 = 0;
  7085  001D04  968B               	bcf	3979,3,c	;volatile
  7086                           
  7087                           ;digital.h: 146: LATDbits.LD0 = 0;
  7088  001D06  908C               	bcf	3980,0,c	;volatile
  7089                           
  7090                           ;digital.h: 147: LATDbits.LD1 = 0;
  7091  001D08  928C               	bcf	3980,1,c	;volatile
  7092                           
  7093                           ;digital.h: 148: LATDbits.LD2 = 0;
  7094  001D0A  948C               	bcf	3980,2,c	;volatile
  7095                           
  7096                           ;digital.h: 149: LATDbits.LD3 = 0;
  7097  001D0C  968C               	bcf	3980,3,c	;volatile
  7098  001D0E  D02E               	goto	l382
  7099  001D10                     l2726:
  7100                           
  7101                           ;digital.h: 152: else;digital.h: 153: {;digital.h: 154: if (bb == 1) LATCbits.LC2 = 1;
  7102  001D10  0405               	decf	SetBand@bb,w,c
  7103  001D12  E102               	bnz	l370
  7104  001D14  848B               	bsf	3979,2,c	;volatile
  7105  001D16  D001               	goto	l2730
  7106  001D18                     l370:
  7107                           
  7108                           ;digital.h: 155: else LATCbits.LC2 = 0;
  7109  001D18  948B               	bcf	3979,2,c	;volatile
  7110  001D1A                     l2730:
  7111  001D1A  FFFF               	dw	65535	; assembler added errata NOP
  7112                           
  7113                           ;digital.h: 156: if (bb == 2) LATCbits.LC3 = 1;
  7114  001D1C  0E02               	movlw	2
  7115  001D1E  1805               	xorwf	SetBand@bb,w,c
  7116  001D20  E102               	bnz	l372
  7117  001D22  868B               	bsf	3979,3,c	;volatile
  7118  001D24  D001               	goto	l2734
  7119  001D26                     l372:
  7120                           
  7121                           ;digital.h: 157: else LATCbits.LC3 = 0;
  7122  001D26  968B               	bcf	3979,3,c	;volatile
  7123  001D28                     l2734:
  7124  001D28  FFFF               	dw	65535	; assembler added errata NOP
  7125                           
  7126                           ;digital.h: 158: if (bb == 3) LATDbits.LD0 = 1;
  7127  001D2A  0E03               	movlw	3
  7128  001D2C  1805               	xorwf	SetBand@bb,w,c
  7129  001D2E  E102               	bnz	l374
  7130  001D30  808C               	bsf	3980,0,c	;volatile
  7131  001D32  D001               	goto	l2738
  7132  001D34                     l374:
  7133                           
  7134                           ;digital.h: 159: else LATDbits.LD0 = 0;
  7135  001D34  908C               	bcf	3980,0,c	;volatile
  7136  001D36                     l2738:
  7137  001D36  FFFF               	dw	65535	; assembler added errata NOP
  7138                           
  7139                           ;digital.h: 160: if (bb == 4) LATDbits.LD1 = 1;
  7140  001D38  0E04               	movlw	4
  7141  001D3A  1805               	xorwf	SetBand@bb,w,c
  7142  001D3C  E102               	bnz	l376
  7143  001D3E  828C               	bsf	3980,1,c	;volatile
  7144  001D40  D001               	goto	l2742
  7145  001D42                     l376:
  7146                           
  7147                           ;digital.h: 161: else LATDbits.LD1 = 0;
  7148  001D42  928C               	bcf	3980,1,c	;volatile
  7149  001D44                     l2742:
  7150  001D44  FFFF               	dw	65535	; assembler added errata NOP
  7151                           
  7152                           ;digital.h: 162: if (bb == 5) LATDbits.LD2 = 1;
  7153  001D46  0E05               	movlw	5
  7154  001D48  1805               	xorwf	SetBand@bb,w,c
  7155  001D4A  E102               	bnz	l378
  7156  001D4C  848C               	bsf	3980,2,c	;volatile
  7157  001D4E  D001               	goto	l2746
  7158  001D50                     l378:
  7159                           
  7160                           ;digital.h: 163: else LATDbits.LD2 = 0;
  7161  001D50  948C               	bcf	3980,2,c	;volatile
  7162  001D52                     l2746:
  7163  001D52  FFFF               	dw	65535	; assembler added errata NOP
  7164                           
  7165                           ;digital.h: 164: if (bb == 6) LATDbits.LD3 = 1;
  7166  001D54  0E06               	movlw	6
  7167  001D56  1805               	xorwf	SetBand@bb,w,c
  7168  001D58  E102               	bnz	l380
  7169  001D5A  868C               	bsf	3980,3,c	;volatile
  7170  001D5C  D001               	goto	l2750
  7171  001D5E                     l380:
  7172                           
  7173                           ;digital.h: 165: else LATDbits.LD3 = 0;
  7174  001D5E  968C               	bcf	3980,3,c	;volatile
  7175  001D60                     l2750:
  7176  001D60  FFFF               	dw	65535	; assembler added errata NOP
  7177                           
  7178                           ;digital.h: 166: if (bb == 7) LATDbits.LD7 = 1;
  7179  001D62  0E07               	movlw	7
  7180  001D64  1805               	xorwf	SetBand@bb,w,c
  7181  001D66  E102               	bnz	l382
  7182  001D68  8E8C               	bsf	3980,7,c	;volatile
  7183  001D6A  D002               	goto	l384
  7184  001D6C                     l382:
  7185  001D6C  FFFF               	dw	65535	; assembler added errata NOP
  7186                           
  7187                           ;digital.h: 167: else LATDbits.LD7 = 0;
  7188  001D6E  9E8C               	bcf	3980,7,c	;volatile
  7189  001D70                     l384:
  7190  001D70  FFFF               	dw	65535	; assembler added errata NOP
  7191  001D72  0012               	return		;funcret
  7192  001D74  FFFF               	dw	65535	; errata NOP
  7193  001D76                     __end_of_SetBand:
  7194                           	opt stack 0
  7195                           stkptr	equ	0xFFC
  7196                           tblptru	equ	0xFF8
  7197                           tblptrh	equ	0xFF7
  7198                           tblptrl	equ	0xFF6
  7199                           tablat	equ	0xFF5
  7200                           prodh	equ	0xFF4
  7201                           prodl	equ	0xFF3
  7202                           intcon	equ	0xFF2
  7203                           intcon2	equ	0xFF1
  7204                           postinc0	equ	0xFEE
  7205                           wreg	equ	0xFE8
  7206                           indf2	equ	0xFDF
  7207                           fsr2h	equ	0xFDA
  7208                           fsr2l	equ	0xFD9
  7209                           status	equ	0xFD8
  7210                           
  7211 ;; *************** function _PTT_OFF *****************
  7212 ;; Defined at:
  7213 ;;		line 117 in file "../digital.h"
  7214 ;; Parameters:    Size  Location     Type
  7215 ;;		None
  7216 ;; Auto vars:     Size  Location     Type
  7217 ;;		None
  7218 ;; Return value:  Size  Location     Type
  7219 ;;                  1    wreg      void 
  7220 ;; Registers used:
  7221 ;;		wreg, status,2, status,0, cstack
  7222 ;; Tracked objects:
  7223 ;;		On entry : 0/0
  7224 ;;		On exit  : 0/0
  7225 ;;		Unchanged: 0/0
  7226 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7227 ;;      Params:         0       0       0       0       0       0       0
  7228 ;;      Locals:         0       0       0       0       0       0       0
  7229 ;;      Temps:          0       0       0       0       0       0       0
  7230 ;;      Totals:         0       0       0       0       0       0       0
  7231 ;;Total ram usage:        0 bytes
  7232 ;; Hardware stack levels used:    1
  7233 ;; Hardware stack levels required when called:    4
  7234 ;; This function calls:
  7235 ;;		_DelayMs
  7236 ;; This function is called by:
  7237 ;;		_PTT_read
  7238 ;;		_ReadStatusFromLCD
  7239 ;; This function uses a non-reentrant model
  7240 ;;
  7241                           
  7242                           	psect	text40
  7243  00235C                     __ptext40:
  7244                           	opt stack 0
  7245  00235C                     _PTT_OFF:
  7246                           	opt stack 0
  7247  00235C  FFFF               	dw	65535	; assembler added errata NOP
  7248                           
  7249                           ;digital.h: 119: if (ptt == 0) return;
  7250                           
  7251                           ;incstack = 0
  7252  00235E  5056               	movf	_ptt,w,c	;volatile
  7253  002360  E008               	bz	l359
  7254                           
  7255                           ;digital.h: 120: ptt = 0;
  7256  002362  6A56               	clrf	_ptt,c	;volatile
  7257                           
  7258                           ;digital.h: 122: LATEbits.LE2 = 0;
  7259  002364  948D               	bcf	3981,2,c	;volatile
  7260                           
  7261                           ;digital.h: 123: LATCbits.LC4 = 0;
  7262  002366  988B               	bcf	3979,4,c	;volatile
  7263                           
  7264                           ;digital.h: 124: DelayMs(reldel);
  7265  002368  0100               	movlb	0	; () banked
  7266  00236A  51F5               	movf	_reldel& (0+255),w,b	;volatile
  7267  00236C  EC44  F011         	call	_DelayMs
  7268                           
  7269                           ;digital.h: 125: LATBbits.LB3 = 0;
  7270  002370  968A               	bcf	3978,3,c	;volatile
  7271  002372                     l359:
  7272  002372  0012               	return		;funcret
  7273  002374  FFFF               	dw	65535	; errata NOP
  7274  002376                     __end_of_PTT_OFF:
  7275                           	opt stack 0
  7276                           stkptr	equ	0xFFC
  7277                           tblptru	equ	0xFF8
  7278                           tblptrh	equ	0xFF7
  7279                           tblptrl	equ	0xFF6
  7280                           tablat	equ	0xFF5
  7281                           prodh	equ	0xFF4
  7282                           prodl	equ	0xFF3
  7283                           intcon	equ	0xFF2
  7284                           intcon2	equ	0xFF1
  7285                           postinc0	equ	0xFEE
  7286                           wreg	equ	0xFE8
  7287                           indf2	equ	0xFDF
  7288                           fsr2h	equ	0xFDA
  7289                           fsr2l	equ	0xFD9
  7290                           status	equ	0xFD8
  7291                           
  7292 ;; *************** function _LCDversionSend *****************
  7293 ;; Defined at:
  7294 ;;		line 306 in file "../nextion.h"
  7295 ;; Parameters:    Size  Location     Type
  7296 ;;		None
  7297 ;; Auto vars:     Size  Location     Type
  7298 ;;  rep             1   17[COMRAM] unsigned char 
  7299 ;; Return value:  Size  Location     Type
  7300 ;;                  1    wreg      void 
  7301 ;; Registers used:
  7302 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  7303 ;; Tracked objects:
  7304 ;;		On entry : 0/0
  7305 ;;		On exit  : 0/0
  7306 ;;		Unchanged: 0/0
  7307 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7308 ;;      Params:         0       0       0       0       0       0       0
  7309 ;;      Locals:         1       0       0       0       0       0       0
  7310 ;;      Temps:          0       0       0       0       0       0       0
  7311 ;;      Totals:         1       0       0       0       0       0       0
  7312 ;;Total ram usage:        1 bytes
  7313 ;; Hardware stack levels used:    1
  7314 ;; Hardware stack levels required when called:    5
  7315 ;; This function calls:
  7316 ;;		_CreateBuffTX
  7317 ;;		_SendUSART
  7318 ;; This function is called by:
  7319 ;;		_main
  7320 ;; This function uses a non-reentrant model
  7321 ;;
  7322                           
  7323                           	psect	text41
  7324  0021BE                     __ptext41:
  7325                           	opt stack 0
  7326  0021BE                     _LCDversionSend:
  7327                           	opt stack 0
  7328  0021BE  FFFF               	dw	65535	; assembler added errata NOP
  7329                           
  7330                           ;nextion.h: 308: unsigned char rep = 3;
  7331                           
  7332                           ;incstack = 0
  7333  0021C0  0E03               	movlw	3
  7334  0021C2  6E12               	movwf	LCDversionSend@rep,c
  7335                           
  7336                           ;nextion.h: 309: while(rep--)
  7337  0021C4  D00B               	goto	l3936
  7338  0021C6                     l3932:
  7339                           
  7340                           ;nextion.h: 310: {;nextion.h: 311: CreateBuffTX("version",81); SendUSART();
  7341  0021C6  0E21               	movlw	low STR_26
  7342  0021C8  6E0C               	movwf	CreateBuffTX@str,c
  7343  0021CA  0E51               	movlw	81
  7344  0021CC  6E0D               	movwf	CreateBuffTX@data,c
  7345  0021CE  6A0E               	clrf	CreateBuffTX@data+1,c
  7346  0021D0  6A0F               	clrf	CreateBuffTX@data+2,c
  7347  0021D2  6A10               	clrf	CreateBuffTX@data+3,c
  7348  0021D4  ECF0  F00D         	call	_CreateBuffTX	;wreg free
  7349  0021D8  EC93  F011         	call	_SendUSART	;wreg free
  7350  0021DC                     l3936:
  7351  0021DC  FFFF               	dw	65535	; assembler added errata NOP
  7352  0021DE  0612               	decf	LCDversionSend@rep,f,c
  7353  0021E0  2812               	incf	LCDversionSend@rep,w,c
  7354  0021E2  E1F1               	bnz	l3932
  7355  0021E4  0012               	return		;funcret
  7356  0021E6  FFFF               	dw	65535	; errata NOP
  7357  0021E8                     __end_of_LCDversionSend:
  7358                           	opt stack 0
  7359                           stkptr	equ	0xFFC
  7360                           tblptru	equ	0xFF8
  7361                           tblptrh	equ	0xFF7
  7362                           tblptrl	equ	0xFF6
  7363                           tablat	equ	0xFF5
  7364                           prodh	equ	0xFF4
  7365                           prodl	equ	0xFF3
  7366                           intcon	equ	0xFF2
  7367                           intcon2	equ	0xFF1
  7368                           postinc0	equ	0xFEE
  7369                           wreg	equ	0xFE8
  7370                           indf2	equ	0xFDF
  7371                           fsr2h	equ	0xFDA
  7372                           fsr2l	equ	0xFD9
  7373                           status	equ	0xFD8
  7374                           
  7375 ;; *************** function _SendUSART *****************
  7376 ;; Defined at:
  7377 ;;		line 201 in file "../nextion.h"
  7378 ;; Parameters:    Size  Location     Type
  7379 ;;		None
  7380 ;; Auto vars:     Size  Location     Type
  7381 ;;		None
  7382 ;; Return value:  Size  Location     Type
  7383 ;;                  1    wreg      void 
  7384 ;; Registers used:
  7385 ;;		wreg, status,2, status,0, cstack
  7386 ;; Tracked objects:
  7387 ;;		On entry : 0/0
  7388 ;;		On exit  : 0/0
  7389 ;;		Unchanged: 0/0
  7390 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7391 ;;      Params:         0       0       0       0       0       0       0
  7392 ;;      Locals:         0       0       0       0       0       0       0
  7393 ;;      Temps:          0       0       0       0       0       0       0
  7394 ;;      Totals:         0       0       0       0       0       0       0
  7395 ;;Total ram usage:        0 bytes
  7396 ;; Hardware stack levels used:    1
  7397 ;; Hardware stack levels required when called:    4
  7398 ;; This function calls:
  7399 ;;		_DelayMs
  7400 ;; This function is called by:
  7401 ;;		_SetupMode
  7402 ;;		_LCDpageSelect
  7403 ;;		_LCDversionSend
  7404 ;; This function uses a non-reentrant model
  7405 ;;
  7406                           
  7407                           	psect	text42
  7408  002326                     __ptext42:
  7409                           	opt stack 0
  7410  002326                     _SendUSART:
  7411                           	opt stack 0
  7412  002326  FFFF               	dw	65535	; assembler added errata NOP
  7413                           
  7414                           ;nextion.h: 203: txb = 0; PIE1bits.TXIE = 1;
  7415                           
  7416                           ;incstack = 0
  7417  002328  0100               	movlb	0	; () banked
  7418  00232A  6B87               	clrf	_txb& (0+255),b	;volatile
  7419  00232C  889D               	bsf	3997,4,c	;volatile
  7420                           
  7421                           ;nextion.h: 204: while(PIE1bits.TXIE) asm("clrwdt");
  7422  00232E  D002               	goto	l543
  7423  002330                     l544:
  7424  002330  FFFF               	dw	65535	; assembler added errata NOP
  7425  002332  0004               	clrwdt		;# 
  7426  002334                     l543:
  7427  002334  FFFF               	dw	65535	; assembler added errata NOP
  7428  002336  B89D               	btfsc	3997,4,c	;volatile
  7429  002338  D7FB               	goto	l544
  7430                           
  7431                           ;nextion.h: 205: DelayMs(5);
  7432  00233A  0E05               	movlw	5
  7433  00233C  EF44  F011         	goto	_DelayMs
  7434  002340  FFFF               	dw	65535	; errata NOP
  7435  002342                     __end_of_SendUSART:
  7436                           	opt stack 0
  7437                           stkptr	equ	0xFFC
  7438                           tblptru	equ	0xFF8
  7439                           tblptrh	equ	0xFF7
  7440                           tblptrl	equ	0xFF6
  7441                           tablat	equ	0xFF5
  7442                           prodh	equ	0xFF4
  7443                           prodl	equ	0xFF3
  7444                           intcon	equ	0xFF2
  7445                           intcon2	equ	0xFF1
  7446                           postinc0	equ	0xFEE
  7447                           wreg	equ	0xFE8
  7448                           indf2	equ	0xFDF
  7449                           fsr2h	equ	0xFDA
  7450                           fsr2l	equ	0xFD9
  7451                           status	equ	0xFD8
  7452                           
  7453 ;; *************** function _DelayMs *****************
  7454 ;; Defined at:
  7455 ;;		line 74 in file "../digital.h"
  7456 ;; Parameters:    Size  Location     Type
  7457 ;;  ms              1    wreg     unsigned char 
  7458 ;; Auto vars:     Size  Location     Type
  7459 ;;  ms              1    5[COMRAM] unsigned char 
  7460 ;; Return value:  Size  Location     Type
  7461 ;;                  1    wreg      void 
  7462 ;; Registers used:
  7463 ;;		wreg, status,2, status,0
  7464 ;; Tracked objects:
  7465 ;;		On entry : 0/0
  7466 ;;		On exit  : 0/0
  7467 ;;		Unchanged: 0/0
  7468 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7469 ;;      Params:         0       0       0       0       0       0       0
  7470 ;;      Locals:         1       0       0       0       0       0       0
  7471 ;;      Temps:          1       0       0       0       0       0       0
  7472 ;;      Totals:         2       0       0       0       0       0       0
  7473 ;;Total ram usage:        2 bytes
  7474 ;; Hardware stack levels used:    1
  7475 ;; Hardware stack levels required when called:    3
  7476 ;; This function calls:
  7477 ;;		Nothing
  7478 ;; This function is called by:
  7479 ;;		_Beep
  7480 ;;		_PTT_ON
  7481 ;;		_PTT_OFF
  7482 ;;		_SendUSART
  7483 ;; This function uses a non-reentrant model
  7484 ;;
  7485                           
  7486                           	psect	text43
  7487  002288                     __ptext43:
  7488                           	opt stack 0
  7489  002288                     _DelayMs:
  7490                           	opt stack 0
  7491  002288  FFFF               	dw	65535	; assembler added errata NOP
  7492                           
  7493                           ;incstack = 0
  7494                           ;DelayMs@ms stored from wreg
  7495  00228A  6E06               	movwf	DelayMs@ms,c
  7496                           
  7497                           ;digital.h: 76: while(ms--)
  7498  00228C  D00A               	goto	l2856
  7499  00228E                     l340:
  7500  00228E  0004               	clrwdt		;# 
  7501                           
  7502                           ;digital.h: 79: _delay((unsigned long)((1)*(40000000/4000.0)));
  7503  002290  0E0A               	movlw	10
  7504  002292  6E05               	movwf	??_DelayMs& (0+255),c
  7505  002294  0EBE               	movlw	190
  7506  002296                     u5467:
  7507  002296  FFFF               	dw	65535	; errata NOP
  7508  002298  2EE8               	decfsz	wreg,f,c
  7509  00229A  D7FD               	bra	u5467
  7510  00229C  2E05               	decfsz	??_DelayMs& (0+255),f,c
  7511  00229E  D7FB               	bra	u5467
  7512  0022A0  D000               	nop2	
  7513  0022A2                     l2856:
  7514  0022A2  FFFF               	dw	65535	; assembler added errata NOP
  7515  0022A4  0606               	decf	DelayMs@ms,f,c
  7516  0022A6  2806               	incf	DelayMs@ms,w,c
  7517  0022A8  E1F2               	bnz	l340
  7518  0022AA  0012               	return		;funcret
  7519  0022AC  FFFF               	dw	65535	; errata NOP
  7520  0022AE                     __end_of_DelayMs:
  7521                           	opt stack 0
  7522                           stkptr	equ	0xFFC
  7523                           tblptru	equ	0xFF8
  7524                           tblptrh	equ	0xFF7
  7525                           tblptrl	equ	0xFF6
  7526                           tablat	equ	0xFF5
  7527                           prodh	equ	0xFF4
  7528                           prodl	equ	0xFF3
  7529                           intcon	equ	0xFF2
  7530                           intcon2	equ	0xFF1
  7531                           postinc0	equ	0xFEE
  7532                           wreg	equ	0xFE8
  7533                           indf2	equ	0xFDF
  7534                           fsr2h	equ	0xFDA
  7535                           fsr2l	equ	0xFD9
  7536                           status	equ	0xFD8
  7537                           
  7538 ;; *************** function _CreateBuffTX *****************
  7539 ;; Defined at:
  7540 ;;		line 24 in file "../nextion.h"
  7541 ;; Parameters:    Size  Location     Type
  7542 ;;  str             1   11[COMRAM] PTR const unsigned char 
  7543 ;;		 -> STR_26(8), STR_25(12), STR_24(10), STR_23(10), 
  7544 ;;		 -> STR_22(4), STR_21(4), STR_20(4), STR_19(5), 
  7545 ;;		 -> STR_18(4), STR_17(4), STR_16(5), STR_15(5), 
  7546 ;;		 -> STR_14(4), STR_13(4), STR_12(4), STR_11(4), 
  7547 ;;		 -> STR_10(4), STR_9(4), STR_8(5), STR_7(5), 
  7548 ;;		 -> STR_6(5), STR_5(5), STR_4(4), STR_3(4), 
  7549 ;;		 -> STR_2(4), STR_1(4), 
  7550 ;;  data            4   12[COMRAM] unsigned long 
  7551 ;; Auto vars:     Size  Location     Type
  7552 ;;		None
  7553 ;; Return value:  Size  Location     Type
  7554 ;;                  1    wreg      void 
  7555 ;; Registers used:
  7556 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  7557 ;; Tracked objects:
  7558 ;;		On entry : 0/0
  7559 ;;		On exit  : 0/0
  7560 ;;		Unchanged: 0/0
  7561 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7562 ;;      Params:         5       0       0       0       0       0       0
  7563 ;;      Locals:         0       0       0       0       0       0       0
  7564 ;;      Temps:          1       0       0       0       0       0       0
  7565 ;;      Totals:         6       0       0       0       0       0       0
  7566 ;;Total ram usage:        6 bytes
  7567 ;; Hardware stack levels used:    1
  7568 ;; Hardware stack levels required when called:    4
  7569 ;; This function calls:
  7570 ;;		_ConvertNumber
  7571 ;; This function is called by:
  7572 ;;		_SendStatusToLCD
  7573 ;;		_SetupMode
  7574 ;;		_LCDpageSelect
  7575 ;;		_LCDversionSend
  7576 ;; This function uses a non-reentrant model
  7577 ;;
  7578                           
  7579                           	psect	text44
  7580  001BE0                     __ptext44:
  7581                           	opt stack 0
  7582  001BE0                     _CreateBuffTX:
  7583                           	opt stack 0
  7584  001BE0  FFFF               	dw	65535	; assembler added errata NOP
  7585                           
  7586                           ;nextion.h: 26: for(tx_len = 0; str[tx_len] != '\0'; tx_len++) buffTX[tx_len] = str[tx_l
      +                          en];
  7587                           
  7588                           ;incstack = 0
  7589  001BE2  6A52               	clrf	_tx_len,c	;volatile
  7590  001BE4  D00E               	goto	l3066
  7591  001BE6                     l3062:
  7592  001BE6  500C               	movf	CreateBuffTX@str,w,c
  7593  001BE8  2452               	addwf	_tx_len,w,c
  7594  001BEA  6E11               	movwf	??_CreateBuffTX& (0+255),c
  7595  001BEC  C011  FFF6         	movff	??_CreateBuffTX,tblptrl
  7596  001BF0                     	if	0	;There is only one active tblptr byte
  7597  001BF0                     	endif
  7598  001BF0                     	if	0	;tblptru may be non-zero
  7599  001BF0                     	endif
  7600  001BF0                     	if	0	;tblptru may be non-zero
  7601  001BF0                     	endif
  7602  001BF0  5052               	movf	_tx_len,w,c
  7603  001BF2  0F8F               	addlw	low _buffTX
  7604  001BF4  6ED9               	movwf	fsr2l,c
  7605  001BF6  6ADA               	clrf	fsr2h,c
  7606  001BF8  0008               	tblrd		*
  7607  001BFA  FFFF               	dw	65535	; errata NOP
  7608  001BFC  CFF5 FFDF          	movff	tablat,indf2
  7609  001C00  2A52               	incf	_tx_len,f,c	;volatile
  7610  001C02                     l3066:
  7611  001C02  FFFF               	dw	65535	; assembler added errata NOP
  7612  001C04  500C               	movf	CreateBuffTX@str,w,c
  7613  001C06  2452               	addwf	_tx_len,w,c
  7614  001C08  6E11               	movwf	??_CreateBuffTX& (0+255),c
  7615  001C0A  C011  FFF6         	movff	??_CreateBuffTX,tblptrl
  7616  001C0E                     	if	0	;There is only one active tblptr byte
  7617  001C0E                     	endif
  7618  001C0E                     	if	0	;tblptru may be non-zero
  7619  001C0E                     	endif
  7620  001C0E                     	if	0	;tblptru may be non-zero
  7621  001C0E                     	endif
  7622  001C0E  0008               	tblrd		*
  7623  001C10  FFFF               	dw	65535	; errata NOP
  7624  001C12  50F5               	movf	tablat,w,c
  7625  001C14  E1E8               	bnz	l3062
  7626                           
  7627                           ;nextion.h: 28: if (data != 0xFFFFFF)
  7628  001C16  280D               	incf	CreateBuffTX@data,w,c
  7629  001C18  E105               	bnz	u2970
  7630  001C1A  280E               	incf	CreateBuffTX@data+1,w,c
  7631  001C1C  E103               	bnz	u2970
  7632  001C1E  280F               	incf	CreateBuffTX@data+2,w,c
  7633  001C20  1010               	iorwf	CreateBuffTX@data+3,w,c
  7634  001C22  E016               	bz	l3078
  7635  001C24                     u2970:
  7636                           
  7637                           ;nextion.h: 29: {;nextion.h: 30: buffTX[tx_len++] = '=';
  7638  001C24  5052               	movf	_tx_len,w,c
  7639  001C26  0F8F               	addlw	low _buffTX
  7640  001C28  6ED9               	movwf	fsr2l,c
  7641  001C2A  6ADA               	clrf	fsr2h,c
  7642  001C2C  0E3D               	movlw	61
  7643  001C2E  6EDF               	movwf	indf2,c
  7644  001C30  2A52               	incf	_tx_len,f,c	;volatile
  7645                           
  7646                           ;nextion.h: 31: ConvertNumber(data, (unsigned char *)&buffTX[tx_len]);
  7647  001C32  C00D  F005         	movff	CreateBuffTX@data,ConvertNumber@number
  7648  001C36  C00E  F006         	movff	CreateBuffTX@data+1,ConvertNumber@number+1
  7649  001C3A  C00F  F007         	movff	CreateBuffTX@data+2,ConvertNumber@number+2
  7650  001C3E  C010  F008         	movff	CreateBuffTX@data+3,ConvertNumber@number+3
  7651  001C42  5052               	movf	_tx_len,w,c
  7652  001C44  0F8F               	addlw	low _buffTX
  7653  001C46  6E09               	movwf	ConvertNumber@conv,c
  7654  001C48  EC87  F009         	call	_ConvertNumber	;wreg free
  7655                           
  7656                           ;nextion.h: 32: tx_len += 6;
  7657  001C4C  0E06               	movlw	6
  7658  001C4E  2652               	addwf	_tx_len,f,c	;volatile
  7659  001C50                     l3078:
  7660                           
  7661                           ;nextion.h: 33: };nextion.h: 35: buffTX[tx_len++] = 0xFF;
  7662  001C50  5052               	movf	_tx_len,w,c
  7663  001C52  0F8F               	addlw	low _buffTX
  7664  001C54  6ED9               	movwf	fsr2l,c
  7665  001C56  6ADA               	clrf	fsr2h,c
  7666  001C58  68DF               	setf	indf2,c
  7667  001C5A  2A52               	incf	_tx_len,f,c	;volatile
  7668                           
  7669                           ;nextion.h: 36: buffTX[tx_len++] = 0xFF;
  7670  001C5C  5052               	movf	_tx_len,w,c
  7671  001C5E  0F8F               	addlw	low _buffTX
  7672  001C60  6ED9               	movwf	fsr2l,c
  7673  001C62  6ADA               	clrf	fsr2h,c
  7674  001C64  68DF               	setf	indf2,c
  7675  001C66  2A52               	incf	_tx_len,f,c	;volatile
  7676                           
  7677                           ;nextion.h: 37: buffTX[tx_len] = 0xFF;
  7678  001C68  5052               	movf	_tx_len,w,c
  7679  001C6A  0F8F               	addlw	low _buffTX
  7680  001C6C  6ED9               	movwf	fsr2l,c
  7681  001C6E  6ADA               	clrf	fsr2h,c
  7682  001C70  68DF               	setf	indf2,c
  7683  001C72  0CFF               	retlw	255	;funcret
  7684  001C74  FFFF               	dw	65535	; errata NOP
  7685  001C76                     __end_of_CreateBuffTX:
  7686                           	opt stack 0
  7687                           stkptr	equ	0xFFC
  7688                           tblptru	equ	0xFF8
  7689                           tblptrh	equ	0xFF7
  7690                           tblptrl	equ	0xFF6
  7691                           tablat	equ	0xFF5
  7692                           prodh	equ	0xFF4
  7693                           prodl	equ	0xFF3
  7694                           intcon	equ	0xFF2
  7695                           intcon2	equ	0xFF1
  7696                           postinc0	equ	0xFEE
  7697                           wreg	equ	0xFE8
  7698                           indf2	equ	0xFDF
  7699                           fsr2h	equ	0xFDA
  7700                           fsr2l	equ	0xFD9
  7701                           status	equ	0xFD8
  7702                           
  7703 ;; *************** function _ConvertNumber *****************
  7704 ;; Defined at:
  7705 ;;		line 6 in file "../nextion.h"
  7706 ;; Parameters:    Size  Location     Type
  7707 ;;  number          4    4[COMRAM] unsigned long 
  7708 ;;  conv            1    8[COMRAM] PTR unsigned char 
  7709 ;;		 -> buffTX(64), 
  7710 ;; Auto vars:     Size  Location     Type
  7711 ;;		None
  7712 ;; Return value:  Size  Location     Type
  7713 ;;                  1    wreg      void 
  7714 ;; Registers used:
  7715 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  7716 ;; Tracked objects:
  7717 ;;		On entry : 0/0
  7718 ;;		On exit  : 0/0
  7719 ;;		Unchanged: 0/0
  7720 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7721 ;;      Params:         5       0       0       0       0       0       0
  7722 ;;      Locals:         0       0       0       0       0       0       0
  7723 ;;      Temps:          0       0       0       0       0       0       0
  7724 ;;      Totals:         5       0       0       0       0       0       0
  7725 ;;Total ram usage:        5 bytes
  7726 ;; Hardware stack levels used:    1
  7727 ;; Hardware stack levels required when called:    3
  7728 ;; This function calls:
  7729 ;;		Nothing
  7730 ;; This function is called by:
  7731 ;;		_CreateBuffTX
  7732 ;; This function uses a non-reentrant model
  7733 ;;
  7734                           
  7735                           	psect	text45
  7736  00130E                     __ptext45:
  7737                           	opt stack 0
  7738  00130E                     _ConvertNumber:
  7739                           	opt stack 0
  7740  00130E  FFFF               	dw	65535	; assembler added errata NOP
  7741                           
  7742                           ;nextion.h: 8: conv[0] = 0x30;
  7743                           
  7744                           ;incstack = 0
  7745  001310  5009               	movf	ConvertNumber@conv,w,c
  7746  001312  6ED9               	movwf	fsr2l,c
  7747  001314  6ADA               	clrf	fsr2h,c
  7748  001316  0E30               	movlw	48
  7749  001318  6EDF               	movwf	indf2,c
  7750                           
  7751                           ;nextion.h: 9: conv[1] = 0x30;
  7752  00131A  5009               	movf	ConvertNumber@conv,w,c
  7753  00131C  6ED9               	movwf	fsr2l,c
  7754  00131E  6ADA               	clrf	fsr2h,c
  7755  001320  2AD9               	incf	fsr2l,f,c
  7756  001322  0E30               	movlw	48
  7757  001324  6EDF               	movwf	indf2,c
  7758                           
  7759                           ;nextion.h: 10: conv[2] = 0x30;
  7760  001326  5009               	movf	ConvertNumber@conv,w,c
  7761  001328  6ED9               	movwf	fsr2l,c
  7762  00132A  6ADA               	clrf	fsr2h,c
  7763  00132C  0E02               	movlw	2
  7764  00132E  26D9               	addwf	fsr2l,f,c
  7765  001330  0E30               	movlw	48
  7766  001332  6EDF               	movwf	indf2,c
  7767                           
  7768                           ;nextion.h: 11: conv[3] = 0x30;
  7769  001334  5009               	movf	ConvertNumber@conv,w,c
  7770  001336  6ED9               	movwf	fsr2l,c
  7771  001338  6ADA               	clrf	fsr2h,c
  7772  00133A  0E03               	movlw	3
  7773  00133C  26D9               	addwf	fsr2l,f,c
  7774  00133E  0E30               	movlw	48
  7775  001340  6EDF               	movwf	indf2,c
  7776                           
  7777                           ;nextion.h: 12: conv[4] = 0x30;
  7778  001342  5009               	movf	ConvertNumber@conv,w,c
  7779  001344  6ED9               	movwf	fsr2l,c
  7780  001346  6ADA               	clrf	fsr2h,c
  7781  001348  0E04               	movlw	4
  7782  00134A  26D9               	addwf	fsr2l,f,c
  7783  00134C  0E30               	movlw	48
  7784  00134E  6EDF               	movwf	indf2,c
  7785                           
  7786                           ;nextion.h: 13: conv[5] = 0x30;
  7787  001350  5009               	movf	ConvertNumber@conv,w,c
  7788  001352  6ED9               	movwf	fsr2l,c
  7789  001354  6ADA               	clrf	fsr2h,c
  7790  001356  0E05               	movlw	5
  7791  001358  26D9               	addwf	fsr2l,f,c
  7792  00135A  0E30               	movlw	48
  7793  00135C  6EDF               	movwf	indf2,c
  7794                           
  7795                           ;nextion.h: 15: while(number > 99999) {number -= 100000; conv[0]++;}
  7796  00135E  D00D               	goto	l2874
  7797  001360                     l2870:
  7798  001360  FFFF               	dw	65535	; assembler added errata NOP
  7799  001362  0EA0               	movlw	160
  7800  001364  5E05               	subwf	ConvertNumber@number,f,c
  7801  001366  0E86               	movlw	134
  7802  001368  5A06               	subwfb	ConvertNumber@number+1,f,c
  7803  00136A  0E01               	movlw	1
  7804  00136C  5A07               	subwfb	ConvertNumber@number+2,f,c
  7805  00136E  0E00               	movlw	0
  7806  001370  5A08               	subwfb	ConvertNumber@number+3,f,c
  7807  001372  5009               	movf	ConvertNumber@conv,w,c
  7808  001374  6ED9               	movwf	fsr2l,c
  7809  001376  6ADA               	clrf	fsr2h,c
  7810  001378  2ADF               	incf	indf2,f,c
  7811  00137A                     l2874:
  7812  00137A  FFFF               	dw	65535	; assembler added errata NOP
  7813  00137C  5008               	movf	ConvertNumber@number+3,w,c
  7814  00137E  E1F0               	bnz	l2870
  7815  001380  0EA0               	movlw	160
  7816  001382  5C05               	subwf	ConvertNumber@number,w,c
  7817  001384  0E86               	movlw	134
  7818  001386  5806               	subwfb	ConvertNumber@number+1,w,c
  7819  001388  0E01               	movlw	1
  7820  00138A  5807               	subwfb	ConvertNumber@number+2,w,c
  7821  00138C  E30E               	bnc	l2880
  7822  00138E  D7E8               	goto	l2870
  7823  001390                     l2876:
  7824  001390  FFFF               	dw	65535	; assembler added errata NOP
  7825  001392  0E10               	movlw	16
  7826  001394  5E05               	subwf	ConvertNumber@number,f,c
  7827  001396  0E27               	movlw	39
  7828  001398  5A06               	subwfb	ConvertNumber@number+1,f,c
  7829  00139A  0E00               	movlw	0
  7830  00139C  5A07               	subwfb	ConvertNumber@number+2,f,c
  7831  00139E  5A08               	subwfb	ConvertNumber@number+3,f,c
  7832  0013A0  5009               	movf	ConvertNumber@conv,w,c
  7833  0013A2  6ED9               	movwf	fsr2l,c
  7834  0013A4  6ADA               	clrf	fsr2h,c
  7835  0013A6  2AD9               	incf	fsr2l,f,c
  7836  0013A8  2ADF               	incf	indf2,f,c
  7837  0013AA                     l2880:
  7838  0013AA  5008               	movf	ConvertNumber@number+3,w,c
  7839  0013AC  1007               	iorwf	ConvertNumber@number+2,w,c
  7840  0013AE  E1F0               	bnz	l2876
  7841  0013B0  0E10               	movlw	16
  7842  0013B2  5C05               	subwf	ConvertNumber@number,w,c
  7843  0013B4  0E27               	movlw	39
  7844  0013B6  5806               	subwfb	ConvertNumber@number+1,w,c
  7845  0013B8  E30F               	bnc	l2886
  7846  0013BA  D7EA               	goto	l2876
  7847  0013BC                     l2882:
  7848  0013BC  FFFF               	dw	65535	; assembler added errata NOP
  7849  0013BE  0EE8               	movlw	232
  7850  0013C0  5E05               	subwf	ConvertNumber@number,f,c
  7851  0013C2  0E03               	movlw	3
  7852  0013C4  5A06               	subwfb	ConvertNumber@number+1,f,c
  7853  0013C6  0E00               	movlw	0
  7854  0013C8  5A07               	subwfb	ConvertNumber@number+2,f,c
  7855  0013CA  5A08               	subwfb	ConvertNumber@number+3,f,c
  7856  0013CC  5009               	movf	ConvertNumber@conv,w,c
  7857  0013CE  6ED9               	movwf	fsr2l,c
  7858  0013D0  6ADA               	clrf	fsr2h,c
  7859  0013D2  0E02               	movlw	2
  7860  0013D4  26D9               	addwf	fsr2l,f,c
  7861  0013D6  2ADF               	incf	indf2,f,c
  7862  0013D8                     l2886:
  7863  0013D8  5008               	movf	ConvertNumber@number+3,w,c
  7864  0013DA  1007               	iorwf	ConvertNumber@number+2,w,c
  7865  0013DC  E1EF               	bnz	l2882
  7866  0013DE  0EE8               	movlw	232
  7867  0013E0  5C05               	subwf	ConvertNumber@number,w,c
  7868  0013E2  0E03               	movlw	3
  7869  0013E4  5806               	subwfb	ConvertNumber@number+1,w,c
  7870  0013E6  E30E               	bnc	l2892
  7871  0013E8  D7E9               	goto	l2882
  7872  0013EA                     l2888:
  7873  0013EA  FFFF               	dw	65535	; assembler added errata NOP
  7874  0013EC  0E64               	movlw	100
  7875  0013EE  5E05               	subwf	ConvertNumber@number,f,c
  7876  0013F0  0E00               	movlw	0
  7877  0013F2  5A06               	subwfb	ConvertNumber@number+1,f,c
  7878  0013F4  5A07               	subwfb	ConvertNumber@number+2,f,c
  7879  0013F6  5A08               	subwfb	ConvertNumber@number+3,f,c
  7880  0013F8  5009               	movf	ConvertNumber@conv,w,c
  7881  0013FA  6ED9               	movwf	fsr2l,c
  7882  0013FC  6ADA               	clrf	fsr2h,c
  7883  0013FE  0E03               	movlw	3
  7884  001400  26D9               	addwf	fsr2l,f,c
  7885  001402  2ADF               	incf	indf2,f,c
  7886  001404                     l2892:
  7887  001404  5008               	movf	ConvertNumber@number+3,w,c
  7888  001406  1007               	iorwf	ConvertNumber@number+2,w,c
  7889  001408  1006               	iorwf	ConvertNumber@number+1,w,c
  7890  00140A  E1EF               	bnz	l2888
  7891  00140C  0E64               	movlw	100
  7892  00140E  5C05               	subwf	ConvertNumber@number,w,c
  7893  001410  E30D               	bnc	l2898
  7894  001412  D7EB               	goto	l2888
  7895  001414                     l2894:
  7896  001414  0E0A               	movlw	10
  7897  001416  5E05               	subwf	ConvertNumber@number,f,c
  7898  001418  0E00               	movlw	0
  7899  00141A  5A06               	subwfb	ConvertNumber@number+1,f,c
  7900  00141C  5A07               	subwfb	ConvertNumber@number+2,f,c
  7901  00141E  5A08               	subwfb	ConvertNumber@number+3,f,c
  7902  001420  5009               	movf	ConvertNumber@conv,w,c
  7903  001422  6ED9               	movwf	fsr2l,c
  7904  001424  6ADA               	clrf	fsr2h,c
  7905  001426  0E04               	movlw	4
  7906  001428  26D9               	addwf	fsr2l,f,c
  7907  00142A  2ADF               	incf	indf2,f,c
  7908  00142C                     l2898:
  7909  00142C  5008               	movf	ConvertNumber@number+3,w,c
  7910  00142E  1007               	iorwf	ConvertNumber@number+2,w,c
  7911  001430  1006               	iorwf	ConvertNumber@number+1,w,c
  7912  001432  E1F0               	bnz	l2894
  7913  001434  0E0A               	movlw	10
  7914  001436  5C05               	subwf	ConvertNumber@number,w,c
  7915  001438  E2ED               	bc	l2894
  7916                           
  7917                           ;nextion.h: 20: conv[5] += number;
  7918  00143A  5009               	movf	ConvertNumber@conv,w,c
  7919  00143C  6ED9               	movwf	fsr2l,c
  7920  00143E  6ADA               	clrf	fsr2h,c
  7921  001440  0E05               	movlw	5
  7922  001442  26D9               	addwf	fsr2l,f,c
  7923  001444  5005               	movf	ConvertNumber@number,w,c
  7924  001446  26DF               	addwf	indf2,f,c
  7925  001448  0012               	return		;funcret
  7926  00144A  FFFF               	dw	65535	; errata NOP
  7927  00144C                     __end_of_ConvertNumber:
  7928                           	opt stack 0
  7929                           stkptr	equ	0xFFC
  7930                           tblptru	equ	0xFF8
  7931                           tblptrh	equ	0xFF7
  7932                           tblptrl	equ	0xFF6
  7933                           tablat	equ	0xFF5
  7934                           prodh	equ	0xFF4
  7935                           prodl	equ	0xFF3
  7936                           intcon	equ	0xFF2
  7937                           intcon2	equ	0xFF1
  7938                           postinc0	equ	0xFEE
  7939                           wreg	equ	0xFE8
  7940                           indf2	equ	0xFDF
  7941                           fsr2h	equ	0xFDA
  7942                           fsr2l	equ	0xFD9
  7943                           status	equ	0xFD8
  7944                           
  7945 ;; *************** function _DelayS *****************
  7946 ;; Defined at:
  7947 ;;		line 64 in file "../digital.h"
  7948 ;; Parameters:    Size  Location     Type
  7949 ;;  sec             1    wreg     unsigned char 
  7950 ;; Auto vars:     Size  Location     Type
  7951 ;;  sec             1    6[COMRAM] unsigned char 
  7952 ;; Return value:  Size  Location     Type
  7953 ;;                  1    wreg      void 
  7954 ;; Registers used:
  7955 ;;		wreg, status,2, status,0, prodl, prodh
  7956 ;; Tracked objects:
  7957 ;;		On entry : 0/0
  7958 ;;		On exit  : 0/0
  7959 ;;		Unchanged: 0/0
  7960 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7961 ;;      Params:         0       0       0       0       0       0       0
  7962 ;;      Locals:         1       0       0       0       0       0       0
  7963 ;;      Temps:          2       0       0       0       0       0       0
  7964 ;;      Totals:         3       0       0       0       0       0       0
  7965 ;;Total ram usage:        3 bytes
  7966 ;; Hardware stack levels used:    1
  7967 ;; Hardware stack levels required when called:    3
  7968 ;; This function calls:
  7969 ;;		Nothing
  7970 ;; This function is called by:
  7971 ;;		_main
  7972 ;; This function uses a non-reentrant model
  7973 ;;
  7974                           
  7975                           	psect	text46
  7976  00209E                     __ptext46:
  7977                           	opt stack 0
  7978  00209E                     _DelayS:
  7979                           	opt stack 0
  7980  00209E  FFFF               	dw	65535	; assembler added errata NOP
  7981                           
  7982                           ;incstack = 0
  7983                           ;DelayS@sec stored from wreg
  7984  0020A0  6E07               	movwf	DelayS@sec,c
  7985                           
  7986                           ;digital.h: 66: sec *= 10;
  7987  0020A2  0E0A               	movlw	10
  7988  0020A4  0207               	mulwf	DelayS@sec,c
  7989  0020A6  50F3               	movf	prodl,w,c
  7990  0020A8  6E07               	movwf	DelayS@sec,c
  7991                           
  7992                           ;digital.h: 67: while(sec--)
  7993  0020AA  D00E               	goto	l3612
  7994  0020AC                     l334:
  7995  0020AC  0004               	clrwdt		;# 
  7996                           
  7997                           ;digital.h: 70: _delay((unsigned long)((100)*(40000000/4000.0)));
  7998  0020AE  0E04               	movlw	4
  7999  0020B0  6E06               	movwf	(??_DelayS+1)& (0+255),c
  8000  0020B2  0ECF               	movlw	207
  8001  0020B4  6E05               	movwf	??_DelayS& (0+255),c
  8002  0020B6  0EA5               	movlw	165
  8003  0020B8                     u5477:
  8004  0020B8  FFFF               	dw	65535	; errata NOP
  8005  0020BA  2EE8               	decfsz	wreg,f,c
  8006  0020BC  D7FD               	bra	u5477
  8007  0020BE  2E05               	decfsz	??_DelayS& (0+255),f,c
  8008  0020C0  D7FB               	bra	u5477
  8009  0020C2  2E06               	decfsz	(??_DelayS+1)& (0+255),f,c
  8010  0020C4  D7F9               	bra	u5477
  8011  0020C6  D000               	nop2	
  8012  0020C8                     l3612:
  8013  0020C8  FFFF               	dw	65535	; assembler added errata NOP
  8014  0020CA  0607               	decf	DelayS@sec,f,c
  8015  0020CC  2807               	incf	DelayS@sec,w,c
  8016  0020CE  E1EE               	bnz	l334
  8017  0020D0  0012               	return		;funcret
  8018  0020D2  FFFF               	dw	65535	; errata NOP
  8019  0020D4                     __end_of_DelayS:
  8020                           	opt stack 0
  8021                           stkptr	equ	0xFFC
  8022                           tblptru	equ	0xFF8
  8023                           tblptrh	equ	0xFF7
  8024                           tblptrl	equ	0xFF6
  8025                           tablat	equ	0xFF5
  8026                           prodh	equ	0xFF4
  8027                           prodl	equ	0xFF3
  8028                           intcon	equ	0xFF2
  8029                           intcon2	equ	0xFF1
  8030                           postinc0	equ	0xFEE
  8031                           wreg	equ	0xFE8
  8032                           indf2	equ	0xFDF
  8033                           fsr2h	equ	0xFDA
  8034                           fsr2l	equ	0xFD9
  8035                           status	equ	0xFD8
  8036                           
  8037 ;; *************** function _ADCmeasure *****************
  8038 ;; Defined at:
  8039 ;;		line 14 in file "../adc.h"
  8040 ;; Parameters:    Size  Location     Type
  8041 ;;		None
  8042 ;; Auto vars:     Size  Location     Type
  8043 ;;		None
  8044 ;; Return value:  Size  Location     Type
  8045 ;;                  1    wreg      void 
  8046 ;; Registers used:
  8047 ;;		wreg, status,2, status,0, cstack
  8048 ;; Tracked objects:
  8049 ;;		On entry : 0/0
  8050 ;;		On exit  : 3F/0
  8051 ;;		Unchanged: 0/0
  8052 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8053 ;;      Params:         0       0       0       0       0       0       0
  8054 ;;      Locals:         0       0       0       0       0       0       0
  8055 ;;      Temps:          0       0       0       0       0       0       0
  8056 ;;      Totals:         0       0       0       0       0       0       0
  8057 ;;Total ram usage:        0 bytes
  8058 ;; Hardware stack levels used:    1
  8059 ;; Hardware stack levels required when called:    4
  8060 ;; This function calls:
  8061 ;;		_ADC
  8062 ;; This function is called by:
  8063 ;;		_main
  8064 ;; This function uses a non-reentrant model
  8065 ;;
  8066                           
  8067                           	psect	text47
  8068  0019FC                     __ptext47:
  8069                           	opt stack 0
  8070  0019FC                     _ADCmeasure:
  8071                           	opt stack 0
  8072  0019FC  FFFF               	dw	65535	; assembler added errata NOP
  8073                           
  8074                           ;adc.h: 17: frwd = ADC(1);
  8075                           
  8076                           ;incstack = 0
  8077  0019FE  0E01               	movlw	1
  8078  001A00  EC9B  F010         	call	_ADC
  8079  001A04  C005  F050         	movff	?_ADC,_frwd	;volatile
  8080  001A08  C006  F051         	movff	?_ADC+1,_frwd+1	;volatile
  8081                           
  8082                           ;adc.h: 18: refl = ADC(0);
  8083  001A0C  0E00               	movlw	0
  8084  001A0E  EC9B  F010         	call	_ADC
  8085  001A12  C005  F04E         	movff	?_ADC,_refl	;volatile
  8086  001A16  C006  F04F         	movff	?_ADC+1,_refl+1	;volatile
  8087                           
  8088                           ;adc.h: 19: curr = ADC(4);
  8089  001A1A  0E04               	movlw	4
  8090  001A1C  EC9B  F010         	call	_ADC
  8091  001A20  C005  F04C         	movff	?_ADC,_curr	;volatile
  8092  001A24  C006  F04D         	movff	?_ADC+1,_curr+1	;volatile
  8093                           
  8094                           ;adc.h: 20: volt = ADC(5);
  8095  001A28  0E05               	movlw	5
  8096  001A2A  EC9B  F010         	call	_ADC
  8097  001A2E  C005  F082         	movff	?_ADC,_volt	;volatile
  8098  001A32  C006  F083         	movff	?_ADC+1,_volt+1	;volatile
  8099                           
  8100                           ;adc.h: 22: if (frwd < 10) frwd = 0;
  8101  001A36  5051               	movf	_frwd+1,w,c	;volatile
  8102  001A38  E105               	bnz	l3688
  8103  001A3A  0E0A               	movlw	10
  8104  001A3C  5C50               	subwf	_frwd,w,c	;volatile
  8105  001A3E  E202               	bc	l3688
  8106  001A40  6A50               	clrf	_frwd,c	;volatile
  8107  001A42  6A51               	clrf	_frwd+1,c	;volatile
  8108  001A44                     l3688:
  8109                           
  8110                           ;adc.h: 23: if (refl < 10) refl = 0;
  8111  001A44  504F               	movf	_refl+1,w,c	;volatile
  8112  001A46  E105               	bnz	l3692
  8113  001A48  0E0A               	movlw	10
  8114  001A4A  5C4E               	subwf	_refl,w,c	;volatile
  8115  001A4C  E202               	bc	l3692
  8116  001A4E  6A4E               	clrf	_refl,c	;volatile
  8117  001A50  6A4F               	clrf	_refl+1,c	;volatile
  8118  001A52                     l3692:
  8119                           
  8120                           ;adc.h: 24: if (curr < 10) curr = 0;
  8121  001A52  504D               	movf	_curr+1,w,c	;volatile
  8122  001A54  E105               	bnz	l3696
  8123  001A56  0E0A               	movlw	10
  8124  001A58  5C4C               	subwf	_curr,w,c	;volatile
  8125  001A5A  E202               	bc	l3696
  8126  001A5C  6A4C               	clrf	_curr,c	;volatile
  8127  001A5E  6A4D               	clrf	_curr+1,c	;volatile
  8128  001A60                     l3696:
  8129                           
  8130                           ;adc.h: 25: if (volt < 10) volt = 0;
  8131  001A60  0100               	movlb	0	; () banked
  8132  001A62  5183               	movf	(_volt+1)& (0+255),w,b	;volatile
  8133  001A64  E105               	bnz	l3700
  8134  001A66  0E0A               	movlw	10
  8135  001A68  5D82               	subwf	_volt& (0+255),w,b	;volatile
  8136  001A6A  E202               	bc	l3700
  8137                           
  8138                           ; BSR set to: 0
  8139  001A6C  6B82               	clrf	_volt& (0+255),b	;volatile
  8140  001A6E  6B83               	clrf	(_volt+1)& (0+255),b	;volatile
  8141  001A70                     l3700:
  8142                           
  8143                           ; BSR set to: 0
  8144                           ;adc.h: 27: if (frwd > fpeak) fpeak = frwd;
  8145  001A70  5050               	movf	_frwd,w,c	;volatile
  8146  001A72  5C46               	subwf	_fpeak,w,c	;volatile
  8147  001A74  5051               	movf	_frwd+1,w,c	;volatile
  8148  001A76  5847               	subwfb	_fpeak+1,w,c	;volatile
  8149  001A78  E204               	bc	l3704
  8150                           
  8151                           ; BSR set to: 0
  8152  001A7A  C050  F046         	movff	_frwd,_fpeak	;volatile
  8153  001A7E  C051  F047         	movff	_frwd+1,_fpeak+1	;volatile
  8154  001A82                     l3704:
  8155                           
  8156                           ; BSR set to: 0
  8157                           ;adc.h: 28: if (refl > rpeak) rpeak = refl;
  8158  001A82  504E               	movf	_refl,w,c	;volatile
  8159  001A84  5D7A               	subwf	_rpeak& (0+255),w,b	;volatile
  8160  001A86  504F               	movf	_refl+1,w,c	;volatile
  8161  001A88  597B               	subwfb	(_rpeak+1)& (0+255),w,b	;volatile
  8162  001A8A  E204               	bc	l3708
  8163                           
  8164                           ; BSR set to: 0
  8165  001A8C  C04E  F07A         	movff	_refl,_rpeak	;volatile
  8166  001A90  C04F  F07B         	movff	_refl+1,_rpeak+1	;volatile
  8167  001A94                     l3708:
  8168                           
  8169                           ; BSR set to: 0
  8170                           ;adc.h: 29: if (curr > cpeak) cpeak = curr;
  8171  001A94  504C               	movf	_curr,w,c	;volatile
  8172  001A96  5D78               	subwf	_cpeak& (0+255),w,b	;volatile
  8173  001A98  504D               	movf	_curr+1,w,c	;volatile
  8174  001A9A  5979               	subwfb	(_cpeak+1)& (0+255),w,b	;volatile
  8175  001A9C  E204               	bc	l454
  8176                           
  8177                           ; BSR set to: 0
  8178  001A9E  C04C  F078         	movff	_curr,_cpeak	;volatile
  8179  001AA2  C04D  F079         	movff	_curr+1,_cpeak+1	;volatile
  8180  001AA6                     l454:
  8181                           
  8182                           ; BSR set to: 0
  8183  001AA6  0012               	return		;funcret
  8184  001AA8  FFFF               	dw	65535	; errata NOP
  8185  001AAA                     __end_of_ADCmeasure:
  8186                           	opt stack 0
  8187                           stkptr	equ	0xFFC
  8188                           tblptru	equ	0xFF8
  8189                           tblptrh	equ	0xFF7
  8190                           tblptrl	equ	0xFF6
  8191                           tablat	equ	0xFF5
  8192                           prodh	equ	0xFF4
  8193                           prodl	equ	0xFF3
  8194                           intcon	equ	0xFF2
  8195                           intcon2	equ	0xFF1
  8196                           postinc0	equ	0xFEE
  8197                           wreg	equ	0xFE8
  8198                           indf2	equ	0xFDF
  8199                           fsr2h	equ	0xFDA
  8200                           fsr2l	equ	0xFD9
  8201                           status	equ	0xFD8
  8202                           
  8203 ;; *************** function _ADC *****************
  8204 ;; Defined at:
  8205 ;;		line 3 in file "../adc.h"
  8206 ;; Parameters:    Size  Location     Type
  8207 ;;  ch              1    wreg     unsigned char 
  8208 ;; Auto vars:     Size  Location     Type
  8209 ;;  ch              1    8[COMRAM] unsigned char 
  8210 ;; Return value:  Size  Location     Type
  8211 ;;                  2    4[COMRAM] unsigned int 
  8212 ;; Registers used:
  8213 ;;		wreg, status,2, status,0
  8214 ;; Tracked objects:
  8215 ;;		On entry : 0/0
  8216 ;;		On exit  : 0/0
  8217 ;;		Unchanged: 0/0
  8218 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8219 ;;      Params:         2       0       0       0       0       0       0
  8220 ;;      Locals:         1       0       0       0       0       0       0
  8221 ;;      Temps:          2       0       0       0       0       0       0
  8222 ;;      Totals:         5       0       0       0       0       0       0
  8223 ;;Total ram usage:        5 bytes
  8224 ;; Hardware stack levels used:    1
  8225 ;; Hardware stack levels required when called:    3
  8226 ;; This function calls:
  8227 ;;		Nothing
  8228 ;; This function is called by:
  8229 ;;		_ADCmeasure
  8230 ;;		_SlowControl
  8231 ;; This function uses a non-reentrant model
  8232 ;;
  8233                           
  8234                           	psect	text48
  8235  002136                     __ptext48:
  8236                           	opt stack 0
  8237  002136                     _ADC:
  8238                           	opt stack 0
  8239  002136  FFFF               	dw	65535	; assembler added errata NOP
  8240                           
  8241                           ; BSR set to: 0
  8242                           ;incstack = 0
  8243                           ;ADC@ch stored from wreg
  8244  002138  6E09               	movwf	ADC@ch,c
  8245                           
  8246                           ;adc.h: 5: ADCON0 = 0b10000001 | (ch << 3);
  8247  00213A  3809               	swapf	ADC@ch,w,c
  8248  00213C  42E8               	rrncf	wreg,f,c
  8249  00213E  0BF8               	andlw	248
  8250  002140  0981               	iorlw	129
  8251  002142  6EC2               	movwf	4034,c	;volatile
  8252                           
  8253                           ;adc.h: 7: _delay((unsigned long)((7)*(40000000/4000000.0)));
  8254  002144  0E11               	movlw	17
  8255  002146                     u5487:
  8256  002146  FFFF               	dw	65535	; errata NOP
  8257  002148  2EE8               	decfsz	wreg,f,c
  8258  00214A  D7FD               	bra	u5487
  8259  00214C  D000               	nop2	
  8260                           
  8261                           ;adc.h: 8: ADCON0bits.GODONE = 1;
  8262  00214E  84C2               	bsf	4034,2,c	;volatile
  8263  002150                     l441:
  8264  002150  FFFF               	dw	65535	; assembler added errata NOP
  8265  002152  B4C2               	btfsc	4034,2,c	;volatile
  8266  002154  D7FD               	goto	l441
  8267                           
  8268                           ;adc.h: 11: return (((unsigned int)ADRESH) << 8) | ((unsigned int)ADRESL);
  8269  002156  50C4               	movf	4036,w,c	;volatile
  8270  002158  6E07               	movwf	??_ADC& (0+255),c
  8271  00215A  50C3               	movf	4035,w,c	;volatile
  8272  00215C  6E05               	movwf	?_ADC,c
  8273  00215E  C007  F006         	movff	??_ADC,?_ADC+1
  8274  002162  0012               	return		;funcret
  8275  002164  FFFF               	dw	65535	; errata NOP
  8276  002166                     __end_of_ADC:
  8277                           	opt stack 0
  8278                           stkptr	equ	0xFFC
  8279                           tblptru	equ	0xFF8
  8280                           tblptrh	equ	0xFF7
  8281                           tblptrl	equ	0xFF6
  8282                           tablat	equ	0xFF5
  8283                           prodh	equ	0xFF4
  8284                           prodl	equ	0xFF3
  8285                           intcon	equ	0xFF2
  8286                           intcon2	equ	0xFF1
  8287                           postinc0	equ	0xFEE
  8288                           wreg	equ	0xFE8
  8289                           indf2	equ	0xFDF
  8290                           fsr2h	equ	0xFDA
  8291                           fsr2l	equ	0xFD9
  8292                           status	equ	0xFD8
  8293                           
  8294 ;; *************** function _isr *****************
  8295 ;; Defined at:
  8296 ;;		line 45 in file "../usart.h"
  8297 ;; Parameters:    Size  Location     Type
  8298 ;;		None
  8299 ;; Auto vars:     Size  Location     Type
  8300 ;;  rx              1    3[COMRAM] unsigned char 
  8301 ;; Return value:  Size  Location     Type
  8302 ;;                  1    wreg      void 
  8303 ;; Registers used:
  8304 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  8305 ;; Tracked objects:
  8306 ;;		On entry : 0/0
  8307 ;;		On exit  : 0/0
  8308 ;;		Unchanged: 0/0
  8309 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8310 ;;      Params:         0       0       0       0       0       0       0
  8311 ;;      Locals:         1       0       0       0       0       0       0
  8312 ;;      Temps:          3       0       0       0       0       0       0
  8313 ;;      Totals:         4       0       0       0       0       0       0
  8314 ;;Total ram usage:        4 bytes
  8315 ;; Hardware stack levels used:    1
  8316 ;; Hardware stack levels required when called:    2
  8317 ;; This function calls:
  8318 ;;		_RXstartTIMER
  8319 ;;		_RecieveError
  8320 ;;		i2_RXrestart
  8321 ;;		i2_RXstopTIMER
  8322 ;; This function is called by:
  8323 ;;		Interrupt level 2
  8324 ;; This function uses a non-reentrant model
  8325 ;;
  8326                           
  8327                           	psect	intcode
  8328  000008                     __pintcode:
  8329                           	opt stack 0
  8330  000008                     _isr:
  8331                           	opt stack 0
  8332  000008  FFFF               	dw	65535	; assembler added errata NOP
  8333                           
  8334                           ;incstack = 0
  8335  00000A  8259               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  8336  00000C  CFD9 F002          	movff	fsr2l,??_isr+1
  8337  000010  CFDA F003          	movff	fsr2h,??_isr+2
  8338                           
  8339                           ;usart.h: 47: unsigned char rx;;usart.h: 49: if ((PIR1bits.RCIF) && (PIE1bits.RCIE))
  8340  000014  BA9E               	btfsc	3998,5,c	;volatile
  8341  000016  AA9D               	btfss	3997,5,c	;volatile
  8342  000018  D032               	goto	i2l3982
  8343                           
  8344                           ;usart.h: 50: {;usart.h: 51: RecieveError();
  8345  00001A  EC57  F011         	call	_RecieveError	;wreg free
  8346                           
  8347                           ;usart.h: 52: rx = RCREG;
  8348  00001E  CFAE F004          	movff	4014,isr@rx	;volatile
  8349                           
  8350                           ;usart.h: 54: if (rxb == 0) RXstartTIMER();
  8351  000022  5053               	movf	_rxb,w,c	;volatile
  8352  000024  E102               	bnz	i2l3964
  8353  000026  ECDA  F011         	call	_RXstartTIMER	;wreg free
  8354  00002A                     i2l3964:
  8355                           
  8356                           ;usart.h: 56: buffRX[rxb] = rx;
  8357  00002A  5053               	movf	_rxb,w,c
  8358  00002C  0FCF               	addlw	low _buffRX
  8359  00002E  6ED9               	movwf	fsr2l,c
  8360  000030  6ADA               	clrf	fsr2h,c
  8361  000032  C004  FFDF         	movff	isr@rx,indf2
  8362                           
  8363                           ;usart.h: 58: if (rxb >= 2)
  8364  000036  0E01               	movlw	1
  8365  000038  6453               	cpfsgt	_rxb,c	;volatile
  8366  00003A  D01A               	goto	i2l3978
  8367                           
  8368                           ;usart.h: 59: {;usart.h: 60: if ((buffRX[rxb] == 0xEE) && (buffRX[rxb-1] == 0xEE) && (bu
      +                          ffRX[rxb-2] == 0xEE))
  8369  00003C  5053               	movf	_rxb,w,c
  8370  00003E  0FCF               	addlw	low _buffRX
  8371  000040  6ED9               	movwf	fsr2l,c
  8372  000042  6ADA               	clrf	fsr2h,c
  8373  000044  0EEE               	movlw	238
  8374  000046  18DE               	xorwf	postinc2,w,c
  8375  000048  E113               	bnz	i2l3978
  8376  00004A  5053               	movf	_rxb,w,c
  8377  00004C  0FCE               	addlw	low (_buffRX+255)
  8378  00004E  6ED9               	movwf	fsr2l,c
  8379  000050  6ADA               	clrf	fsr2h,c
  8380  000052  0EEE               	movlw	238
  8381  000054  18DE               	xorwf	postinc2,w,c
  8382  000056  E10C               	bnz	i2l3978
  8383  000058  5053               	movf	_rxb,w,c
  8384  00005A  0FCD               	addlw	low (_buffRX+254)
  8385  00005C  6ED9               	movwf	fsr2l,c
  8386  00005E  6ADA               	clrf	fsr2h,c
  8387  000060  0EEE               	movlw	238
  8388  000062  18DE               	xorwf	postinc2,w,c
  8389  000064  E105               	bnz	i2l3978
  8390                           
  8391                           ;usart.h: 61: {;usart.h: 62: RXstopTIMER();
  8392  000066  ECE7  F011         	call	i2_RXstopTIMER	;wreg free
  8393                           
  8394                           ;usart.h: 63: rx_end = 1;
  8395  00006A  0E01               	movlw	1
  8396  00006C  0100               	movlb	0	; () banked
  8397  00006E  6F86               	movwf	_rx_end& (0+255),b	;volatile
  8398  000070                     i2l3978:
  8399  000070  FFFF               	dw	65535	; assembler added errata NOP
  8400                           
  8401                           ;usart.h: 64: };usart.h: 65: };usart.h: 66: if (++rxb >= 10) RXrestart();
  8402  000072  2A53               	incf	_rxb,f,c	;volatile
  8403  000074  0E09               	movlw	9
  8404  000076  6453               	cpfsgt	_rxb,c	;volatile
  8405  000078  D002               	goto	i2l3982
  8406  00007A  ECF4  F010         	call	i2_RXrestart	;wreg free
  8407  00007E                     i2l3982:
  8408  00007E  FFFF               	dw	65535	; assembler added errata NOP
  8409                           
  8410                           ;usart.h: 67: };usart.h: 69: if ((PIE1bits.TMR2IE) && (PIR1bits.TMR2IF))
  8411  000080  B29D               	btfsc	3997,1,c	;volatile
  8412  000082  A29E               	btfss	3998,1,c	;volatile
  8413  000084  D002               	goto	i2l3988
  8414                           
  8415                           ;usart.h: 70: {;usart.h: 71: RXrestart();
  8416  000086  ECF4  F010         	call	i2_RXrestart	;wreg free
  8417  00008A                     i2l3988:
  8418  00008A  FFFF               	dw	65535	; assembler added errata NOP
  8419                           
  8420                           ;usart.h: 72: };usart.h: 74: if ((PIR1bits.TXIF) && (PIE1bits.TXIE))
  8421  00008C  B89E               	btfsc	3998,4,c	;volatile
  8422  00008E  A89D               	btfss	3997,4,c	;volatile
  8423  000090  D00D               	goto	i2l301
  8424                           
  8425                           ;usart.h: 75: {;usart.h: 76: if (txb <= tx_len) TXREG = buffTX[txb++];
  8426  000092  0100               	movlb	0	; () banked
  8427  000094  5187               	movf	_txb& (0+255),w,b	;volatile
  8428  000096  5C52               	subwf	_tx_len,w,c	;volatile
  8429  000098  E308               	bnc	i2l299
  8430                           
  8431                           ; BSR set to: 0
  8432  00009A  5187               	movf	_txb& (0+255),w,b
  8433  00009C  0F8F               	addlw	low _buffTX
  8434  00009E  6ED9               	movwf	fsr2l,c
  8435  0000A0  6ADA               	clrf	fsr2h,c
  8436  0000A2  50DF               	movf	indf2,w,c
  8437  0000A4  6EAD               	movwf	4013,c	;volatile
  8438                           
  8439                           ; BSR set to: 0
  8440  0000A6  2B87               	incf	_txb& (0+255),f,b	;volatile
  8441  0000A8  D001               	goto	i2l301
  8442  0000AA                     i2l299:
  8443                           
  8444                           ; BSR set to: 0
  8445                           ;usart.h: 77: else PIE1bits.TXIE = 0;
  8446  0000AA  989D               	bcf	3997,4,c	;volatile
  8447  0000AC                     i2l301:
  8448  0000AC  FFFF               	dw	65535	; assembler added errata NOP
  8449  0000AE  C003  FFDA         	movff	??_isr+2,fsr2h
  8450  0000B2  C002  FFD9         	movff	??_isr+1,fsr2l
  8451  0000B6  9259               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  8452  0000B8  0011               	retfie		f
  8453  0000BA  FFFF               	dw	65535	; errata NOP
  8454  0000BC                     __end_of_isr:
  8455                           	opt stack 0
  8456                           stkptr	equ	0xFFC
  8457                           tblptru	equ	0xFF8
  8458                           tblptrh	equ	0xFF7
  8459                           tblptrl	equ	0xFF6
  8460                           tablat	equ	0xFF5
  8461                           prodh	equ	0xFF4
  8462                           prodl	equ	0xFF3
  8463                           intcon	equ	0xFF2
  8464                           intcon2	equ	0xFF1
  8465                           postinc0	equ	0xFEE
  8466                           wreg	equ	0xFE8
  8467                           indf2	equ	0xFDF
  8468                           postinc2	equ	0xFDE
  8469                           fsr2h	equ	0xFDA
  8470                           fsr2l	equ	0xFD9
  8471                           status	equ	0xFD8
  8472                           
  8473 ;; *************** function i2_RXrestart *****************
  8474 ;; Defined at:
  8475 ;;		line 17 in file "../usart.h"
  8476 ;; Parameters:    Size  Location     Type
  8477 ;;		None
  8478 ;; Auto vars:     Size  Location     Type
  8479 ;;		None
  8480 ;; Return value:  Size  Location     Type
  8481 ;;                  1    wreg      void 
  8482 ;; Registers used:
  8483 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  8484 ;; Tracked objects:
  8485 ;;		On entry : 0/0
  8486 ;;		On exit  : 3F/0
  8487 ;;		Unchanged: 0/0
  8488 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8489 ;;      Params:         0       0       0       0       0       0       0
  8490 ;;      Locals:         0       0       0       0       0       0       0
  8491 ;;      Temps:          0       0       0       0       0       0       0
  8492 ;;      Totals:         0       0       0       0       0       0       0
  8493 ;;Total ram usage:        0 bytes
  8494 ;; Hardware stack levels used:    1
  8495 ;; Hardware stack levels required when called:    1
  8496 ;; This function calls:
  8497 ;;		i2_RXstopTIMER
  8498 ;; This function is called by:
  8499 ;;		_isr
  8500 ;; This function uses a non-reentrant model
  8501 ;;
  8502                           
  8503                           	psect	text50
  8504  0021E8                     __ptext50:
  8505                           	opt stack 0
  8506  0021E8                     i2_RXrestart:
  8507                           	opt stack 0
  8508  0021E8  FFFF               	dw	65535	; assembler added errata NOP
  8509                           
  8510                           ;usart.h: 19: RXstopTIMER();
  8511                           
  8512                           ;incstack = 0
  8513  0021EA  ECE7  F011         	call	i2_RXstopTIMER	;wreg free
  8514                           
  8515                           ;usart.h: 20: for (rxb = 0; rxb < (10-1); rxb++) buffRX[rxb] = 0x00;
  8516  0021EE  6A53               	clrf	_rxb,c	;volatile
  8517  0021F0  D007               	goto	i2l3950
  8518  0021F2                     i2l3946:
  8519  0021F2  FFFF               	dw	65535	; assembler added errata NOP
  8520  0021F4  5053               	movf	_rxb,w,c
  8521  0021F6  0FCF               	addlw	low _buffRX
  8522  0021F8  6ED9               	movwf	fsr2l,c
  8523  0021FA  6ADA               	clrf	fsr2h,c
  8524  0021FC  6ADF               	clrf	indf2,c
  8525  0021FE  2A53               	incf	_rxb,f,c	;volatile
  8526  002200                     i2l3950:
  8527  002200  FFFF               	dw	65535	; assembler added errata NOP
  8528  002202  0E08               	movlw	8
  8529  002204  6453               	cpfsgt	_rxb,c	;volatile
  8530  002206  D7F5               	goto	i2l3946
  8531                           
  8532                           ;usart.h: 21: rx_end = 0; rxb = 0;
  8533  002208  0100               	movlb	0	; () banked
  8534  00220A  6B86               	clrf	_rx_end& (0+255),b	;volatile
  8535  00220C  6A53               	clrf	_rxb,c	;volatile
  8536                           
  8537                           ; BSR set to: 0
  8538  00220E  0012               	return		;funcret
  8539  002210  FFFF               	dw	65535	; errata NOP
  8540  002212                     __end_ofi2_RXrestart:
  8541                           	opt stack 0
  8542                           stkptr	equ	0xFFC
  8543                           tblptru	equ	0xFF8
  8544                           tblptrh	equ	0xFF7
  8545                           tblptrl	equ	0xFF6
  8546                           tablat	equ	0xFF5
  8547                           prodh	equ	0xFF4
  8548                           prodl	equ	0xFF3
  8549                           intcon	equ	0xFF2
  8550                           intcon2	equ	0xFF1
  8551                           postinc0	equ	0xFEE
  8552                           wreg	equ	0xFE8
  8553                           indf2	equ	0xFDF
  8554                           postinc2	equ	0xFDE
  8555                           fsr2h	equ	0xFDA
  8556                           fsr2l	equ	0xFD9
  8557                           status	equ	0xFD8
  8558                           
  8559 ;; *************** function i2_RXstopTIMER *****************
  8560 ;; Defined at:
  8561 ;;		line 10 in file "../usart.h"
  8562 ;; Parameters:    Size  Location     Type
  8563 ;;		None
  8564 ;; Auto vars:     Size  Location     Type
  8565 ;;		None
  8566 ;; Return value:  Size  Location     Type
  8567 ;;                  1    wreg      void 
  8568 ;; Registers used:
  8569 ;;		None
  8570 ;; Tracked objects:
  8571 ;;		On entry : 0/0
  8572 ;;		On exit  : 0/0
  8573 ;;		Unchanged: 0/0
  8574 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8575 ;;      Params:         0       0       0       0       0       0       0
  8576 ;;      Locals:         0       0       0       0       0       0       0
  8577 ;;      Temps:          0       0       0       0       0       0       0
  8578 ;;      Totals:         0       0       0       0       0       0       0
  8579 ;;Total ram usage:        0 bytes
  8580 ;; Hardware stack levels used:    1
  8581 ;; This function calls:
  8582 ;;		Nothing
  8583 ;; This function is called by:
  8584 ;;		_isr
  8585 ;;		i2_RXrestart
  8586 ;; This function uses a non-reentrant model
  8587 ;;
  8588                           
  8589                           	psect	text51
  8590  0023CE                     __ptext51:
  8591                           	opt stack 0
  8592  0023CE                     i2_RXstopTIMER:
  8593                           	opt stack 0
  8594  0023CE  FFFF               	dw	65535	; assembler added errata NOP
  8595                           
  8596                           ;usart.h: 12: T2CON = 0;
  8597                           
  8598                           ; BSR set to: 0
  8599                           ;incstack = 0
  8600  0023D0  6ACA               	clrf	4042,c	;volatile
  8601                           
  8602                           ;usart.h: 13: PIE1bits.TMR2IE = 0;
  8603  0023D2  929D               	bcf	3997,1,c	;volatile
  8604  0023D4  0012               	return		;funcret
  8605  0023D6  FFFF               	dw	65535	; errata NOP
  8606  0023D8                     __end_ofi2_RXstopTIMER:
  8607                           	opt stack 0
  8608                           stkptr	equ	0xFFC
  8609                           tblptru	equ	0xFF8
  8610                           tblptrh	equ	0xFF7
  8611                           tblptrl	equ	0xFF6
  8612                           tablat	equ	0xFF5
  8613                           prodh	equ	0xFF4
  8614                           prodl	equ	0xFF3
  8615                           intcon	equ	0xFF2
  8616                           intcon2	equ	0xFF1
  8617                           postinc0	equ	0xFEE
  8618                           wreg	equ	0xFE8
  8619                           indf2	equ	0xFDF
  8620                           postinc2	equ	0xFDE
  8621                           fsr2h	equ	0xFDA
  8622                           fsr2l	equ	0xFD9
  8623                           status	equ	0xFD8
  8624                           
  8625 ;; *************** function _RecieveError *****************
  8626 ;; Defined at:
  8627 ;;		line 25 in file "../usart.h"
  8628 ;; Parameters:    Size  Location     Type
  8629 ;;		None
  8630 ;; Auto vars:     Size  Location     Type
  8631 ;;		None
  8632 ;; Return value:  Size  Location     Type
  8633 ;;                  1    wreg      void 
  8634 ;; Registers used:
  8635 ;;		None
  8636 ;; Tracked objects:
  8637 ;;		On entry : 0/0
  8638 ;;		On exit  : 0/0
  8639 ;;		Unchanged: 0/0
  8640 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8641 ;;      Params:         0       0       0       0       0       0       0
  8642 ;;      Locals:         0       0       0       0       0       0       0
  8643 ;;      Temps:          0       0       0       0       0       0       0
  8644 ;;      Totals:         0       0       0       0       0       0       0
  8645 ;;Total ram usage:        0 bytes
  8646 ;; Hardware stack levels used:    1
  8647 ;; This function calls:
  8648 ;;		Nothing
  8649 ;; This function is called by:
  8650 ;;		_isr
  8651 ;; This function uses a non-reentrant model
  8652 ;;
  8653                           
  8654                           	psect	text52
  8655  0022AE                     __ptext52:
  8656                           	opt stack 0
  8657  0022AE                     _RecieveError:
  8658                           	opt stack 0
  8659  0022AE  FFFF               	dw	65535	; assembler added errata NOP
  8660                           
  8661                           ;usart.h: 28: if (RCSTAbits.OERR)
  8662                           
  8663                           ;incstack = 0
  8664  0022B0  A2AB               	btfss	4011,1,c	;volatile
  8665  0022B2  D002               	goto	i2l285
  8666                           
  8667                           ;usart.h: 29: {;usart.h: 30: RCSTAbits.CREN = 0;
  8668  0022B4  98AB               	bcf	4011,4,c	;volatile
  8669                           
  8670                           ;usart.h: 31: RCSTAbits.CREN = 1;
  8671  0022B6  88AB               	bsf	4011,4,c	;volatile
  8672  0022B8                     i2l285:
  8673  0022B8  FFFF               	dw	65535	; assembler added errata NOP
  8674                           
  8675                           ;usart.h: 32: };usart.h: 34: if (RCSTAbits.FERR)
  8676  0022BA  A4AB               	btfss	4011,2,c	;volatile
  8677  0022BC  D006               	goto	i2l287
  8678                           
  8679                           ;usart.h: 35: {;usart.h: 36: RCREG = RCREG;
  8680  0022BE  CFAE FFAE          	movff	4014,4014	;volatile
  8681                           
  8682                           ;usart.h: 37: RCREG = RCREG;
  8683  0022C2  CFAE FFAE          	movff	4014,4014	;volatile
  8684                           
  8685                           ;usart.h: 38: RCREG = RCREG;
  8686  0022C6  CFAE FFAE          	movff	4014,4014	;volatile
  8687  0022CA                     i2l287:
  8688  0022CA  FFFF               	dw	65535	; assembler added errata NOP
  8689  0022CC  0012               	return		;funcret
  8690  0022CE  FFFF               	dw	65535	; errata NOP
  8691  0022D0                     __end_of_RecieveError:
  8692                           	opt stack 0
  8693                           stkptr	equ	0xFFC
  8694                           tblptru	equ	0xFF8
  8695                           tblptrh	equ	0xFF7
  8696                           tblptrl	equ	0xFF6
  8697                           tablat	equ	0xFF5
  8698                           prodh	equ	0xFF4
  8699                           prodl	equ	0xFF3
  8700                           intcon	equ	0xFF2
  8701                           intcon2	equ	0xFF1
  8702                           postinc0	equ	0xFEE
  8703                           wreg	equ	0xFE8
  8704                           indf2	equ	0xFDF
  8705                           postinc2	equ	0xFDE
  8706                           fsr2h	equ	0xFDA
  8707                           fsr2l	equ	0xFD9
  8708                           status	equ	0xFD8
  8709                           
  8710 ;; *************** function _RXstartTIMER *****************
  8711 ;; Defined at:
  8712 ;;		line 2 in file "../usart.h"
  8713 ;; Parameters:    Size  Location     Type
  8714 ;;		None
  8715 ;; Auto vars:     Size  Location     Type
  8716 ;;		None
  8717 ;; Return value:  Size  Location     Type
  8718 ;;                  1    wreg      void 
  8719 ;; Registers used:
  8720 ;;		wreg, status,2
  8721 ;; Tracked objects:
  8722 ;;		On entry : 0/0
  8723 ;;		On exit  : 0/0
  8724 ;;		Unchanged: 0/0
  8725 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8726 ;;      Params:         0       0       0       0       0       0       0
  8727 ;;      Locals:         0       0       0       0       0       0       0
  8728 ;;      Temps:          0       0       0       0       0       0       0
  8729 ;;      Totals:         0       0       0       0       0       0       0
  8730 ;;Total ram usage:        0 bytes
  8731 ;; Hardware stack levels used:    1
  8732 ;; This function calls:
  8733 ;;		Nothing
  8734 ;; This function is called by:
  8735 ;;		_isr
  8736 ;; This function uses a non-reentrant model
  8737 ;;
  8738                           
  8739                           	psect	text53
  8740  0023B4                     __ptext53:
  8741                           	opt stack 0
  8742  0023B4                     _RXstartTIMER:
  8743                           	opt stack 0
  8744  0023B4  FFFF               	dw	65535	; assembler added errata NOP
  8745                           
  8746                           ;usart.h: 4: TMR2 = 0;
  8747                           
  8748                           ;incstack = 0
  8749  0023B6  6ACC               	clrf	4044,c	;volatile
  8750                           
  8751                           ;usart.h: 5: T2CON = 0b01111111;
  8752  0023B8  0E7F               	movlw	127
  8753  0023BA  6ECA               	movwf	4042,c	;volatile
  8754                           
  8755                           ;usart.h: 6: PIR1bits.TMR2IF = 0;
  8756  0023BC  929E               	bcf	3998,1,c	;volatile
  8757                           
  8758                           ;usart.h: 7: PIE1bits.TMR2IE = 1;
  8759  0023BE  829D               	bsf	3997,1,c	;volatile
  8760  0023C0  0C7F               	retlw	127	;funcret
  8761  0023C2  FFFF               	dw	65535	; errata NOP
  8762  0023C4                     __end_of_RXstartTIMER:
  8763                           	opt stack 0
  8764                           stkptr	equ	0xFFC
  8765                           tblptru	equ	0xFF8
  8766                           tblptrh	equ	0xFF7
  8767                           tblptrl	equ	0xFF6
  8768                           tablat	equ	0xFF5
  8769                           prodh	equ	0xFF4
  8770                           prodl	equ	0xFF3
  8771                           intcon	equ	0xFF2
  8772                           intcon2	equ	0xFF1
  8773                           postinc0	equ	0xFEE
  8774                           wreg	equ	0xFE8
  8775                           indf2	equ	0xFDF
  8776                           postinc2	equ	0xFDE
  8777                           fsr2h	equ	0xFDA
  8778                           fsr2l	equ	0xFD9
  8779                           status	equ	0xFD8
  8780                           stkptr	equ	0xFFC
  8781                           tblptru	equ	0xFF8
  8782                           tblptrh	equ	0xFF7
  8783                           tblptrl	equ	0xFF6
  8784                           tablat	equ	0xFF5
  8785                           prodh	equ	0xFF4
  8786                           prodl	equ	0xFF3
  8787                           intcon	equ	0xFF2
  8788                           intcon2	equ	0xFF1
  8789                           postinc0	equ	0xFEE
  8790                           wreg	equ	0xFE8
  8791                           indf2	equ	0xFDF
  8792                           postinc2	equ	0xFDE
  8793                           fsr2h	equ	0xFDA
  8794                           fsr2l	equ	0xFD9
  8795                           status	equ	0xFD8
  8796                           
  8797                           	psect	rparam
  8798  0000                     stkptr	equ	0xFFC
  8799                           tblptru	equ	0xFF8
  8800                           tblptrh	equ	0xFF7
  8801                           tblptrl	equ	0xFF6
  8802                           tablat	equ	0xFF5
  8803                           prodh	equ	0xFF4
  8804                           prodl	equ	0xFF3
  8805                           intcon	equ	0xFF2
  8806                           intcon2	equ	0xFF1
  8807                           postinc0	equ	0xFEE
  8808                           wreg	equ	0xFE8
  8809                           indf2	equ	0xFDF
  8810                           postinc2	equ	0xFDE
  8811                           fsr2h	equ	0xFDA
  8812                           fsr2l	equ	0xFD9
  8813                           status	equ	0xFD8
  8814                           
  8815                           	psect	temp
  8816  000059                     btemp:
  8817                           	opt stack 0
  8818  000059                     	ds	1
  8819  0000                     int$flags	set	btemp
  8820  0000                     wtemp8	set	btemp+1
  8821  0000                     ttemp5	set	btemp+1
  8822  0000                     ttemp6	set	btemp+4
  8823  0000                     ttemp7	set	btemp+8
  8824                           stkptr	equ	0xFFC
  8825                           tblptru	equ	0xFF8
  8826                           tblptrh	equ	0xFF7
  8827                           tblptrl	equ	0xFF6
  8828                           tablat	equ	0xFF5
  8829                           prodh	equ	0xFF4
  8830                           prodl	equ	0xFF3
  8831                           intcon	equ	0xFF2
  8832                           intcon2	equ	0xFF1
  8833                           postinc0	equ	0xFEE
  8834                           wreg	equ	0xFE8
  8835                           indf2	equ	0xFDF
  8836                           postinc2	equ	0xFDE
  8837                           fsr2h	equ	0xFDA
  8838                           fsr2l	equ	0xFD9
  8839                           status	equ	0xFD8


Data Sizes:
    Strings     135
    Constant    0
    Data        1
    BSS         138
    Persistent  31
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     69      88
    BANK0           160      6     157
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0

Pointer List with Targets:

    CreateBuffTX@str	PTR const unsigned char  size(1) Largest target is 12
		 -> STR_26(CODE[8]), STR_25(CODE[12]), STR_24(CODE[10]), STR_23(CODE[10]), 
		 -> STR_22(CODE[4]), STR_21(CODE[4]), STR_20(CODE[4]), STR_19(CODE[5]), 
		 -> STR_18(CODE[4]), STR_17(CODE[4]), STR_16(CODE[5]), STR_15(CODE[5]), 
		 -> STR_14(CODE[4]), STR_13(CODE[4]), STR_12(CODE[4]), STR_11(CODE[4]), 
		 -> STR_10(CODE[4]), STR_9(CODE[4]), STR_8(CODE[5]), STR_7(CODE[5]), 
		 -> STR_6(CODE[5]), STR_5(CODE[5]), STR_4(CODE[4]), STR_3(CODE[4]), 
		 -> STR_2(CODE[4]), STR_1(CODE[4]), 

    ConvertNumber@conv	PTR unsigned char  size(1) Largest target is 64
		 -> buffTX(BANK0[64]), 

    writeEEPROM16@data	PTR unsigned char  size(1) Largest target is 10
		 -> buffRX(BANK0[10]), 


Critical Paths under _main in COMRAM

    _main->_EEsetupRead
    _SlowControl->_ADC
    _SendStatusToLCD->_CreateBuffTX
    _ReadStatusFromLCD->_EEsetupRead
    _SetupMode->_LCDpageSelect
    _writeEEPROM16->_writeEEPROM
    _LCDpageSelect->_CreateBuffTX
    _EEsetupRead->___fttol
    _sqrt->___ftsub
    ___ftsub->___ftadd
    ___ftadd->___ftpack
    ___ftmul->___ftpack
    _readEEPROM16->_readEEPROM
    ___lltoft->___ftpack
    ___fttol->_sqrt
    _EEmbandRead->_readEEPROM
    _Beep->_DelayMs
    _PTT_ON->_FreqMeasure
    _FreqMeasure->___ftge
    _fabs->___lwtoft
    ___lwtoft->___ftpack
    ___ftge->_fabs
    _BandDecode->_SetBand
    _PTT_OFF->_DelayMs
    _LCDversionSend->_CreateBuffTX
    _SendUSART->_DelayMs
    _CreateBuffTX->___lwdiv
    _ADCmeasure->_ADC

Critical Paths under _isr in COMRAM

    None.

Critical Paths under _main in BANK0

    _main->_EEsetupRead
    _ReadStatusFromLCD->_EEsetupRead

Critical Paths under _isr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _isr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _isr in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _isr in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _isr in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _isr in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0   69069
                         _ADCmeasure
                      _AntennaSelect
                               _Beep
                             _DelayS
                        _EEmbandRead
                        _EEsetupRead
                      _LCDpageSelect
                     _LCDversionSend
                       _ProtectCheck
                  _ReadStatusFromLCD
                    _SendStatusToLCD
                            _SetBand
                        _SlowControl
 ---------------------------------------------------------------------------------
 (1) _SlowControl                                          6     6      0      22
                                              9 COMRAM     6     6      0
                                _ADC
                         _FanControl
                     _PttHoldControl
 ---------------------------------------------------------------------------------
 (2) _PttHoldControl                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _FanControl                                           2     2      0       0
                                              4 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) _SendStatusToLCD                                     12    12      0    4593
                                             17 COMRAM    12    12      0
                       _CreateBuffTX
                          _Tramsmitt
 ---------------------------------------------------------------------------------
 (2) _Tramsmitt                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ReadStatusFromLCD                                    0     0      0   33913
                      _AntennaSelect
                               _Beep
                        _EEmbandRead
                        _EEsetupRead
                      _LCDpageSelect
                            _PTT_OFF
                          _RXrestart
                            _SetBand
                          _SetupMode
                        _writeEEPROM
 ---------------------------------------------------------------------------------
 (2) _SetupMode                                           17    17      0   12001
                                             19 COMRAM    17    17      0
                       _CreateBuffTX
                      _LCDpageSelect
                          _RXrestart
                          _SendUSART
                          _SwitchOFF
                            ___lldiv
                            ___lwdiv
                        _writeEEPROM
                      _writeEEPROM16
 ---------------------------------------------------------------------------------
 (3) _writeEEPROM16                                        3     0      3     915
                                              7 COMRAM     3     0      3
                        _writeEEPROM
 ---------------------------------------------------------------------------------
 (2) _writeEEPROM                                          3     2      1     675
                                              4 COMRAM     3     2      1
 ---------------------------------------------------------------------------------
 (3) ___lwdiv                                              7     3      4     314
                                              4 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (3) ___lldiv                                             13     5      8     618
                                              4 COMRAM    13     5      8
 ---------------------------------------------------------------------------------
 (3) _LCDpageSelect                                        2     2      0    4750
                                             17 COMRAM     2     2      0
                       _CreateBuffTX
                          _SendUSART
                     _waitAckFromLCD
 ---------------------------------------------------------------------------------
 (4) _waitAckFromLCD                                       1     1      0      24
                                              4 COMRAM     1     1      0
                          _RXrestart
 ---------------------------------------------------------------------------------
 (3) _RXrestart                                            0     0      0       0
                        _RXstopTIMER
 ---------------------------------------------------------------------------------
 (4) _RXstopTIMER                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _EEsetupRead                                         14    14      0   16213
                                             61 COMRAM     8     8      0
                                              0 BANK0      6     6      0
                            ___fttol
                           ___lltoft
                         _readEEPROM
                       _readEEPROM16
                               _sqrt
 ---------------------------------------------------------------------------------
 (3) _sqrt                                                19    16      3   11627
                                             30 COMRAM    16    13      3
                             ___ftge
                            ___ftmul
                            ___ftsub
                           ___lltoft (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftsub                                              6     0      6    5274
                                             24 COMRAM     6     0      6
                            ___ftadd
 ---------------------------------------------------------------------------------
 (5) ___ftadd                                             12     6      6    4858
                                             12 COMRAM    12     6      6
                           ___ftpack
 ---------------------------------------------------------------------------------
 (4) ___ftmul                                             15     9      6    4986
                                             12 COMRAM    14     8      6
                           ___ftpack
 ---------------------------------------------------------------------------------
 (3) _readEEPROM16                                         8     6      2     127
                                              5 COMRAM     8     6      2
                         _readEEPROM
 ---------------------------------------------------------------------------------
 (3) ___lltoft                                             9     5      4    3685
                                             12 COMRAM     9     5      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (3) ___fttol                                             15    11      4     641
                                             46 COMRAM    15    11      4
                           ___lltoft (ARG)
                               _sqrt (ARG)
 ---------------------------------------------------------------------------------
 (2) _EEmbandRead                                          0     0      0      31
                         _readEEPROM
 ---------------------------------------------------------------------------------
 (4) _readEEPROM                                           1     1      0      31
                                              4 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _Beep                                                 0     0      0      22
                            _DelayMs
 ---------------------------------------------------------------------------------
 (2) _AntennaSelect                                        1     1      0      22
                                              4 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _ProtectCheck                                         0     0      0    4643
                           _PTT_read
                          _SwitchOFF
 ---------------------------------------------------------------------------------
 (3) _SwitchOFF                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PTT_read                                             0     0      0    4643
                            _PTT_OFF
                             _PTT_ON
 ---------------------------------------------------------------------------------
 (3) _PTT_ON                                               0     0      0    4621
                            _DelayMs
                        _FreqMeasure
 ---------------------------------------------------------------------------------
 (4) _FreqMeasure                                          4     4      0    4599
                                             27 COMRAM     4     4      0
                         _BandDecode
                             ___ftge
                           ___lwtoft
                               _fabs
 ---------------------------------------------------------------------------------
 (5) _fabs                                                 3     0      3     263
                                             15 COMRAM     3     0      3
                            ___ftneg
                           ___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (6) ___ftneg                                              3     0      3     121
                                              4 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (5) ___lwtoft                                             3     0      3    3434
                                             12 COMRAM     3     0      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (6) ___ftpack                                             8     3      5    3313
                                              4 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 (4) ___ftge                                               9     3      6     558
                                             18 COMRAM     9     3      6
                           ___lwtoft (ARG)
                               _fabs (ARG)
 ---------------------------------------------------------------------------------
 (5) _BandDecode                                           0     0      0     177
                            _SetBand
 ---------------------------------------------------------------------------------
 (1) _SetBand                                              1     1      0     177
                                              4 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _PTT_OFF                                              0     0      0      22
                            _DelayMs
 ---------------------------------------------------------------------------------
 (1) _LCDversionSend                                       1     1      0    4638
                                             17 COMRAM     1     1      0
                       _CreateBuffTX
                          _SendUSART
 ---------------------------------------------------------------------------------
 (3) _SendUSART                                            0     0      0      22
                            _DelayMs
 ---------------------------------------------------------------------------------
 (4) _DelayMs                                              2     2      0      22
                                              4 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (2) _CreateBuffTX                                         6     1      5    4593
                                             11 COMRAM     6     1      5
                      _ConvertNumber
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (3) _ConvertNumber                                        5     0      5     553
                                              4 COMRAM     5     0      5
 ---------------------------------------------------------------------------------
 (1) _DelayS                                               3     3      0      23
                                              4 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (1) _ADCmeasure                                           0     0      0      22
                                _ADC
 ---------------------------------------------------------------------------------
 (2) _ADC                                                  5     3      2      22
                                              4 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _isr                                                  4     4      0      23
                                              0 COMRAM     4     4      0
                       _RXstartTIMER
                       _RecieveError
                        i2_RXrestart
                      i2_RXstopTIMER
 ---------------------------------------------------------------------------------
 (8) i2_RXrestart                                          0     0      0       0
                      i2_RXstopTIMER
 ---------------------------------------------------------------------------------
 (8) i2_RXstopTIMER                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (8) _RecieveError                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (8) _RXstartTIMER                                         0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ADCmeasure
     _ADC
   _AntennaSelect
   _Beep
     _DelayMs
   _DelayS
   _EEmbandRead
     _readEEPROM
   _EEsetupRead
     ___fttol
       ___lltoft (ARG)
         ___ftpack
       _sqrt (ARG)
         ___ftge
           ___lwtoft (ARG)
             ___ftpack
           _fabs (ARG)
             ___ftneg
             ___lwtoft (ARG)
               ___ftpack
         ___ftmul
           ___ftpack
         ___ftsub
           ___ftadd
             ___ftpack
         ___lltoft (ARG)
           ___ftpack
     ___lltoft
       ___ftpack
     _readEEPROM
     _readEEPROM16
       _readEEPROM
     _sqrt
       ___ftge
         ___lwtoft (ARG)
           ___ftpack
         _fabs (ARG)
           ___ftneg
           ___lwtoft (ARG)
             ___ftpack
       ___ftmul
         ___ftpack
       ___ftsub
         ___ftadd
           ___ftpack
       ___lltoft (ARG)
         ___ftpack
   _LCDpageSelect
     _CreateBuffTX
       _ConvertNumber
       ___lwdiv (ARG)
     _SendUSART
       _DelayMs
     _waitAckFromLCD
       _RXrestart
         _RXstopTIMER
   _LCDversionSend
     _CreateBuffTX
       _ConvertNumber
       ___lwdiv (ARG)
     _SendUSART
       _DelayMs
   _ProtectCheck
     _PTT_read
       _PTT_OFF
         _DelayMs
       _PTT_ON
         _DelayMs
         _FreqMeasure
           _BandDecode
             _SetBand
           ___ftge
             ___lwtoft (ARG)
               ___ftpack
             _fabs (ARG)
               ___ftneg
               ___lwtoft (ARG)
                 ___ftpack
           ___lwtoft
             ___ftpack
           _fabs
             ___ftneg
             ___lwtoft (ARG)
               ___ftpack
     _SwitchOFF
   _ReadStatusFromLCD
     _AntennaSelect
     _Beep
       _DelayMs
     _EEmbandRead
       _readEEPROM
     _EEsetupRead
       ___fttol
         ___lltoft (ARG)
           ___ftpack
         _sqrt (ARG)
           ___ftge
             ___lwtoft (ARG)
               ___ftpack
             _fabs (ARG)
               ___ftneg
               ___lwtoft (ARG)
                 ___ftpack
           ___ftmul
             ___ftpack
           ___ftsub
             ___ftadd
               ___ftpack
           ___lltoft (ARG)
             ___ftpack
       ___lltoft
         ___ftpack
       _readEEPROM
       _readEEPROM16
         _readEEPROM
       _sqrt
         ___ftge
           ___lwtoft (ARG)
             ___ftpack
           _fabs (ARG)
             ___ftneg
             ___lwtoft (ARG)
               ___ftpack
         ___ftmul
           ___ftpack
         ___ftsub
           ___ftadd
             ___ftpack
         ___lltoft (ARG)
           ___ftpack
     _LCDpageSelect
       _CreateBuffTX
         _ConvertNumber
         ___lwdiv (ARG)
       _SendUSART
         _DelayMs
       _waitAckFromLCD
         _RXrestart
           _RXstopTIMER
     _PTT_OFF
       _DelayMs
     _RXrestart
       _RXstopTIMER
     _SetBand
     _SetupMode
       _CreateBuffTX
         _ConvertNumber
         ___lwdiv (ARG)
       _LCDpageSelect
         _CreateBuffTX
           _ConvertNumber
           ___lwdiv (ARG)
         _SendUSART
           _DelayMs
         _waitAckFromLCD
           _RXrestart
             _RXstopTIMER
       _RXrestart
         _RXstopTIMER
       _SendUSART
         _DelayMs
       _SwitchOFF
       ___lldiv
       ___lwdiv
       _writeEEPROM
       _writeEEPROM16
         _writeEEPROM
     _writeEEPROM
   _SendStatusToLCD
     _CreateBuffTX
       _ConvertNumber
       ___lwdiv (ARG)
     _Tramsmitt
   _SetBand
   _SlowControl
     _ADC
     _FanControl
     _PttHoldControl

 _isr (ROOT)
   _RXstartTIMER
   _RecieveError
   i2_RXrestart
     i2_RXstopTIMER
   i2_RXstopTIMER

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5FF      0       0      16        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       7        0.0%
BANK2              100      0       0       8        0.0%
BITBANK1           100      0       0       5        0.0%
BANK1              100      0       0       6        0.0%
BITBANK0            A0      0       0       3        0.0%
BANK0               A0      6      9D       4       98.1%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     45      58       1       93.6%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      F5       9        0.0%
DATA                 0      0      F5      17        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.00 build -1524193055 
Symbol Table                                                                                   Fri Mar 08 13:00:36 2024

                                                     _BandDecode 1AAA  
                                                    __CFG_BOR$ON 000000  
                                                   __CFG_CP0$OFF 000000  
                                                   __CFG_CP1$OFF 000000  
                                                   __CFG_CP2$OFF 000000  
                                                   __CFG_CP3$OFF 000000  
                                                   ___ftadd@exp1 0018  
                                                   ___ftadd@exp2 0017  
                                                  ??_FreqMeasure 001C  
                                                   ___ftadd@sign 0016  
                                                    __CFG_WDT$ON 000000  
                                                            l320 194E  
                                                            l410 212A  
                                                            l323 1964  
                                                            l340 228E  
                                                            l501 0E98  
                                                            l334 20AC  
                                                            l422 149C  
                                                            l406 2130  
                                                            l319 19EE  
                                                            l431 152C  
                                                            _ADC 2136  
                                                            l256 208E  
                                                            l441 2150  
                                                            l329 19F6  
                                                            l353 2190  
                                                            l257 208A  
                                                            l370 1D18  
                                                            l434 1504  
                                                            l346 2306  
                                                            l363 2320  
                                                            l380 1D5E  
                                                            l372 1D26  
                                                            l524 160E  
                                                            l460 1788  
                                                            l429 1520  
                                                            l509 0F36  
                                                            l454 1AA6  
                                                            l382 1D6C  
                                                            l374 1D34  
                                                            l543 2334  
                                                            l359 2372  
                                                            l551 0A1C  
                                                            l544 2330  
                                                            l376 1D42  
                                                            l384 1D70  
                                                            l624 1CE2  
                                                            l378 1D50  
                                                            l562 1F28  
                                                            l394 1DEC  
                                                            l458 17B8  
                                                            l387 2384  
                                                            l492 0DBC  
                                                            l389 2388  
                                                            l399 1DE8  
                                                            l904 11AC  
                                                            l576 1E58  
                                                            l499 103A  
                                                            l950 16E8  
                                                            l927 114C  
                                                            l944 1EBA  
                                                            l952 16BA  
                                                            l928 1160  
                                                            l955 22DE  
                                                            l869 1BDA  
                                                            l966 1884  
                                                   __CFG_CPB$OFF 000000  
                                                   __CFG_CPD$OFF 000000  
                                                            _fan 008D  
                                                            _ant 00F2  
                                                            _lcd 0055  
                                                            _med 008C  
                                                            _err 0054  
                                                            _isr 0008  
                                                            _tmp 0060  
                                                            _rxb 0053  
                                                            _ptt 0056  
                                                            _txb 0087  
                                                   __CFG_BORV$27 000000  
                                                            wreg 000FE8  
                                                     _FanControl 1D76  
                                               CreateBuffTX@data 000D  
                                                           ?_ADC 0005  
                                                   __CFG_LVP$OFF 000000  
                                               ??_LCDversionSend 0012  
                                                           l1220 1308  
                                                           l1071 1F08  
                                                           l1218 11D4  
                                                           l1265 2054  
                                                           l1266 2062  
                                                           l3114 1F50  
                                                           l3116 1F56  
                                                           l3062 1BE6  
                                                           l4102 1BCE  
                                                           l4120 10B4  
                                                           l3240 1E12  
                                                           l3066 1C02  
                                                           l4114 108E  
                                                           l3244 1E28  
                                                           l3236 1DFC  
                                                           l3340 1ED2  
                                                           l3078 1C50  
                                                           l4230 19CC  
                                                           l4142 10F0  
                                                           l4310 1214  
                                                           l3270 1C9E  
                                                           l3342 1EDC  
                                                           l4080 1B7E  
                                                           l4144 10FC  
                                                           l2800 219E  
                                                           l3248 1E3E  
                                                           l3256 1E4E  
                                                           l3280 1CD4  
                                                           l3352 1EFE  
                                                           l2730 1D1A  
                                                           l4226 19BA  
                                                           l4250 1630  
                                                           l4154 112A  
                                                           l4146 1104  
                                                           l3442 1DD4  
                                                           l3700 1A70  
                                                           l3612 20C8  
                                                           l2812 1AC4  
                                                           l4084 1B92  
                                                           l4076 1B5E  
                                                           l4340 2186  
                                                           l4156 1134  
                                                           l2804 21AC  
                                                           l3268 1C90  
                                                           l3428 1DA0  
                                                           l3460 2120  
                                                           l2750 1D60  
                                                           l2742 1D44  
                                                           l2734 1D28  
                                                           l2726 1D10  
                                                           l2830 1B0C  
                                                           l4174 1E7E  
                                                           l4086 1BA4  
                                                           l4078 1B6A  
                                                           l4254 1652  
                                                           l4166 1186  
                                                           l3438 1DB8  
                                                           l3704 1A82  
                                                           l2824 1AF4  
                                                           l4184 1EB8  
                                                           l4088 1BB0  
                                                           l4440 231A  
                                                           l2746 1D52  
                                                           l2738 1D36  
                                                           l2842 1B3C  
                                                           l2818 1ADC  
                                                           l4178 1E9E  
                                                           l4530 155E  
                                                           l4522 154A  
                                                           l3802 0EBA  
                                                           l3708 1A94  
                                                           l2836 1B24  
                                                           l4452 146A  
                                                           l4380 1874  
                                                           l4372 184C  
                                                           l4364 1830  
                                                           l4348 17E4  
                                                           l3580 0A44  
                                                           l4540 157A  
                                                           l2870 1360  
                                                           l4374 1858  
                                                           l3830 0F84  
                                                           l3750 0DC0  
                                                           l4630 1900  
                                                           l2880 13AA  
                                                           l2856 22A2  
                                                           l4472 14BA  
                                                           l4464 14A0  
                                                           l4456 1476  
                                                           l4448 145E  
                                                           l4368 1842  
                                                           l4288 2004  
                                                           l3584 0A5A  
                                                           l3568 0A18  
                                                           l4552 15A2  
                                                           l3736 178C  
                                                           l4632 1908  
                                                           l2882 13BC  
                                                           l2874 137A  
                                                           l4386 1F70  
                                                           l3818 0F24  
                                                           l3770 0E04  
                                                           l3754 0DD0  
                                                           l4634 190E  
                                                           l3692 1A52  
                                                           l2892 1404  
                                                           l2876 1390  
                                                           l3932 21C6  
                                                           l4468 14AE  
                                                           l4388 1F7C  
                                                           l4564 15CA  
                                                           l3844 1016  
                                                           l3780 0E6C  
                                                           l2894 1414  
                                                           l2886 13D8  
                                                           l4478 14C6  
                                                           l4574 15F0  
                                                           l3790 0E86  
                                                           l3758 0DDC  
                                                           l4646 1932  
                                                           l4638 191C  
                                                           l3696 1A60  
                                                           l3688 1A44  
                                                           l2888 13EA  
                                                           l3936 21DC  
                                                           l4488 14DE  
                                                           l2898 142C  
                                                           l3786 0E74  
                                                           ?_isr 0001  
                                                           STR_1 064C  
                                                           STR_2 0650  
                                                           STR_3 067C  
                                                           STR_4 0678  
                                                           STR_5 0647  
                                                           STR_6 0629  
                                                           STR_7 063D  
                                                           STR_8 0638  
                                                           STR_9 0670  
                                                           _LATA 000F89  
                                                           _LATB 000F8A  
                                                           _LATC 000F8B  
                                                           u3040 1F5C  
                                                           _LATD 000F8C  
                                                           _LATE 000F8D  
                                                           u3220 1CA4  
                                                           u4005 0E12  
                                                           u4120 0F84  
                                                           u5001 17D0  
                                                           u2450 1AB6  
                                                           u5010 17D8  
                                                           u5020 1804  
                                                           u3340 1EE2  
                                                           u4060 0EBA  
                                                           u2470 1ACE  
                                                           u4135 0F90  
                                                           u5025 17FA  
                                                           u4145 0FAC  
                                                           u4075 0EC8  
                                                           u5060 185E  
                                                           u4520 1B56  
                                                           u4601 1066  
                                                           u3490 211A  
                                                           u5260 1514  
                                                           u4630 1080  
                                                           u4560 1BBA  
                                                           u5360 158C  
                                                           u5280 1542  
                                                           u3905 179A  
                                                           u2970 1C24  
                                                           u4730 110A  
                                                           u4660 10A6  
                                                           u4901 1626  
                                                           u4591 1052  
                                                           u4760 113A  
                                                           u5457 196C  
                                                           u4921 1640  
                                                           u4930 1648  
                                                           u4690 10D0  
                                                           u5467 2296  
                                                           u5477 20B8  
                                                           u3885 172E  
                                                           u3990 0E04  
                                                           u5487 2146  
                                                           u4880 19E6  
                                                           _TMR0 000FD6  
                                                           _TMR1 000FCE  
                                                           _TMR2 000FCC  
                                                           _Beep 22EE  
                                                   __CFG_PWRT$ON 000000  
                                            __size_of_ADCmeasure 00AE  
                                                   __CFG_STVR$ON 000000  
                                                           _band 0057  
                                                           _fabs 2030  
                                                           _elpf 006C  
                                                           _main 188A  
                                                           _freq 0048  
                                                  FreqMeasure@jj 001C  
                                                           _maxf 008E  
                                                           _curr 004C  
                                                   ___ftpack@arg 0005  
                                                           _frwd 0050  
                                                           _logo 00ED  
                                                           _refl 004E  
                                                   ___ftpack@exp 0008  
                                                           _temp 004A  
                                                           fsr2h 000FDA  
                                                           indf2 000FDF  
                                                           fsr2l 000FD9  
                                                           btemp 0059  
                                                           _sqrt 11B2  
                                                           _volt 0082  
                                                __end_of_PTT_OFF 2376  
                                                           prodh 000FF4  
                                                           prodl 000FF3  
                                                           start 00BC  
                                                __end_of_DelayMs 22AE  
                                                   ___param_bank 000000  
                                                    _writeEEPROM 2068  
                                                   ___ftmul@sign 0017  
                                                          ??_ADC 0007  
                                                          ADC@ch 0009  
                                                __end_of_SetBand 1D76  
                                                   ___fttol@exp1 003D  
                                                   ___fttol@lval 0039  
                                                          ??_isr 0001  
                                                  ?_readEEPROM16 0006  
                                                          ?_Beep 0001  
                                                  __CFG_OSCS$OFF 000000  
                                                          ?_fabs 0010  
                                             writeEEPROM@address 0006  
                                                          ?_main 0001  
                                                          _EEADR 000FA9  
                                                __end_of___ftadd 11B2  
                                                          STR_10 0654  
                                                          STR_11 0684  
                                                          STR_20 066C  
                                                          STR_12 0660  
                                                          STR_21 0680  
                                                          STR_13 0674  
                                                          STR_22 0668  
                                                          STR_14 0664  
                                                          STR_15 0633  
                                                          STR_23 060D  
                                                          STR_16 062E  
                                                          STR_24 0617  
                                                          STR_17 065C  
                                                          STR_25 0601  
                                                          STR_18 0658  
                                                          STR_26 0621  
                                                          STR_19 0642  
                                                          _CMCON 000FB4  
                                                __end_of___ftneg 22EE  
                                                __end_of___lldiv 1CF6  
                                                          ?_sqrt 001F  
                                                __end_of___ftmul 16EE  
                                                          _T0CON 000FD5  
                                                          _T1CON 000FCD  
                                                __end_of___ftsub 2030  
                                                __end_of___fttol 188A  
                                                          _T2CON 000FCA  
                                                          _T3CON 000FB1  
                                                 __CFG_DEBUG$OFF 000000  
                                                __end_of___lwdiv 1F14  
                                                          i2l301 00AC  
                                                          i2l285 22B8  
                                                          i2l287 22CA  
                                                          i2l299 00AA  
                                                          _RCREG 000FAE  
                                                          _RCSTA 000FAB  
                                                          _TMR1H 000FCF  
                                                          _TMR1L 000FCE  
                                                          _TMR3H 000FB3  
                                                          _TMR3L 000FB2  
                                                          _SPBRG 000FAF  
                                                          _PORTA 000F80  
                                                          _PORTB 000F81  
                                                          _PORTC 000F82  
                                                          _PORTD 000F83  
                                                          _PORTE 000F84  
                                                          _TRISA 000F92  
                                                          _TRISB 000F93  
                                                          _TRISC 000F94  
                                                          _TRISD 000F95  
                                                          _TRISE 000F96  
                                                ??i2_RXstopTIMER 0001  
                                                          _TXREG 000FAD  
                                                          _TXSTA 000FAC  
                                              LCDpageSelect@page 0013  
                                                  __CFG_WRT0$OFF 000000  
                                                  __CFG_WRT1$OFF 000000  
                                                  __CFG_WRT2$OFF 000000  
                                                  ??_RXstopTIMER 0005  
                                                  __CFG_WRT3$OFF 000000  
                                                   ___lltoft@exp 0015  
                                                 __CFG_EBTR0$OFF 000000  
                                                 __CFG_EBTR1$OFF 000000  
                                                 __CFG_EBTR2$OFF 000000  
                                                 __CFG_EBTR3$OFF 000000  
                                                ??_ConvertNumber 000A  
                                                  __CFG_WRTB$OFF 000000  
                                                  __CFG_WRTC$OFF 000000  
                                                  __CFG_WRTD$OFF 000000  
                                                          _aband 00F1  
                                                 __CFG_EBTRB$OFF 000000  
                                                          _cpeak 0078  
                                           __end_of_CreateBuffTX 1C76  
                                                          _fpeak 0046  
                                            __end_of_FreqMeasure 19FC  
                                                          fabs@d 0010  
                                                 FreqMeasure@err 001D  
                                                 FreqMeasure@tmr 001E  
                                                          _hystF 00EF  
                                                          _tempM 0070  
                                                          _hystT 00F0  
                                                          _rpeak 007A  
                                                  ___ftpack@sign 0009  
                                                          _voltM 006E  
                                                          isr@rx 0004  
                                         __size_of_LCDpageSelect 006C  
                                                          tablat 000FF5  
                                                   ?_EEmbandRead 0001  
                                        __size_of_waitAckFromLCD 0054  
                                               __end_of_PTT_read 2326  
                                                          ttemp5 005A  
                                                          sqrt@a 001F  
                                                          ttemp6 005D  
                                                          ttemp7 0061  
                                                          sqrt@i 0028  
                                                          sqrt@q 0029  
                                                          sqrt@x 002C  
                                                          sqrt@z 0025  
                                                          status 000FD8  
                                                          wtemp8 005A  
                                                  ?_RXstartTIMER 0001  
                                                   __end_of_Beep 230A  
                                                __initialization 1FBA  
                                                   __end_of_fabs 2068  
                                                   __end_of_main 194A  
                                                    ?_BandDecode 0001  
                                                   __end_of_sqrt 130E  
                                                 ??_readEEPROM16 0008  
                                                         ??_Beep 0007  
                                                 __CFG_OSC$HSPLL 000000  
                                                         ??_fabs 0013  
                                                         ??_main 0046  
                                                  ___fttol@sign1 0038  
                                                         ??_sqrt 0022  
                                                  __activetblptr 000001  
                                        __size_of_PttHoldControl 0030  
                                                    ?_FanControl 0001  
                                                         _ADCON0 000FC2  
                                                         _ADCON1 000FC1  
                                                  ?_RecieveError 0001  
                                         __size_of_writeEEPROM16 0026  
                                                   ?_EEsetupRead 0001  
                                                         _ADRESH 000FC4  
                                                         _ADRESL 000FC3  
                                                         _EEDATA 000FA8  
                                                         _EECON1 000FA6  
                                                         _EECON2 000FA7  
                                                      ??_PTT_OFF 0007  
                                               __end_of___ftpack 1BE0  
                                               __end_of___lltoft 1FBA  
                                                         i2l3950 2200  
                                                         _INTCON 000FF2  
                                                         i2l3946 21F2  
                                                         i2l3964 002A  
                                                         i2l3982 007E  
                                                         i2l3978 0070  
                                                         i2l3988 008A  
                                            ProtectCheck@beepPer 0064  
                                                      ??_DelayMs 0005  
                                               __end_of___lwtoft 2262  
                                            __end_of_RXstopTIMER 23CE  
                                                 __CFG_WDTPS$128 000000  
                                                         _WDTCON 000FD1  
                                                 ??_RXstartTIMER 0001  
                                                         _STKPTR 000FFC  
                                                         _PTT_ON 2166  
                                             __size_of_RXrestart 002A  
                                                         _DelayS 209E  
                                                      ??_SetBand 0005  
                                             __size_of_SendUSART 001C  
                                                         ___ftge 1E5E  
                                                         _beeper 00EE  
                                                      ??___ftadd 0013  
                                                      ??___ftneg 0008  
                                                      ??___lldiv 000D  
                                                      ??___ftmul 0013  
                                                      ??___ftsub 001F  
                                                      ??___fttol 0033  
                                                         _buffRX 00CF  
                                                         _buffTX 008F  
                                                         _fanptt 00F3  
                                                      ??___lwdiv 0009  
                                                   ??_ADCmeasure 000A  
                                                         _bstate 008A  
                                                  _LCDpageSelect 1DF2  
                                                         _bypass 0058  
                                                         _cvtout 0068  
                                                         clear_0 1FD2  
                                                         clear_1 1FDE  
                                                         _frtout 006A  
                                                         _reldel 00F5  
                                                         _sensor 00EC  
                                                         _rx_end 0086  
                                                         _tx_len 0052  
                                          ___ftmul@f3_as_product 0018  
                                                    _FreqMeasure 194A  
                                             __size_of_SetupMode 03E6  
                                                   __mediumconst 0000  
                                                         tblptrh 000FF7  
                                                         tblptrl 000FF6  
                                                         tblptru 000FF8  
                                                 ??_RecieveError 0001  
                                          __end_of_AntennaSelect 238E  
                                                   ?i2_RXrestart 0001  
                                             __size_of_Tramsmitt 0016  
                                                  ??_SlowControl 000A  
                                            __size_of_BandDecode 009E  
                                             __size_of_SwitchOFF 0010  
                                                     __accesstop 0060  
                                        __end_of__initialization 1FE4  
                                             __end_of_ADCmeasure 1AAA  
                                                     ___ftadd@f1 000D  
                                                     ___ftadd@f2 0010  
                                                     ___ftge@ff1 0013  
                                                     ___ftge@ff2 0016  
                                                  ___rparam_used 000001  
                                                writeEEPROM@data 0005  
                                                     ___ftneg@f1 0005  
                                                     ___ftmul@f1 000D  
                                                     ___ftmul@f2 0010  
                                                     ___ftsub@f1 0019  
                                                     ___ftsub@f2 001C  
                                                     ___fttol@f1 002F  
                                                 __pcstackCOMRAM 0001  
                                            __size_of_FanControl 007C  
                                                  _writeEEPROM16 2262  
                                                   __pidataBANK0 23DA  
                                                     ___lltoft@c 000D  
                                                 ?_LCDpageSelect 0001  
                                                     ___lwtoft@c 000D  
                                          __size_of_CreateBuffTX 0096  
                                                      ?_PTT_read 0001  
                                              __end_of_RXrestart 21BE  
                                              _ReadStatusFromLCD 1532  
                                                    _RXstopTIMER 23C4  
                                              __end_of_SendUSART 2342  
                                             ?_ReadStatusFromLCD 0001  
                                                     __pbssBANK0 0060  
                                           __end_of_readEEPROM16 223A  
                                                 _waitAckFromLCD 1F14  
                                            ??_ReadStatusFromLCD 0046  
                                                     __pnvCOMRAM 0057  
                                                        ?_PTT_ON 0001  
                                           __size_of_EEmbandRead 0032  
                                                        ?_DelayS 0001  
                                            __end_of_SlowControl 17BE  
                                              __end_of_SetupMode 0A70  
                                       __size_of_SendStatusToLCD 0292  
                                                   ?_writeEEPROM 0005  
                                                 ?_writeEEPROM16 0008  
                                                        ?___ftge 0013  
                                                   _CreateBuffTX 1BE0  
                                              __end_of_Tramsmitt 23A4  
                                                        _CCP1CON 000FBD  
                                                      ?___ftpack 0005  
                                              __end_of_SwitchOFF 23B4  
                                                      ?___lltoft 000D  
                                      __end_of_ReadStatusFromLCD 1614  
                                                      ?___lwtoft 000D  
                                              waitAckFromLCD@ack 0005  
                                           __end_of_RXstartTIMER 23C4  
                                                     ??_PTT_read 0020  
                                                 _PttHoldControl 2106  
                                         __end_of_waitAckFromLCD 1F68  
                                                        _PTT_OFF 235C  
                                                        _DelayMs 2288  
                                           __size_of_EEsetupRead 033E  
                                                     _bstate_old 0089  
                                                     _readEEPROM 2342  
                                                __size_of_PTT_ON 002E  
                                                __size_of_DelayS 0036  
                                                        _SetBand 1CF6  
                                                        __Hparam 0000  
                                                        __Lparam 0000  
                                                ??_LCDpageSelect 0012  
                                                   ??_BandDecode 0006  
                                           __end_of_RecieveError 22D0  
                                                __size_of___ftge 0062  
                                                        ___ftadd 1040  
                                                        ___ftneg 22D0  
                                                        ___lldiv 1C76  
                                                        ___ftmul 1614  
                                                        ___ftsub 1FF6  
                                                        ___fttol 17BE  
                                                        ___lwdiv 1EC0  
                                                   __psmallconst 0600  
                                                        _biasdel 00F4  
                                                        __pcinit 1FBA  
                                                     ??___ftpack 000A  
                                                        __ramtop 0600  
                                                     ??___lltoft 0011  
                                                        __ptext0 188A  
                                                        __ptext1 16EE  
                                                        __ptext2 2106  
                                                        __ptext3 1D76  
                                                        __ptext4 0DAE  
                                                        __ptext5 238E  
                                                        __ptext6 1532  
                                                        __ptext7 068A  
                                                        __ptext8 2262  
                                                        __ptext9 2068  
                                         __end_of_PttHoldControl 2136  
                                                     ??___lwtoft 0010  
                                                   __size_of_ADC 0030  
                                                    SetupMode@lW 0022  
                                                    SetupMode@pW 001E  
                                                    SetupMode@rW 0020  
                                                        _err_old 00FC  
                                                        _max_ref 00E7  
                                                        _max_pwr 00E9  
                                                   __size_of_isr 00B4  
                                                        _lpferrC 00DB  
                                                        _lpferrP 00DD  
                                                        _lpferrR 00D9  
                                                   ??_FanControl 0005  
                                          __end_ofi2_RXstopTIMER 23D8  
                                          __end_of_ConvertNumber 144C  
                                                ?_waitAckFromLCD 0001  
                                                      DelayS@sec 0007  
                                           end_of_initialization 1FE4  
                                                      DelayMs@ms 0006  
                                                    _SlowControl 16EE  
                                             __end_of_BandDecode 1B48  
                                           __size_ofi2_RXrestart 002A  
                                                  ?_ProtectCheck 0001  
                                                ??_writeEEPROM16 000B  
                                                ___lldiv@divisor 0009  
                                                ___lldiv@counter 0011  
                                        __size_of_LCDversionSend 002A  
                                                      _RCSTAbits 000FAB  
                                                        postinc0 000FEE  
                                                        postinc2 000FDE  
                                             __end_of_FanControl 1DF2  
                                              ??_SendStatusToLCD 0012  
                                              ConvertNumber@conv 0009  
                                               AntennaSelect@ant 0005  
                                                      _PORTAbits 000F80  
                                                      _PORTCbits 000F82  
                                                ?_PttHoldControl 0001  
                                     __size_of_ReadStatusFromLCD 00E2  
                                                   ?_FreqMeasure 0001  
                                          __size_of_readEEPROM16 0028  
                                                     _ptt_htimer 0088  
                                                CreateBuffTX@str 000C  
                                                 ??_ProtectCheck 0020  
                                                    ?_readEEPROM 0001  
                                                PttHoldControl@t 0085  
                                                  EEsetupRead@lW 00FA  
                                                  EEsetupRead@pW 00F6  
                                                  EEsetupRead@rW 00F8  
                                                 __end_of_PTT_ON 2194  
                                                 __end_of_DelayS 20D4  
                                                    ___ftmul@exp 0016  
                                          __size_of_RXstartTIMER 0010  
                                           __size_of_writeEEPROM 0036  
                                                 __end_of___ftge 1EC0  
                                                   _readEEPROM16 2212  
                                                      SetBand@bb 0005  
                                         writeEEPROM@INTCON_SAVE 0007  
                                            start_initialization 1FBA  
                                                    __end_of_ADC 2166  
                                                   ?_RXstopTIMER 0001  
                                              __size_of_PTT_read 001C  
                                                    __end_of_isr 00BC  
                                                      _RXrestart 2194  
                                                      _SendUSART 2326  
                                                       ??_PTT_ON 0020  
                                                       ??_DelayS 0005  
                                          __size_of_RecieveError 0022  
                                                   _RXstartTIMER 23B4  
                                                       ??___ftge 0019  
                                                      _SetupMode 068A  
                                         __size_of_AntennaSelect 0018  
                                                    __pdataBANK0 00FC  
                                                      _Tramsmitt 238E  
                                            __size_of_readEEPROM 001A  
                                              __size_of___ftpack 0098  
                                              __size_of___lltoft 0052  
                                                    __pbssCOMRAM 0046  
                                                      _SwitchOFF 23A4  
                                              __size_of___lwtoft 0028  
                                                  __pcstackBANK0 00F6  
                                                     ?_RXrestart 0001  
                                                   _RecieveError 22AE  
                                                       ?_PTT_OFF 0001  
                                                  ??_EEmbandRead 0006  
                                                     ?_SendUSART 0001  
                                                       ?_DelayMs 0001  
                                                      __pnvBANK0 00D9  
                                                       ?_SetBand 0001  
                                                 _LCDversionSend 21BE  
                                               ___lwdiv@dividend 0005  
                                                      __pintcode 0008  
                                                      _cpeak_old 0072  
                                                       ?___ftadd 000D  
                                                     ?_SetupMode 0001  
                                                       ?___ftneg 0005  
                                                       ?___lldiv 0005  
                                                       ?___ftmul 000D  
                                                       ?___ftsub 0019  
                                                       ?___fttol 002F  
                                                       ?___lwdiv 0005  
                                                      _fpeak_old 0076  
                                                     ?_Tramsmitt 0001  
                                           __end_of_ProtectCheck 1532  
                                                    __smallconst 0600  
                                               ??_waitAckFromLCD 0005  
                                                     ?_SwitchOFF 0001  
                                                  SetupMode@eadr 0024  
                                           __size_of_FreqMeasure 00B2  
                                                  ??_EEsetupRead 003E  
                                               readEEPROM16@addr 000D  
                                               ___lwdiv@quotient 0009  
                                                  _AntennaSelect 2376  
                                                   ?_SlowControl 0001  
                                         __end_of_LCDversionSend 21E8  
                                                       _LATBbits 000F8A  
                                                       _LATCbits 000F8B  
                                                       _LATDbits 000F8C  
                                                       _LATEbits 000F8D  
                                                _SendStatusToLCD 0DAE  
                                                       _PIE1bits 000F9D  
                                            __end_of_EEmbandRead 2106  
                                                       _PIR1bits 000F9E  
                                                       _PIR2bits 000FA1  
                                                      _rpeak_old 0074  
                                               ??_PttHoldControl 0005  
                                          __end_of_LCDpageSelect 1E5E  
                                                     _ADCON0bits 000FC2  
                                                       _PTT_read 230A  
                                                      _volt_view 0080  
                                                  ??i2_RXrestart 0001  
                                                    ??_RXrestart 0005  
                                                 ?_AntennaSelect 0001  
                                                LCDpageSelect@tt 0012  
                                                    _INTCON2bits 000FF1  
                                           __size_of_RXstopTIMER 000A  
                                               __size_of_PTT_OFF 001A  
                                                    ??_SendUSART 0007  
                                                   ??_readEEPROM 0005  
                                               __size_of_DelayMs 0026  
                                                ?_LCDversionSend 0001  
                                            __end_of_EEsetupRead 0DAE  
                                                     _EECON1bits 000FA6  
                                                       __Hrparam 0000  
                                               __size_of_SetBand 0080  
                                                       __Lrparam 0000  
                                          __end_of_writeEEPROM16 2288  
                                                   __Lsmallconst 0600  
                                         __size_ofi2_RXstopTIMER 000A  
                                                    ??_SetupMode 0014  
                                               __size_of___ftadd 0172  
                                                     _ADCmeasure 19FC  
                                               __size_of___ftneg 001E  
                                         __size_of_ConvertNumber 013E  
                                               __size_of___lldiv 0080  
                                               __size_of___ftmul 00DA  
                                               __size_of___ftsub 003A  
                                               __size_of___fttol 00CC  
                                               __size_of___lwdiv 0054  
                                                       ___ftpack 1B48  
                                                       ___lltoft 1F68  
                                                    ??_Tramsmitt 0005  
                                                       ___lwtoft 223A  
                                                       _band_old 008B  
                                             __end_of_readEEPROM 235C  
                                                    ??_SwitchOFF 0005  
                                                ___lwdiv@divisor 0007  
                                                ___lwdiv@counter 000B  
                                                       __ptext10 1EC0  
                                                       __ptext11 1C76  
                                                       __ptext20 1614  
                                                       __ptext12 1DF2  
                                                       __ptext21 2212  
                                                       __ptext13 1F14  
                                                       __ptext30 230A  
                                                       __ptext22 1F68  
                                                       __ptext14 2194  
                                                       __ptext31 2166  
                                                       __ptext23 17BE  
                                                       __ptext15 23C4  
                                                       __ptext40 235C  
                                                       __ptext32 194A  
                                                       __ptext24 20D4  
                                                       __ptext16 0A70  
                                                       __ptext41 21BE  
                                                       __ptext33 2030  
                                                       __ptext25 2342  
                                                       __ptext17 11B2  
                                                       __ptext50 21E8  
                                                       __ptext42 2326  
                                                       __ptext34 22D0  
                                                       __ptext26 22EE  
                                                       __ptext18 1FF6  
                                                       __ptext51 23CE  
                                                       __ptext43 2288  
                                                       __ptext35 223A  
                                                       __ptext27 2376  
                                                       __ptext19 1040  
                                                       __ptext52 22AE  
                                                       __ptext44 1BE0  
                                                       __ptext36 1B48  
                                                       __ptext28 144C  
                                                       __ptext53 23B4  
                                                       __ptext45 130E  
                                                       __ptext37 1E5E  
                                                       __ptext29 23A4  
                                                       __ptext46 209E  
                                                       __ptext38 1AAA  
                                                       __ptext47 19FC  
                                                       __ptext39 1CF6  
                                                       __ptext48 2136  
                                        __end_of_SendStatusToLCD 1040  
                                                  __size_of_Beep 001C  
                                                    _EEmbandRead 20D4  
                                                       _max_tFAN 00DF  
                                                       _max_curr 00E3  
                                                  __size_of_fabs 0038  
                                                       _max_temp 00E1  
                                                  __size_of_main 00C0  
                                                       _max_volt 00E5  
                                            __end_ofi2_RXrestart 2212  
                                                  __size_of_sqrt 015C  
                                                  ??_writeEEPROM 0006  
                                                       _temp_old 007C  
                                                  ?_CreateBuffTX 000C  
                                                       int$flags 0059  
                                                       _ptt_hold 00EB  
                                          __size_of_ProtectCheck 00E6  
                                                       _volt_old 007E  
                                                ProtectCheck@bpt 0066  
                                                     _INTCONbits 000FF2  
                                                ??_AntennaSelect 0005  
                                                  i2_RXstopTIMER 23CE  
                                                    _EEsetupRead 0A70  
                                                  _ConvertNumber 130E  
                                                       intlevel2 23D8  
                                              LCDversionSend@rep 0012  
                                               ___lldiv@dividend 0005  
                                           __size_of_SlowControl 00D0  
                                                   _ProtectCheck 144C  
                                                 readEEPROM16@ee 000B  
                                                 ??_CreateBuffTX 0011  
                                                 readEEPROM@addr 0005  
                                            ConvertNumber@number 0005  
                                                 ProtectCheck@bp 0084  
                                                    ?_ADCmeasure 0001  
                                            __end_of_writeEEPROM 209E  
                                               ___lldiv@quotient 000D  
                                                 ?i2_RXstopTIMER 0001  
                                                    i2_RXrestart 21E8  
                                                 ?_ConvertNumber 0005  
                                               ?_SendStatusToLCD 0001  
                                              writeEEPROM16@addr 0008  
                                              writeEEPROM16@data 000A  
